<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>帆的博客</title>
  <icon>https://www.gravatar.com/avatar/5e6c22ad69915102664d6eb06cca090f</icon>
  <subtitle>扬帆起航</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.saily.top/"/>
  <updated>2019-05-23T15:15:43.635Z</updated>
  <id>http://www.saily.top/</id>
  
  <author>
    <name>帆</name>
    <email>hyyangfan@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Cloud微服务-3-SpringBoot源码初探</title>
    <link href="http://www.saily.top/2019/05/23/microservices-3/"/>
    <id>http://www.saily.top/2019/05/23/microservices-3/</id>
    <published>2019-05-23T14:50:39.000Z</published>
    <updated>2019-05-23T15:15:43.635Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringApplication"><a href="#SpringApplication" class="headerlink" title="SpringApplication"></a>SpringApplication</h1><p>Class that can be used to bootstrap and launch a Spring application from a Java main method. By default class will perform the following steps to bootstrap your application:</p><ul><li>Create an appropriate ApplicationContext instance (depending on your classpath)</li><li>Register a CommandLinePropertySource to expose command line arguments as Spring properties</li><li>Refresh the application context, loading all singleton beans</li><li>Trigger any CommandLineRunner beans</li></ul><a id="more"></a><p> SpringApplications can read beans from a variety of different sources. It is generally recommended that a single @Configuration class is used to bootstrap your application, however, you may also set sources from:</p><ul><li>The fully qualified class name to be loaded by AnnotatedBeanDefinitionReader</li><li>The location of an XML resource to be loaded by XmlBeanDefinitionReader, or a groovy script to be loaded by GroovyBeanDefinitionReader</li><li>The name of a package to be scanned by ClassPathBeanDefinitionScanner</li></ul><p>除了用@Configuration标记的类可以启动应用，还有上面介绍的3种方式可以启动应用。</p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>看看构造方法的说明：</p><blockquote><p>Create a new SpringApplication instance. The application context will load beans from the specified primary sources (see class-level documentation for details. The instance can be customized before calling run(String…).</p></blockquote><p>创建一个SpringApplication，应用上下文从指定的primary sources加载bean。</p><p>构造方法的实现里有一行this.webApplicationType=WebApplicationType.deduceFromClasspath();，这行决定了应用是用的什么web容器启动的，非web环境，Servlet容器，或者Reactive（Spring 5新增的）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">Assert.notNull(primarySources, <span class="string">"PrimarySources must not be null"</span>);</span><br><span class="line"><span class="keyword">this</span>.primarySources = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</span><br><span class="line"><span class="keyword">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line">setInitializers((Collection) getSpringFactoriesInstances(</span><br><span class="line">ApplicationContextInitializer.class));</span><br><span class="line">setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line"><span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再看下一行代码<code>setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));</code>里面的具体内容都干了些什么。</p><p>从getSpringFactoriesInstances方法代码里执行跟到SpringFactoriesLoader.loadSpringFactories这个方法中，有行很关键的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Enumeration&lt;URL&gt; urls = (classLoader != <span class="keyword">null</span> ?</span><br><span class="line">classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :</span><br><span class="line">ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The location to look for factories.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Can be present in multiple JAR files.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FACTORIES_RESOURCE_LOCATION = <span class="string">"META-INF/spring.factories"</span>;</span><br></pre></td></tr></table></figure><p>urls就包含了所有jar包里的spring.factories文件。</p><p>SpringFactoriesLoader是框架内部用来加载工厂的一种机制，它会读取META-INF/spring.factories这个文件的内容，这个文件存在于多个jar文件中（所有的spring.factories都会被读取并加载），随便看一个，比如spring-boot-autoconfigure-2.1.4.RELEASE.jar里的，定义了7种类型的类，Spring会去加载这个文件中定义的工厂信息配置文件，左边都是接口或者抽象类，右边都是具体的实现类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Initializers</span><br><span class="line">org.springframework.context.ApplicationContextInitializer=\</span><br><span class="line">org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer,\</span><br><span class="line">org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener</span><br><span class="line"></span><br><span class="line"># Application Listeners</span><br><span class="line">org.springframework.context.ApplicationListener=\</span><br><span class="line">org.springframework.boot.autoconfigure.BackgroundPreinitializer</span><br><span class="line"></span><br><span class="line"># Auto Configuration Import Listeners</span><br><span class="line">org.springframework.boot.autoconfigure.AutoConfigurationImportListener=\</span><br><span class="line">org.springframework.boot.autoconfigure.condition.ConditionEvaluationReportAutoConfigurationImportListener</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>在读取了这些文件内容以后，文件里的内容就会作为缓存把数据放入到<code>private static final Map&lt;ClassLoader, MultiValueMap&lt;String, String&gt;&gt; cache = new ConcurrentReferenceHashMap&lt;&gt;();</code>中。</p><p>接下来，就获取了key为<code>org.springframework.context.ApplicationContextInitializer</code>的类列表。</p><p>这里也对应了前面提到过的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setInitializers((Collection) getSpringFactoriesInstances(</span><br><span class="line">ApplicationContextInitializer.class));</span><br></pre></td></tr></table></figure></p><p>后面就是通过反射的方式来创建这些ApplicationContextInitializer工厂类的实例。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;T&gt; instances = createSpringFactoriesInstances(type, parameterTypes,</span><br><span class="line">classLoader, args, names);</span><br></pre></td></tr></table></figure></p><p>再下一行的<code>setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</code>也是一样的逻辑，只不过这次是从缓存里获取的class名称了。</p><p>到这里ApplicationContextInitializer和ApplicationListener都实例化完成。</p><p>再往下面看<code>this.mainApplicationClass = deduceMainApplicationClass();</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Class&lt;?&gt; deduceMainApplicationClass() &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">StackTraceElement[] stackTrace = <span class="keyword">new</span> RuntimeException().getStackTrace();</span><br><span class="line"><span class="keyword">for</span> (StackTraceElement stackTraceElement : stackTrace) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"main"</span>.equals(stackTraceElement.getMethodName())) &#123;</span><br><span class="line"><span class="keyword">return</span> Class.forName(stackTraceElement.getClassName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line"><span class="comment">// Swallow and continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>万万没想到，Spring Boot竟然是通过这种方式来找到main方法所在类的，直接new一个RuntimeException()，然后从堆栈里去找main方法所在的类。</p><p>SpringApplication对象构造完成后，接下来就调用了run()方法。</p><h2 id="run-方法"><a href="#run-方法" class="headerlink" title="run()方法"></a>run()方法</h2><p>运行Spring应用，创建并且刷新一个新的ApplicationContext。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Run the Spring application, creating and refreshing a new</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ApplicationContext&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args the application arguments (usually passed from a Java main method)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a running &#123;<span class="doctag">@link</span> ApplicationContext&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>ConfigurableApplicationContext context = null;</p><p>ApplicationContext是Spring里非常重要的一个接口，看看它的注释。</p><p>是一个中心的接口，为一个应用提供了配置。当应用在运行的时候，它是只读的，但是如果实现支持的话，可以被重新加载。</p><p>提供的功能如下：</p><ul><li>提供了访问应用组件的bean工厂方法，继承自ListableBeanFactory</li><li>加载文件资源的能力，继承自 ResourceLoader接口</li><li>向注册的监听器发布事件的能力，继承自ApplicationEventPublisher接口</li><li>解析消息的能力，支持国际化，继承自MessageSource接口</li><li>继承父上下文的相关信息。子上下文有更高的优先级</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringApplication&quot;&gt;&lt;a href=&quot;#SpringApplication&quot; class=&quot;headerlink&quot; title=&quot;SpringApplication&quot;&gt;&lt;/a&gt;SpringApplication&lt;/h1&gt;&lt;p&gt;Class that can be used to bootstrap and launch a Spring application from a Java main method. By default class will perform the following steps to bootstrap your application:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create an appropriate ApplicationContext instance (depending on your classpath)&lt;/li&gt;
&lt;li&gt;Register a CommandLinePropertySource to expose command line arguments as Spring properties&lt;/li&gt;
&lt;li&gt;Refresh the application context, loading all singleton beans&lt;/li&gt;
&lt;li&gt;Trigger any CommandLineRunner beans&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="微服务" scheme="http://www.saily.top/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="微服务" scheme="http://www.saily.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Spring Cloud" scheme="http://www.saily.top/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Effective Java 第三版-条款6_避免创建不必要的对象</title>
    <link href="http://www.saily.top/2019/05/09/effective-java-3rd-6/"/>
    <id>http://www.saily.top/2019/05/09/effective-java-3rd-6/</id>
    <published>2019-05-09T12:20:55.000Z</published>
    <updated>2019-05-23T14:56:58.832Z</updated>
    
    <content type="html"><![CDATA[<h1 id="条款6-避免创建不必要的对象"><a href="#条款6-避免创建不必要的对象" class="headerlink" title="条款6_避免创建不必要的对象"></a>条款6_避免创建不必要的对象</h1><blockquote><p>It is often appropriate to reuse a single object instead of creating a new functionally equivalent object each time it is needed. Reuse can be both faster and more stylish. An object can always be reused if it is immutable (Item 17).</p></blockquote><p>在需要一个对象时，恰当的做法是尽可能重用这个对象而非创建一个功能完全一样的新对象。重用是既快又时髦。如果对象是不可变的，那么它总是可以被重用（条款17）。</p><a id="more"></a><blockquote><p>As an extreme example of what not to do, consider this statement:</p></blockquote><p>作为⼀个绝对不要这么做的极端示例，考虑如下语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="keyword">new</span> String(<span class="string">"bikini"</span>); <span class="comment">// DON'T DO THIS!</span></span><br></pre></td></tr></table></figure><blockquote><p>The statement creates a new String instance each time it is executed, and none of those object creations is necessary. The argument to the String constructor (“bikini”) is itself a String instance, functionally identical to all of the objects created by the constructor. If this usage occurs in a loop or in a frequently invoked method, millions of String instances can be created needlessly.</p></blockquote><p>这个语句每次执行都会创建一个新的实例，而这些对象的创建却是完全没有必要的。String构造方法的参数数(“bikini”)本身就是个String实例，在功能上与由这个构造方法创建的所有对象完全相同。如果这种用法出现在一个循环或是被频繁调用的方法中，那就会创建出无数的不必要地String实例。</p><blockquote><p>The improved version is simply the following:</p></blockquote><p>如下是改进版本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">"bikini"</span>;</span><br></pre></td></tr></table></figure><blockquote><p>This version uses a single String instance, rather than creating a new one each time it is executed. Furthermore, it is guaranteed that the object will be reused by any other code running in the same virtual machine that happens to contain the same string literal [JLS, 3.10.5]</p></blockquote><p>该版本使用了单个String实例⽽⾮每次在执⾏时都创建⼀个新的实例。此外，它还确保了运⾏在同⼀个虚拟机中并且包含了相同字符串字⾯值的其他代码能够重⽤该对象[JLS,<br>3.10.5]。</p><blockquote><p>You can often avoid creating unnecessary objects by using static factory methods (Item 1) in preference to constructors on immutable classes that provide both. For example, the factory method Boolean.valueOf(String) is preferable to the constructor Boolean(String), which was deprecated in Java 9. The constructor must create a new object each time it’s called, while the factory method is never required to do so and won’t in practice. In addition to reusing immutable objects, you can also reuse mutable objects if you know they won’t be modified.</p></blockquote><p>如果不变类既提供了静态⼯⼚⽅法（条款1），也提供了构造⽅法，那么你就可以通过前者<br>来避免创建不必要的对象。比如说，工厂方法Boolean.valueOf(String)要⽐构造⽅法<br>Boolean(String)更值得使⽤，后者已经在Java 9中被标记为不建议使⽤。构造⽅法必须要在每次调⽤时创建新的对象，⽽⼯⼚⽅法则没有这个限制，在实践中也不会这么做。除了重⽤不可变对象外，如果你知道对象不会被修改，那还可以重⽤可变对象。</p><blockquote><p>Some object creations are much more expensive than others. If you’re going to need such an “expensive object” repeatedly, it may be advisable to cache it for reuse. Unfortunately, it’s not always obvious when you’re creating such an object. Suppose you want to write a method to determine whether a string is a valid Roman numeral. Here’s the easiest way to do this using a regular expression:</p></blockquote><p>一些对象的创建成本要比其他对象高很多。如果你不断需要这种<code>昂贵的对象</code>，那么更好的方式是将其缓存起来重用。不幸地是，在创建这样的对象时，这种情况并非那么显而易见。假设你要写一个方法来确定一个字符串是否是一个有效的罗马数字。下面是个最简单的实现方式，它使用了正则表达式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Performance can be greatly improved!</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isRomanNumeral</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> s.matches(<span class="string">"^(?=.)M*(C[MD]|D?C&#123;0,3&#125;)"</span></span><br><span class="line">+ <span class="string">"(X[CL]|L?X&#123;0,3&#125;)(I[XV]|V?I&#123;0,3&#125;)$"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>The problem with this implementation is that it relies on the String.matches method. While String.matches is the easiest way to check if a string matches a regular expression, it’s not suitable for repeated use in performance-critical situations. The problem is that it internally creates a Pattern instance for the regular expression and uses it only once, after which it becomes eligible for garbage collection. Creating a Pattern instance is expensive because it requires compiling the regular expression into a finite state machine.</p></blockquote><p>上述这种实现的问题在于它依赖于String.matches方法。虽然String.matches是检查字符串是否匹配一个正则表达式的最简单的方式，但它却不适合于性能关键的场景下重复使用。问题的原因是，它内部会为正则表达式创建一个Pattern实例，但却只用一次，接下来就会被垃圾回收掉。创建Pattern实例是非常昂贵的，因为它需要将正则表达式编译为一个有限状态机。</p><blockquote><p>To improve the performance, explicitly compile the regular expression into a Pattern instance (which is immutable) as part of class initialization, cache it, and reuse the same instance for every invocation of the isRomanNumeral method:</p></blockquote><p>为了改进性能，请在类初始化过程中手动将正则表达式编译到Pattern实例中（它是不可变），然后将其缓存起来，在每次调用isRomanNumeral方法的时候重用这个实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reusing expensive object for improved performance</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RomanNumerals</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern ROMAN = Pattern.compile(</span><br><span class="line"><span class="string">"^(?=.)M*(C[MD]|D?C&#123;0,3&#125;)"</span></span><br><span class="line">+ <span class="string">"(X[CL]|L?X&#123;0,3&#125;)(I[XV]|V?I&#123;0,3&#125;)$"</span>);</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isRomanNumeral</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ROMAN.matcher(s).matches();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>The improved version of isRomanNumeral provides significant performance gains if invoked frequently. On my machine, the original version takes 1.1 µs on an 8-character input string, while the improved version takes 0.17 µs, which is 6.5 times faster. Not only is the performance improved, but arguably, so is clarity. Making a static final field for the otherwise invisible Pattern instance allows us to give it a name, which is far more readable than the regular expression itself.</p></blockquote><p>改进版本的isRomanNumeral在频繁调用调用的情况极大提升了性能。在我的机器上，原始版本对于8字符的字符串花费了1.1 µs，而改进版本则只花了0.17 µs，快了6.5倍。除了性能改进外，代码也更清晰了。相比于不可见的Pattern实例，我们为其指定了一个static final字段，这可以让我们给它起一个名字，这一点相比正则表达式本身来说，可读性更好了。</p><blockquote><p>If the class containing the improved version of the isRomanNumeral method is initialized but the method is never invoked, the field ROMAN will be initialized needlessly. It would be possible to eliminate the initialization by lazily initializing the field (Item 83) the first time the isRomanNumeral method is invoked, but this is not recommended. As is often the case with lazy initialization, it would complicate the implementation with no measurable performance improvement (Item 67).</p></blockquote><p>如果包含了改进版本isRomanNumeral方法的类初始化了，但是方法却永远没有被调用，那么ROMAN字段就没有必要初始化了。可以通过在isRomanNumeral方法首次调用的时候延迟初始化该字段（条款83）来消除不必要的初始化，不过并不推荐这么做。因为对于延迟初始化来说，它常常导致实现变得复杂，并且性能上的改进也是存疑的（条款67）。</p><blockquote><p>When an object is immutable, it is obvious it can be reused safely, but there are other situations where it is far less obvious, even counterintuitive. Consider the case of adapters [Gamma95], also known as views. An adapter is an object that delegates to a backing object, providing an alternative interface. Because an adapter has no state beyond that of its backing object, there’s no need to create more than one instance of a given adapter to a given object.</p></blockquote><p>当一个对象是不可变的，那么显然对象可以被安全的重用，但是还有一些其他情况，这一点并不是那么明显，甚至是违反直觉的。考虑适配器场景[Gamma95]，⼜叫做视图（views）。所谓适配器，指的是委托给支撑对象的对象，并提供了另外的接口。因为适配器除了支撑对象的状态外，它自身是没有状态的，因此对于给定的对象来说，没有必要为其创建多个适配器的实例。</p><blockquote><p>For example, the keySet method of the Map interface returns a Set view of the Map object, consisting of all the keys in the map. Naively, it would seem that every call to keySet would have to create a new Set instance, but every call to keySet on a given Map object may return the same Set instance. Although the returned Set instance is typically mutable, all of the returned objects are functionally identical: when one of the returned objects changes, so do all the others, because they’re all backed by the same Map instance. While it is largely harmless to create multiple instances of the keySet view object, it is unnecessary and has no benefits.</p></blockquote><p>比如说，Map接口的keySet方法会返回Map对象的Set视图，其中包含了map里所有的键。直觉上，每次调用keySet都会创建一个Set实例，不过实际情况却是，每次调用给定Map对象的keySet都只会返回同一个Set实例。虽然返回的Set实例是可变的，但返回的对象却是相同的：当返回的对象中的一个发生了变化，其他也会发生变化，因为他们都是由相同的Map实例维护的。虽然创建keySet视图对象的多个实例是没有什么问题的，但是这么做没有必要，也没什么好处。</p><blockquote><p>Another way to create unnecessary objects is autoboxing, which allows the programmer to mix primitive and boxed primitive types, boxing and unboxing automatically as needed. Autoboxing blurs but does not erase the distinction between primitive and boxed primitive types. There are subtle semantic distinctions and not-so-subtle performance differences (Item 61). Consider the following method, which calculates the sum of all the positive int values. To do this, the program has to use long arithmetic because an int is not big enough to hold the sum of all the positive int values:</p></blockquote><p>创建不必要对象的另一种情况是自动装箱，程序员们可以通过自动装箱将原生类型与原生类型的包装类混合起来，这种情况下就会根据需要自动进行装箱与拆箱操作。<strong>自动装箱模糊了原生类型与包装类型，但却没有消除原生类型与包装类型之间的差别。</strong>这里存在一些微小的语义上的差别以及稍微有点大的性能上的差别（条款61）。考虑如下方法，它会计算所有正整型的和。为了做到这一点，程序需要运用long运算，因为int不足以容纳所有正整型int值的和：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Hideously slow! Can you spot the object creation?</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">sum</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> Long sum = <span class="number">0L</span>;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt;= Integer.MAX_VALUE; i++)</span><br><span class="line"> sum += i;</span><br><span class="line"> <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>This program gets the right answer, but it is much slower than it should be, due to a one-character typographical error. The variable sum is declared as a Long instead of a long, which means that the program constructs about 231 unnecessary Long instances (roughly one for each time the long i is added to the Long sum). Changing the declaration of sum from Long to long reduces the runtime from 6.3 seconds to 0.59 seconds on my machine. The lesson is clear: <strong>prefer primitives to boxed primitives, and watch out for unintentional autoboxing.</strong></p></blockquote><p>这个程序会得到正确的答案，不过要比预计的慢很多，原因在于一个字符拼写上的错误。变量sum被声明为Long而非long，这意味着程序要构建大约2的31次方个不必要的Long实例（大致在每次long i被加到Long sum中时）。在我的机器上，将sum声明由Long改为long则会将运行时间从6.3秒减少到0.59s。结论很清晰：<strong>优选选择原生类型而非包装类型，并消息提防无意的自动装箱</strong></p><blockquote><p>This item should not be misconstrued to imply that object creation is expensive and should be avoided. On the contrary, the creation and reclamation of small objects whose constructors do little explicit work is cheap, especially on modern JVM implementations. Creating additional objects to enhance the clarity, simplicity, or power of a program is generally a good thing. </p></blockquote><p>本条款不应该被误解，以为对象创建是昂贵的，应该避免。与之相反，构造方法没有做什么显式工作的小对象的创建和回收是非常廉价的，特别是在现代JVM上更是如此。创建额外的对象来增强清晰性、简单性或是程序的能力通常是件好事。</p><blockquote><p>Conversely, avoiding object creation by maintaining your own object pool is a bad idea unless the objects in the pool are extremely heavyweight. The classic example of an object that does justify an object pool is a database connection. The<br>cost of establishing the connection is sufficiently high that it makes sense to reuse these objects. Generally speaking, however, maintaining your own object pools clutters your code, increases memory footprint, and harms performance. Modern JVM implementations have highly optimized garbage collectors that easily outperform such object pools on lightweight objects.</p></blockquote><p>与之相反，通过维护自己的对象池来避免对象创建是个不好的做法，除非池中的对象是非常重量级的。真正需要一个对象池的一个典型示例就是数据库连接。建立连接的成本非常高昂，因此重用对象是有意义的。不过，一般来说，维护自己的对象池会将代码搞乱，增加内存使用率，也会对性能产生不好的影响。现在JVM已经对垃圾回收期进行了高度优化，对于轻量级对象来说，其性能已经超越了这种对象池。</p><blockquote><p>The counterpoint to this item is Item 50 on defensive copying. The present item says, “Don’t create a new object when you should reuse an existing one,” while Item 50 says, “Don’t reuse an existing object when you should create a new one.” Note that the penalty for reusing an object when defensive copying is called for is far greater than the penalty for needlessly creating a duplicate object. Failing to make defensive copies where required can lead to insidious bugs and security holes; creating objects unnecessarily merely affects style and performance.</p></blockquote><p>与本条款对应的是关于防御式拷贝的条款50。本条款说的是“在应该重用已有对象的时候，请不要创建新的”，而条款50说的是“在应该创建新的对象时，请不要复用已有的”。注意，当防御式拷贝调用时，重用对象的代价要比创建一个复制对象的成本高许多。在本应该进行防御式拷贝但却没有这么做的情况下会导致难以察觉的bug和安全漏洞；创建不必要的对象仅仅是影响了风格和性能而已。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;条款6-避免创建不必要的对象&quot;&gt;&lt;a href=&quot;#条款6-避免创建不必要的对象&quot; class=&quot;headerlink&quot; title=&quot;条款6_避免创建不必要的对象&quot;&gt;&lt;/a&gt;条款6_避免创建不必要的对象&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;It is often appropriate to reuse a single object instead of creating a new functionally equivalent object each time it is needed. Reuse can be both faster and more stylish. An object can always be reused if it is immutable (Item 17).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在需要一个对象时，恰当的做法是尽可能重用这个对象而非创建一个功能完全一样的新对象。重用是既快又时髦。如果对象是不可变的，那么它总是可以被重用（条款17）。&lt;/p&gt;
    
    </summary>
    
      <category term="Effective Java" scheme="http://www.saily.top/categories/Effective-Java/"/>
    
    
      <category term="java" scheme="http://www.saily.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Effective Java 第三版-条款4_通过私有构造方法强制禁止类的实例化类型</title>
    <link href="http://www.saily.top/2019/04/24/effective-java-3rd-4/"/>
    <id>http://www.saily.top/2019/04/24/effective-java-3rd-4/</id>
    <published>2019-04-24T12:14:38.000Z</published>
    <updated>2019-05-23T14:55:54.514Z</updated>
    
    <content type="html"><![CDATA[<h1 id="条款4-通过私有构造方法强制禁止类的实例化类型"><a href="#条款4-通过私有构造方法强制禁止类的实例化类型" class="headerlink" title="条款4_通过私有构造方法强制禁止类的实例化类型"></a>条款4_通过私有构造方法强制禁止类的实例化类型</h1><blockquote><p>Occasionally you’ll want to write a class that is just a grouping of static methods and static fields. Such classes have acquired a bad reputation because some people abuse them to avoid thinking in terms of objects, but they do have valid uses. They can be used to group related methods on primitive values or arrays, in the manner of java.lang.Math or java.util.Arrays. They can also be used to group static methods, including factories (Item 1), for objects that implement some interface, in the manner of java.util.Collections. (As of Java 8, you can also put such methods in the interface, assuming it’s yours to modify.) Lastly, such classes can be used to group methods on a final class, since you can’t put them in a subclass.<br>有时，你想要编写⼀个只包含⼀组静态⽅法和静态字段的类。这种类有⼀个不太好的名声，因为有些⼈会滥⽤他们，不从对象的⻆度来思考，⽽是坚信他们的想法是正确⽆误的。他们可⽤于将针对原⽣值或是数组的⽅法划分到⼀起，⽐如说java.lang.Math或是java.util.Arrays；还可以将静态⽅法划分到⼀起，包括⼯⼚（条款1），⽤于实现了某个接⼝的对象，⽐如说java.util.Collections（从Java 8开始，如果想要⾃⼰修改，那么你还可以将这类⽅法放到接⼝中）。最后，还可以将针对终态类的⽅法划分到⼀起，因为你⽆法再将他们放到⼦类中了。</p></blockquote><p>偶尔你会想写一个只有一组静态字段和静态方法的类。这样的类得到了一个坏的名声，因为有人会滥用他们，不从对象的角度思考，但它们有正确的用法。它们可以将原生只或数组的相关方法组合到一起，比如<strong>java.lang.Math</strong>或者<strong>java.util.Arrays</strong>。还可以将静态方法组合到一起，包括工厂（条款1），或是实现了某些接口的对象，比如说<strong>java.util.Collections</strong>，（在Java 8中，如果你想自己修改，你可以将这类方法放到接口中）。最后，可以将终态类上的方法进行分组，因为不能将它们放在子类中。</p><blockquote><p>Such utility classes were not designed to be instantiated: an instance would be nonsensical. In the absence of explicit constructors, however, the compiler provides a public, parameterless default constructor. To a user, this constructor is indistinguishable from any other. It is not uncommon to see unintentionally instantiable classes in published APIs.<br>这种辅助类在设计时是不希望被实例化的：实例本身是毫⽆意义的。不过，如果没有显式指定构造⽅法，那么编译器就会提供⼀个公有、⽆參的默认构造⽅法。对于⽤户来说，该构造⽅法很难与其他构造⽅法区分开来。我们常常会在已发布的APIs中看到⽆意中被实例化的类。</p></blockquote><p>这样的工具类不被设计成可实例化的：实例是没有意义的。虽然没有显式的构造器，但是编译器会提供一个无参，公共的默认构造器。<del>对用户来说，这个构造器是不易察觉的。在已发布的API中无意中可实例化的类里不常见。</del></p><blockquote><p><strong>Attempting to enforce noninstantiability by making a class abstract does not work</strong>. The class can be subclassed and the subclass instantiated. Furthermore,it misleads the user into thinking the class was designed for inheritance (Item 19). There is, however, a simple idiom to ensure noninstantiability. A default constructor is generated only if a class contains no explicit constructors, so a class can be made noninstantiable by including a private constructor:<br>通过将⼀个类设置为抽象类来强制禁⽌类的实例化是⾏不通的。类可以被⼦类化，⽽⼦类是可以实例化的。此外，这么做会对⽤户产⽣误导，让⽤户误以为这个类的设计⽬的是为了继承（条款19）。然⽽，有⼀种简单的⽅式可以确保类⽆法被实例化。如果⼀个类中没有显式指定构造⽅法，那么会⽣成⼀个默认构造⽅法，因此通过在类中增加⼀个私有构造⽅法就可以确保类⽆法被实例化了。</p></blockquote><p>试图通过抽象类来强制禁止实例化是行不通的。类可以被子类化，然后实例化子类。此外，它会误导用户这个类是被设计用来继承的（条款19）。但是，有一个简单的做法来确保类不被实例化。默认构造器只会在一个类不包含的显式的构造器的时候才会被生成，所以类包含一个私有的构造器就可以变为不可实例化的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Noninstantiable utility class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UtilityClass</span> </span>&#123;</span><br><span class="line"><span class="comment">// Suppress default constructor for noninstantiability</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">UtilityClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">&#125;</span><br><span class="line">... <span class="comment">// Remainder omitted</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Because the explicit constructor is private, it is inaccessible outside the class. The AssertionError isn’t strictly required, but it provides insurance in case the constructor is accidentally invoked from within the class. It guarantees the class will never be instantiated under any circumstances. This idiom is mildly counterintuitive because the constructor is provided expressly so that it cannot be invoked. It is therefore wise to include a comment, as shown earlier.<br>由于显式构造⽅法是私有的，因此它在类的外部是⽆法被访问到的。AssertionError并不是⼀定要加的，不过如果在类的内部不⼩⼼被调⽤的话，它会提供⼀种保证。它可以确保在任何情况下类都是绝对⽆法被实例化的。这种⽅式有点⼉违背直觉，因为提供构造⽅法的⽬的仅仅是为了⾃⼰不能被调⽤。更好的做法则是加上⼀些注释说明，正如上述代码所做的那样。</p></blockquote><p>因为显式的构造器是私有的，在类的外面是不可见的。这里的AssertionError不是严格要求的，但是它提供了保险预防构造器被意外的从类内部调用。它保证了类在任何情况下都不会被实例化。这个做法有点违反直觉，<del>因为构造函数是明确提供的，但是不能调用它。</del>因此，如前的代码一样，包含注释是明智的。</p><blockquote><p>As a side effect, this idiom also prevents the class from being subclassed. All constructors must invoke a superclass constructor, explicitly or implicitly, and a<br>subclass would have no accessible superclass constructor to invoke.<br>这种做法的⼀个副作⽤则是类也⽆法被⼦类化了。所有构造⽅法都得显式或隐式调⽤⽗类构造⽅法，⽽⼦类在这种情况下没有可访问到的⽗类构造⽅法去调⽤。</p></blockquote><p><del>有个副作用，这个做法也会阻止一个类被子类化。</del>所有的构造器都会显式的或隐式的调用父类的构造器，而子类没有可访问的父类构造器去调用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;条款4-通过私有构造方法强制禁止类的实例化类型&quot;&gt;&lt;a href=&quot;#条款4-通过私有构造方法强制禁止类的实例化类型&quot; class=&quot;headerlink&quot; title=&quot;条款4_通过私有构造方法强制禁止类的实例化类型&quot;&gt;&lt;/a&gt;条款4_通过私有构造方法强制禁止类
      
    
    </summary>
    
      <category term="Effective Java" scheme="http://www.saily.top/categories/Effective-Java/"/>
    
    
      <category term="java" scheme="http://www.saily.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Effective Java 第三版-条款5_优先选择依赖注入而非硬编码资源的关联关系</title>
    <link href="http://www.saily.top/2019/04/24/effective-java-3rd-5/"/>
    <id>http://www.saily.top/2019/04/24/effective-java-3rd-5/</id>
    <published>2019-04-24T12:14:38.000Z</published>
    <updated>2019-05-23T14:56:53.382Z</updated>
    
    <content type="html"><![CDATA[<h1 id="条款5-优先选择依赖注入而非硬编码资源的关联关系"><a href="#条款5-优先选择依赖注入而非硬编码资源的关联关系" class="headerlink" title="条款5_优先选择依赖注入而非硬编码资源的关联关系"></a>条款5_优先选择依赖注入而非硬编码资源的关联关系</h1><blockquote><p>Many classes depend on one or more underlying resources. For example, a spellchecker depends on a dictionary. It is not uncommon to see such classes implemented as static utility classes (Item 4):</p></blockquote><p>很多类会依赖一个或多个潜在的资源。比如拼写检查器会依赖字典。我们常常会看<br>到这种类被实现为了静态辅助类（条款4）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Inappropriate use of static utility - inflexible &amp; untestable!</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpellChecker</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Lexicon dictionary = ...;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">SpellChecker</span><span class="params">()</span> </span>&#123;&#125; <span class="comment">// Noninstantiable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String word)</span> </span>&#123; ... &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">suggestions</span><span class="params">(String typo)</span> </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>Similarly, it’s not uncommon to see them implemented as singletons (Item 3):</p></blockquote><p>同样地，它们常常也被实现成单例模式（条款3）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Inappropriate use of singleton - inflexible &amp; untestable!</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpellChecker</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Lexicon dictionary = ...;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">SpellChecker</span><span class="params">(...)</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> INSTANCE = <span class="keyword">new</span> SpellChecker(...);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String word)</span> </span>&#123; ... &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">suggestions</span><span class="params">(String typo)</span> </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Neither of these approaches is satisfactory, because they assume that there is only one dictionary worth using. In practice, each language has its own dictionary, and special dictionaries are used for special vocabularies. Also, it may be desirable to use a special dictionary for testing. It is wishful thinking to assume that a single dictionary will suffice for all time. </p></blockquote><p>上面的两种方式都不尽人意，因为他们都假设只有一个字典可供使用。实际上，没中语言都有自己的字典，并且特殊的字典用于特殊的词汇表。另外，我们还需要一个特殊的字典用于测试。认为一个字典就能满足所有的情况只不过是一种美好的愿望罢了。</p><blockquote><p>You could try to have SpellChecker support multiple dictionaries by making the dictionary field nonfinal and adding a method to change the dictionary in an existing spell checker, but this would be awkward, error-prone, and unworkable in a concurrent setting. <strong>Static utility classes and singletons are inappropriate for classes whose behavior is parameterized by an underlying resource. </strong></p></blockquote><p>你可以试着让拼写检查器支持多个字典，让字典的字段为非final并且添加一个方法改变拼写检查器里的字典，但是这样会很笨拙，容易出错，在并发设置的情况下无法正常工作。<strong>如果一个类的行为是由等资源来参数化的，那么静态辅助类和单例不适合这种情况</strong></p><blockquote><p>What is required is the ability to support multiple instances of the class (in our example, SpellChecker), each of which uses the resource desired by the client (in our example, the dictionary). A simple pattern that satisfies this requirement is to <strong>pass the resource into the constructor when creating a new instance</strong>. This is one form of dependency injection: the dictionary is a dependency of the spell checker and is injected into the spell checker when it is created.</p></blockquote><p>我们所需要的是支持类的多个实例的能力（在该例里中就是SpellChecker），每个实例都会使用客户端所需要的资源（在该示例中就是字典）。满足该需求的一个简单模式就是<strong>在创建一个新实例的时候将资源传给构造方法</strong>。这是依赖注入的一种形式：字典是拼写检查器的的一个依赖，并且在创建拼写检查器的时候被注入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Dependency injection provides flexibility and testability</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpellChecker</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Lexicon dictionary;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpellChecker</span><span class="params">(Lexicon dictionary)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.dictionary = Objects.requireNonNull(dictionary);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String word)</span> </span>&#123; ... &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">suggestions</span><span class="params">(String typo)</span> </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>The dependency injection pattern is so simple that many programmers use it for years without knowing it has a name. While our spell checker example had only a single resource (the dictionary), dependency injection works with an arbitrary number of resources and arbitrary dependency graphs. It preserves immutability (Item 17), so multiple clients can share dependent objects (assuming the clients desire the same underlying resources). Dependency injection is equally applicable to constructors, static factories (Item 1), and builders (Item 2).</p></blockquote><p>依赖注入模式非常的简单，许多程序员用了很多年，不过却不知道它有一个名字。虽然我们的拼写检查器例子只有一个资源（字典），依赖注入可用于任意数量的资源和任意数量的依赖图。它能够保证不变性（条款17），所以多个客户端可以共享依赖对象（假设客户端需要同样的底层资源）。依赖注入适用于构造方法、静态工厂（条款1）和构建器（条款2）。</p><blockquote><p>A useful variant of the pattern is to pass a resource factory to the constructor. A factory is an object that can be called repeatedly to create instances of a type. Such factories embody the Factory Method pattern [Gamma95]. The Supplier<t> interface, introduced in Java 8, is perfect for representing factories. Methods that take a Supplier<t> on input should typically constrain the factory’s type parameter using a bounded wildcard type (Item 31) to allow the client to pass in a factory that creates any subtype of a specified type. For example, here is a method that makes a mosaic using a client-provided factory to produce each tile:</t></t></p></blockquote><p>这种模式的一个很有用的变种是将资源工厂传递给构造方法。工厂是个可以被重复调用来创建同一个类的实例的对象。这种工厂是工厂方法模式的一种具化形式[Gama95]。Java 8 引入的Supplier<t>接口，就非常适用于表示工厂。将Supplier<t>作为输入的方法会通过绑定的通配符类型（条款31）来限制工厂的类型参数，从而可以让客户端传递的工厂能够创建指定类型的任意子类型。比如，有一个方法用客户端提供的用于生产每个瓷砖的工厂做一个马赛克：</t></t></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Mosaic <span class="title">create</span><span class="params">(Supplier&lt;? extends Tile&gt; tileFactory)</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><blockquote><p>Although dependency injection greatly improves flexibility and testability, it can clutter up large projects, which typically contain thousands of dependencies. This clutter can be all but eliminated by using a dependency injection framework, such as Dagger [Dagger], Guice [Guice], or Spring [Spring]. The use of these frameworks is beyond the scope of this book, but note that APIs designed for manual dependency injection are trivially adapted for use by these frameworks.</p></blockquote><p>虽然依赖注入极大的提供了灵活性和可测试性，但是它可能让包含成千上万依赖的大型项目变得混乱。这种混乱可以通过依赖注入框架消除，比如Dagger [Dagger]、Guice<br>[Guice]或是Spring [Spring]。这些框架的使用介绍超过了本书的范围，不过请注意，针对⼿⼯进⾏依赖管理所设计的APIs也是适合于这些框架的。</p><blockquote><p>In summary, do not use a singleton or static utility class to implement a class that depends on one or more underlying resources whose behavior affects that of the class, and do not have the class create these resources directly. Instead, pass the resources, or factories to create them, into the constructor (or static factory or builder). This practice, known as dependency injection, will greatly enhance the flexibility, reusability, and testability of a class.</p></blockquote><p>总结一下，如果一个类依赖一个或多个底层资源，而这些资源的行为会影响到类的行为，那么请不要用单例或者静态辅助类来实现，也不要让类直接创建这些资源。相反，将资源或工厂传递给构造方法（或者静态工厂，或者构建器）来创建它们。这种实践叫做依赖注入，会极大提高类的灵活性，可重用性，和测试性。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;条款5-优先选择依赖注入而非硬编码资源的关联关系&quot;&gt;&lt;a href=&quot;#条款5-优先选择依赖注入而非硬编码资源的关联关系&quot; class=&quot;headerlink&quot; title=&quot;条款5_优先选择依赖注入而非硬编码资源的关联关系&quot;&gt;&lt;/a&gt;条款5_优先选择依赖注入而非硬编码资源的关联关系&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Many classes depend on one or more underlying resources. For example, a spellchecker depends on a dictionary. It is not uncommon to see such classes implemented as static utility classes (Item 4):&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很多类会依赖一个或多个潜在的资源。比如拼写检查器会依赖字典。我们常常会看&lt;br&gt;到这种类被实现为了静态辅助类（条款4）&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Inappropriate use of static utility - inflexible &amp;amp; untestable!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SpellChecker&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Lexicon dictionary = ...;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SpellChecker&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125; &lt;span class=&quot;comment&quot;&gt;// Noninstantiable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isValid&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String word)&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; List&amp;lt;String&amp;gt; &lt;span class=&quot;title&quot;&gt;suggestions&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String typo)&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Effective Java" scheme="http://www.saily.top/categories/Effective-Java/"/>
    
    
      <category term="java" scheme="http://www.saily.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud微服务-2-SpringBoot起步</title>
    <link href="http://www.saily.top/2019/04/12/microservices-2/"/>
    <id>http://www.saily.top/2019/04/12/microservices-2/</id>
    <published>2019-04-12T06:16:21.000Z</published>
    <updated>2019-05-23T15:41:13.097Z</updated>
    
    <content type="html"><![CDATA[<p>微服务学习笔记</p><h1 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h1><p><a href="https://spring.io/projects/spring-boot#learn" target="_blank" rel="noopener">https://spring.io/projects/spring-boot#learn</a></p><p>要创建一个Spring Boot项目，可以去<a href="https://start.spring.io/，一键创建。" target="_blank" rel="noopener">https://start.spring.io/，一键创建。</a></p><p><img src="/img/spring-cloud/sc02-1.png" alt></p><p>依赖中加入Web，然后点击<code>Generate Project</code>，就会下载一个压缩包。<br><a id="more"></a><br>解压后看看目录结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">spring-lecture tree</span><br><span class="line">.</span><br><span class="line">├── HELP.md</span><br><span class="line">├── build.gradle</span><br><span class="line">├── gradle</span><br><span class="line">│   └── wrapper</span><br><span class="line">│       ├── gradle-wrapper.jar</span><br><span class="line">│       └── gradle-wrapper.properties</span><br><span class="line">├── gradlew</span><br><span class="line">├── gradlew.bat</span><br><span class="line">├── settings.gradle</span><br><span class="line">└── src</span><br><span class="line">    ├── main</span><br><span class="line">    │   ├── java</span><br><span class="line">    │   │   └── com</span><br><span class="line">    │   │       └── test</span><br><span class="line">    │   │           └── springlecture</span><br><span class="line">    │   │               └── SpringLectureApplication.java</span><br><span class="line">    │   └── resources</span><br><span class="line">    │       ├── application.properties</span><br><span class="line">    │       ├── static</span><br><span class="line">    │       └── templates</span><br><span class="line">    └── test</span><br><span class="line">        └── java</span><br><span class="line">            └── com</span><br><span class="line">                └── test</span><br><span class="line">                    └── springlecture</span><br><span class="line">                        └── SpringLectureApplicationTests.java</span><br><span class="line"></span><br><span class="line">16 directories, 10 files</span><br></pre></td></tr></table></figure><p>在build.gradle中包含了依赖的配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">id <span class="string">'org.springframework.boot'</span> version <span class="string">'2.1.4.RELEASE'</span></span><br><span class="line">id <span class="string">'java'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply plugin: <span class="string">'io.spring.dependency-management'</span></span><br><span class="line"></span><br><span class="line">group = <span class="string">'com.test'</span></span><br><span class="line">version = <span class="string">'0.0.1-SNAPSHOT'</span></span><br><span class="line">sourceCompatibility = <span class="string">'1.8'</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">implementation <span class="string">'org.springframework.boot:spring-boot-starter-web'</span></span><br><span class="line">testImplementation <span class="string">'org.springframework.boot:spring-boot-starter-test'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到引入了spring-boot-starter-web的依赖，因为<code>io.spring.dependency-management</code>插件的关系，所以在配置文件里不需要写版本号，就像maven里的dependencyManagement一样。</p><p>源码地址：</p><p><a href="https://github.com/sail-y/spring-cloud-lecture" target="_blank" rel="noopener">https://github.com/sail-y/spring-cloud-lecture</a></p><p>执行命令<code>gradle bootRun</code>，就能启动，访问 <a href="http://127.0.0.1:9090/api/test" target="_blank" rel="noopener">http://127.0.0.1:9090/api/test</a></p><p>返回</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  id: 18,</span><br><span class="line">  name: "zhangsan",</span><br><span class="line">  birthday: "2019-04-10T12:15:53.666+0000"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>几乎所有的配置都可以在<code>application.properties</code>文件里完成，这里用<code>server.port</code>配置了一个端口号，Spring Boot也支持yml格式的配置文件。这也是我自己在项目中一直使用的格式。</p><h2 id="bootJar"><a href="#bootJar" class="headerlink" title="bootJar"></a>bootJar</h2><p>执行<code>gradle task</code>，可以看到Spring Boot插件为我们提供了几个任务，其中一个是bootRun，可以直接启动应用。bootJar，可以把应用打包成一个<strong>fat jar</strong>。用<code>java -jar spring-lecture-0.0.1-SNAPSHOT.jar</code>就可以启动应用，这跟普通的jar包不一样。</p><p>现在解压这个jar包来看看里面的内容，跟传统的jar或者war包不一样，解压后并没有看到我们自己的代码编译后的文件在哪里，在根目录下的org里的class文件却并不是我们自己写的，下面分析一下解压后的目录结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar -xvf spring-lecture-<span class="number">0.0</span>.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> libs (master✔)ls</span><br><span class="line">BOOT-INF  META-INF  org </span><br><span class="line">➜  libs (master✔)tree BOOT-INF -d</span><br><span class="line">BOOT-INF</span><br><span class="line">├── classes</span><br><span class="line">│   ├── com</span><br><span class="line">│   │   └── <span class="built_in">test</span></span><br><span class="line">│   │       └── springlecture</span><br><span class="line">│   │           ├── controller</span><br><span class="line">│   │           └── domain</span><br><span class="line">│   ├── static</span><br><span class="line">│   └── templates</span><br><span class="line">└── lib</span><br><span class="line"></span><br><span class="line">9 directories</span><br></pre></td></tr></table></figure><p><code>BOOT-INF</code>里包含了我们自己项目里编译后的配置文件和class文件，以及<code>lib</code>里包含的项目依赖的三方jar。</p><p>接下来看META-INF</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  libs (master✔)cat META-INF/MANIFEST.MF </span><br><span class="line">Manifest-Version: <span class="number">1.0</span></span><br><span class="line">Start-Class: com.test.springlecture.SpringLectureApplication</span><br><span class="line">Spring-Boot-Classes: BOOT-INF/classes/</span><br><span class="line">Spring-Boot-Lib: BOOT-INF/lib/</span><br><span class="line">Spring-Boot-Version: <span class="number">2.1</span>.4.RELEASE</span><br><span class="line">Main-Class: org.springframework.boot.loader.JarLauncher</span><br></pre></td></tr></table></figure><p>Main-Class是打包的jar包含main方法的启动类，Start-Class是Spring Boot自定义的属性。</p><p><strong>注意Main-Class最后有一个回车换行，这个是必须的，不然无法使用。</strong></p><p>接下来看另外一个文件夹<code>org</code>，这里面的类是Spring Boot打包插件在打jar包的时候自动放进去的，Spring Boot这些类功能很巧妙的解决了fat jar是如何打包出来的，以及BOOT-INF下面的类和jar包是如何被加载的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">org</span><br><span class="line">└── springframework</span><br><span class="line">    └── boot</span><br><span class="line">        └── loader</span><br><span class="line">            ├── ExecutableArchiveLauncher.class</span><br><span class="line">            ├── JarLauncher.class</span><br><span class="line">            ├── LaunchedURLClassLoader$UseFastConnectionExceptionsEnumeration.class</span><br><span class="line">            ├── LaunchedURLClassLoader.class</span><br><span class="line">            ├── Launcher.class</span><br><span class="line">            ├── MainMethodRunner.class</span><br><span class="line">            ├── PropertiesLauncher$<span class="number">1</span>.class</span><br><span class="line">            ├── PropertiesLauncher$ArchiveEntryFilter.class</span><br><span class="line">            ├── PropertiesLauncher$PrefixMatchingArchiveFilter.class</span><br><span class="line">            ├── PropertiesLauncher.class</span><br><span class="line">            ├── WarLauncher.class</span><br><span class="line">            ├── archive</span><br><span class="line">            ├── data</span><br><span class="line">            ├── jar</span><br><span class="line">            └── util</span><br><span class="line"></span><br><span class="line"><span class="number">7</span> directories, <span class="number">50</span> files</span><br></pre></td></tr></table></figure><p>这都是SpringBoot提供的类，发现没有？org.springframework.boot.loader.JarLauncher就在这里。这样的文件结构，和这些类都是什么意思呢？</p><p>如果我们要查看org.springframework.boot.loader.JarLauncher的源码，需要引入以下依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation &apos;org.springframework.boot:spring-boot-loader&apos;</span><br></pre></td></tr></table></figure><p>这是插件的一个依赖，在实际开发中，我们并不需要引入这个依赖，现在我们可以查看这个类的源码。</p><p><img src="/img/spring-cloud/sc02-2.png" alt></p><p>javadoc解释了，Launcher假设依赖包在/BOOT-INF/lib文件夹中，应用的class文件在/BOOT-INF/classes中。</p><p><code>ExecutableArchiveLauncher</code>的子类除了<code>JarLauncher</code>，还有一个<code>WarLauncher</code>。从名字就能看出来，是分别用于启动Jar包和War包的启动类。</p><p>main方法：</p><p><code>new JarLauncher().launch(args);</code></p><p>launch方法doc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Launch the application. This method is the initial entry point that should be</span></span><br><span class="line"><span class="comment"> * called by a subclass &#123;<span class="doctag">@code</span> public static void main(String[] args)&#125; method.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args the incoming arguments</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception if the application fails to launch</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">launch</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">JarFile.registerUrlProtocolHandler();</span><br><span class="line">ClassLoader classLoader = createClassLoader(getClassPathArchives());</span><br><span class="line">launch(args, getMainClass(), classLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里构建了一个类加载器。</p><blockquote><p>它会找到类当前路径所在的jar包，得到一个archive对象。因为jar包的标准是只能加载根目录下的class文件，无法加载jar包里面的jar包，所以spring boot自己实现了类加载器来加载我们应用的第三方依赖和classes文件。</p></blockquote><blockquote><p><code>JarLauncher.isNestedArchive</code>就包含了这部分的判断逻辑。处理了BOOT-INF/classes/的目录和以BOOT-INF/lib/开头的文件，此方法在getClassPathArchives内部被调用。</p></blockquote><p><code>ClassLoader classLoader = createClassLoader(getClassPathArchives());</code>则是为了加载这2个目录下的class和jar包，最后代码跟踪到<code>new LaunchedURLClassLoader(urls, getClass().getClassLoader());</code>。LaunchedURLClassLoader就是Spring Boot提供的全新的类加载器了。</p><blockquote><p>URLClassLoader是ClassLoader的子类，它用于从指向 JAR 文件和目录的 URL 的搜索路径加载类和资源。也就是说，通过URLClassLoader就可以加载指定jar中的class到内存中。</p></blockquote><p>再来关注<code>launch(args, getMainClass(), classLoader);</code>这行代码，getMainClass()从Manifest文件里读取了<code>Start-Class</code>，也就是我们自己的应用的启动类。</p><p>然后是<code>launch</code>方法的调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Thread.currentThread().setContextClassLoader(classLoader);</span><br><span class="line">createMainMethodRunner(mainClass, args, classLoader).run();</span><br></pre></td></tr></table></figure><p>把SpringBoot提供的类加载器，设置成线程上下文类加载器。</p><p>createMainMethodRunner创建main方法的执行器。这里有关键代码，我们的启动类是如何被加载和启动的。</p><p>MainMethodRunner.run</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Class&lt;?&gt; mainClass = Thread.currentThread().getContextClassLoader()</span><br><span class="line">.loadClass(<span class="keyword">this</span>.mainClassName);</span><br><span class="line">Method mainMethod = mainClass.getDeclaredMethod(<span class="string">"main"</span>, String[].class);</span><br><span class="line">mainMethod.invoke(<span class="keyword">null</span>, <span class="keyword">new</span> Object[] &#123; <span class="keyword">this</span>.args &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获得之前设置的类加载器，进行类加载，然后用反射的方式调用main方法。</p><p><code>mainMethod.invoke(null, new Object[] { this.args });</code>这行代码反射，前面是null，是因为main方法是静态的，所以不需要传对象进去。</p><p>以上就解释了jar包里的文件夹结构，以及加载启动类的流程。</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>增加一行代码打印SpringLectureApplication这个类的类加载器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringLectureApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(SpringLectureApplication.class.getClassLoader());</span><br><span class="line">SpringApplication.run(SpringLectureApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>试想一下，用java -jar启动，和在IDE里右键启动，打印出来的内容会是一样的吗？</p><p>右键启动输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sun.misc.Launcher$AppClassLoader@58644d46</span><br></pre></td></tr></table></figure><p>jar包启动输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.loader.LaunchedURLClassLoader@17a7cec2</span><br></pre></td></tr></table></figure><h2 id="JDWP远程调试"><a href="#JDWP远程调试" class="headerlink" title="JDWP远程调试"></a>JDWP远程调试</h2><p>Java Debug Wire Protocol，Java调试协议</p><p>我们可以用远程的方式去调试一个正在运行的应用，比如打断点什么的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ java -agentlib:jdwp=<span class="built_in">help</span></span><br><span class="line">               Java Debugger JDWP Agent Library</span><br><span class="line">               --------------------------------</span><br><span class="line"></span><br><span class="line">  (see http://java.sun.com/products/jpda <span class="keyword">for</span> more information)</span><br><span class="line"></span><br><span class="line">jdwp usage: java -agentlib:jdwp=[<span class="built_in">help</span>]|[&lt;option&gt;=&lt;value&gt;, ...]</span><br><span class="line">Option Name and Value            Description                       Default</span><br><span class="line">---------------------            -----------                       -------</span><br><span class="line"><span class="built_in">suspend</span>=y|n                      <span class="built_in">wait</span> on startup?                  y</span><br><span class="line">transport=&lt;name&gt;                 transport spec                    none</span><br><span class="line">address=&lt;listen/attach address&gt;  transport spec                    <span class="string">""</span></span><br><span class="line">server=y|n                       listen <span class="keyword">for</span> debugger?              n</span><br><span class="line">launch=&lt;<span class="built_in">command</span> line&gt;            run debugger on event             none</span><br><span class="line">onthrow=&lt;exception name&gt;         debug on throw                    none</span><br><span class="line">onuncaught=y|n                   debug on any uncaught?            n</span><br><span class="line">timeout=&lt;timeout value&gt;          <span class="keyword">for</span> listen/attach <span class="keyword">in</span> milliseconds n</span><br><span class="line">mutf8=y|n                        output modified utf-8             n</span><br><span class="line">quiet=y|n                        control over terminal messages    n</span><br><span class="line"></span><br><span class="line">Obsolete Options</span><br><span class="line">----------------</span><br><span class="line">strict=y|n</span><br><span class="line">stdalloc=y|n</span><br><span class="line"></span><br><span class="line">Examples</span><br><span class="line">--------</span><br><span class="line">  - Using sockets connect to a debugger at a specific address:</span><br><span class="line">    java -agentlib:jdwp=transport=dt_socket,address=localhost:8000 ...</span><br><span class="line">  - Using sockets listen <span class="keyword">for</span> a debugger to attach:</span><br><span class="line">    java -agentlib:jdwp=transport=dt_socket,server=y,<span class="built_in">suspend</span>=y ...</span><br><span class="line"></span><br><span class="line">Notes</span><br><span class="line">-----</span><br><span class="line">  - A timeout value of 0 (the default) is no timeout.</span><br><span class="line"></span><br><span class="line">Warnings</span><br><span class="line">--------</span><br><span class="line">  - The older -Xrunjdwp interface can still be used, but will be removed <span class="keyword">in</span></span><br><span class="line">    a future release, <span class="keyword">for</span> example:</span><br><span class="line">        java -Xdebug -Xrunjdwp:[<span class="built_in">help</span>]|[&lt;option&gt;=&lt;value&gt;, ...]</span><br></pre></td></tr></table></figure><p>有一些参数，示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  spring-lecture (master) ✗)java -agentlib:jdwp=transport=dt_socket,server=y,<span class="built_in">suspend</span>=y,address=5050 -jar build/libs/spring-lectListening <span class="keyword">for</span> transport dt_socket at address: 5050</span><br></pre></td></tr></table></figure><p>调试器的服务端已经启动，等待调试器连接，现在我们去用idea的调试器去调试。</p><p>选择Remote类型，选择Attach to remote JVM，设置端口为5050，可以看到idea自动为我们生产了参数：<code>-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5050</code>。</p><p><img src="/img/spring-cloud/sc02-3.png" alt></p><p>这样的话，点击debug按钮，IDEA就能走到我们断点的地方。</p><p>这样就可以在启动的时候用debug的方式去跟踪SpringBoot启动的流程。</p><p>通过这个图就可以看到，这里是archives对象里包含的就是应用里依赖的所有第三方jar包。</p><p><img src="/img/spring-cloud/sc02-4.png" alt></p><p>在获取到jar的url以后，会创建一个LaunchedURLClassLoader，用于加载这些jar包，同时这里也指定了父加载器。</p><p><img src="/img/spring-cloud/sc02-5.png" alt><br><img src="/img/spring-cloud/sc02-6.png" alt></p><p>继续往下走，就能验证上一节说的读取Start-Class具体的类名。</p><p><img src="/img/spring-cloud/sc02-7.png" alt></p><p>在设置上下文类加载器之前，它的值是AppClassLoader</p><p><img src="/img/spring-cloud/sc02-8.png" alt></p><p>再往下，就是根据找到的MainClass创建一个MainMethodRunner，通过之前设置的线程上下文类加载获取之前设置的类加载器，来加载MainClass，然后用反射的方式执行。</p><p><img src="/img/spring-cloud/sc02-9.png" alt></p><h2 id="SpringBotApplication"><a href="#SpringBotApplication" class="headerlink" title="@SpringBotApplication"></a>@SpringBotApplication</h2><p>接下来回到源代码上，SpringLectureApplication上面的@SpringBootApplication，标识了一个SpringBoot应用，他会自动扫描这个类，以及这个类以下的子包。</p><p>如果不加这个注解，会怎么样？试试看，会得到一个错误missing ServletWebServerFactory bean，没有这个注解，SpringBoot是无法启动的，除了SpringBootApplication注解，各种注解在SpringBoot项目中扮演着很重要的角色。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.ApplicationContextException: Unable to start web server; nested exception is org.springframework.context.ApplicationContextException: Unable to start ServletWebServerApplicationContext due to missing ServletWebServerFactory bean.</span><br></pre></td></tr></table></figure><p>现在是SpringApplication的静态方法启动的应用，实际上我们可以手动一步一步的启动。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(SpringLectureApplication.class.getClassLoader());</span><br><span class="line"><span class="comment">//SpringApplication.run(SpringLectureApplication.class, args);</span></span><br><span class="line"></span><br><span class="line">SpringApplication springApplication = <span class="keyword">new</span> SpringApplication(SpringLectureApplication.class);</span><br><span class="line">springApplication.setBannerMode(Banner.Mode.OFF);</span><br><span class="line">springApplication.run(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实对于使用者来讲，SpringBoot和传统的Spring MVC应用差别并不是很大，都是通过注解的方式来写Controller，Controller里面持有service变量，再层层调用。那么SpringBoot的便利之处就在于配置变少了，约定优于配置。</p><p>看一下<code>SpringBootApplication</code>注解的源码，相当于同时声明了3个注解@SpringBootConfiguration，@EnableAutoConfiguration，@ComponentScan。@SpringBootConfiguration里面又包含了@Configuration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123;</span><br><span class="line"><span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class="line"><span class="meta">@Filter</span>(type = FilterType.CUSTOM,</span><br><span class="line">classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br></pre></td></tr></table></figure><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Indicates that a class declares one or more @Bean methods and may be processed by the Spring container to generate bean definitions and service requests for those beans at runtime, for example:</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> MyBean <span class="title">myBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// instantiate, configure and return bean ...</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Via AnnotationConfigApplicationContext</span><br><span class="line"><span class="meta">@Configuration</span> classes are typically bootstrapped using either AnnotationConfigApplicationContext or its web-capable variant, AnnotationConfigWebApplicationContext. A simple example with the former follows:</span><br><span class="line">   AnnotationConfigApplicationContext ctx = <span class="keyword">new</span> AnnotationConfigApplicationContext();</span><br><span class="line">   ctx.register(AppConfig.class);</span><br><span class="line">   ctx.refresh();</span><br><span class="line">   MyBean myBean = ctx.getBean(MyBean.class);</span><br><span class="line">   <span class="comment">// use myBean ...</span></span><br></pre></td></tr></table></figure><p>@Configuration是通过AnnotationConfigApplicationContext或者AnnotationConfigWebApplicationContext启动的，通过AnnotationConfigApplicationContext将AppConfig注册到上下文中，就能从上下文获取MyBean的实例了。</p><p>JDK源码里的文档，详细介绍了@Configuration注解相关的另外内容，其中包括：</p><ul><li>@ComponentScan </li><li>@Autowired Environment env</li><li>@PropertySource</li><li>@Import</li><li>@Profile</li><li>@ImportResource</li><li>@Lazy </li><li>@RunWith</li><li>@ContextConfiguration</li><li>等等</li></ul><h3 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h3><p>Enable auto-configuration of the Spring Application Context, attempting to guess and configure beans that you are likely to need. Auto-configuration classes are usually applied based on your classpath and what beans you have defined</p><p>it will be used when scanning for @Entity classes. It is generally recommended that you place @EnableAutoConfiguration (if you’re not using @SpringBootApplication) in a root package so that all sub-packages and classes can be searched.</p><p>Auto-configuration classes are regular Spring Configuration beans. They are located using the SpringFactoriesLoader mechanism (keyed against this class). Generally auto-configuration beans are @Conditional beans (most often using @ConditionalOnClass and @ConditionalOnMissingBean annotations).</p><p>自动装配，注解扫描当前包及以下的@Configuration类，所以建议放在到根目录下。自动装配的bean通常用@Conditional一类的注解修饰。</p><h3 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h3><p>配置扫描@Configuration组件的目录。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;微服务学习笔记&lt;/p&gt;
&lt;h1 id=&quot;Spring-Boot&quot;&gt;&lt;a href=&quot;#Spring-Boot&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot&quot;&gt;&lt;/a&gt;Spring Boot&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-boot#learn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://spring.io/projects/spring-boot#learn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;要创建一个Spring Boot项目，可以去&lt;a href=&quot;https://start.spring.io/，一键创建。&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://start.spring.io/，一键创建。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/spring-cloud/sc02-1.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;依赖中加入Web，然后点击&lt;code&gt;Generate Project&lt;/code&gt;，就会下载一个压缩包。&lt;br&gt;
    
    </summary>
    
      <category term="微服务" scheme="http://www.saily.top/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="微服务" scheme="http://www.saily.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Spring Cloud" scheme="http://www.saily.top/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud微服务-1-什么是微服务</title>
    <link href="http://www.saily.top/2019/04/10/microservices-1/"/>
    <id>http://www.saily.top/2019/04/10/microservices-1/</id>
    <published>2019-04-10T10:56:58.000Z</published>
    <updated>2019-04-10T11:36:50.111Z</updated>
    
    <content type="html"><![CDATA[<p>微服务学习笔记</p><h1 id="什么是微服务"><a href="#什么是微服务" class="headerlink" title="什么是微服务"></a>什么是微服务</h1><p><a href="https://martinfowler.com/articles/microservices.html" target="_blank" rel="noopener">https://martinfowler.com/articles/microservices.html</a></p><blockquote><p>“Microservices” - yet another new term on the crowded streets of software architecture. Although our natural inclination is to pass such things by with a contemptuous glance, this bit of terminology describes a style of software systems that we are finding more and more appealing. We’ve seen many projects use this style in the last few years, and results so far have been positive, so much so that for many of our colleagues this is becoming the default style for building enterprise applications. Sadly, however, there’s not much information that outlines what the microservice style is and how to do it.</p></blockquote><a id="more"></a><p>单体应用 -&gt; 微服务应用</p><p><a href="https://time.geekbang.org/column/article/13882" target="_blank" rel="noopener">从0开始学微服务-胡忠想</a></p><h2 id="单体架构存在的缺点"><a href="#单体架构存在的缺点" class="headerlink" title="单体架构存在的缺点"></a>单体架构存在的缺点</h2><ul><li>复杂性逐渐变高</li><li>技术债务逐渐上升</li><li>部署速度逐渐变慢</li><li>阻碍技术创新</li><li>无法按需伸缩</li></ul><h2 id="什么是微服务-1"><a href="#什么是微服务-1" class="headerlink" title="什么是微服务"></a>什么是微服务</h2><ul><li>Martin Fowler：简而言之，微服务架构风格这种开发方法，是以开发一组小型服务的方式来开发一个独立的应用系统。<strong>其中每个小型服务都运行在自己的进程中，并经常采用HTTP资源API这样轻量的机制来相互通信。</strong>这些服务围绕这些功能进行构建，并能通过全自动的部署机制来进行独立部署。<strong>这些微服务可以使用不同的语言来编写，并且可以使用不同的数据存储技术。</strong>对这些微服务我们仅做最低限度的集中管理。</li><li>微服务架构是一种架构模式，它提倡将单一应用程序划分成一组小的服务，服务之间相互协调、相互配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务于服务间采用轻量级的通信机制互相沟通（通常是基于HTTP的RESTful API）。每个服务都围绕着具体的业务进行构建，并且能够独立地被部署到生产环境、类生产环境等。另外，应尽量避免统一的、集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具对其进行构建。</li><li>微服务是一种架构风格，一个大型复杂软件应用由一个或多个微服务组成。系统中的各个微服务可被独立部署，各个微服务之间是松耦合的。每个微服务仅关注完成一件任务并很好地完成该任务。在所有情况下，每个任务代表着一个小的业务能力。</li></ul><h2 id="微服务是一种架构风格"><a href="#微服务是一种架构风格" class="headerlink" title="微服务是一种架构风格"></a>微服务是一种架构风格</h2><ul><li>服务组件化（Componentization via Services）</li><li>服务围绕业务（Organized around Business Capabilities）</li><li>产品开发模式（Products not Projects）</li><li>轻量级通信机制（Smart endpoints and dumb pipes）</li><li>去中心化治理（Decentralized Governance）</li><li>去中心化数据设计（Decentralized Data Management）</li><li>故障处理设计（Design for failure）</li><li>演进式设计（Evolutionary Design）</li><li>基础设施自动化（Infrastructure Automation）</li></ul><h2 id="微服务的优点和挑战"><a href="#微服务的优点和挑战" class="headerlink" title="微服务的优点和挑战"></a>微服务的优点和挑战</h2><ul><li>开发简单</li><li>技术栈灵活</li><li>服务独立</li><li>按需扩展</li></ul><hr><ul><li>运维复杂</li><li>数据一致性问题</li><li>集成测试复杂</li><li>重复代码</li><li>监控困难</li></ul><h3 id="微服务具备的特性"><a href="#微服务具备的特性" class="headerlink" title="微服务具备的特性"></a>微服务具备的特性</h3><ul><li>每个微服务可独立运行在自己的进程里</li><li>一系列独立运行的微服务共同构建起了整个系统</li><li>每个服务为独立的业务开发，一个微服务一般完成某个特定的功能，比如：订单管理，用户管理等</li><li>微服务之间通过一些轻量的通信机制进行通信，例如通过REST API或者RPC的方式进行调用</li></ul><h3 id="微服务的优点"><a href="#微服务的优点" class="headerlink" title="微服务的优点"></a>微服务的优点</h3><ul><li>易于开发和维护</li><li>启动较快</li><li>局部修改容易部署</li><li>技术栈不受限</li><li>按需伸缩</li><li>DevOps</li></ul><h3 id="微服务带来的挑战"><a href="#微服务带来的挑战" class="headerlink" title="微服务带来的挑战"></a>微服务带来的挑战</h3><ul><li>运维要求较高</li><li>分布式的复杂性</li><li>接口调整成本高</li><li>重复劳动</li></ul><h3 id="微服务的设计原则"><a href="#微服务的设计原则" class="headerlink" title="微服务的设计原则"></a>微服务的设计原则</h3><ul><li>单一职责原则</li><li>服务自治原则</li><li>轻量级通信原则</li><li>接口明确原则</li></ul><h1 id="SOA"><a href="#SOA" class="headerlink" title="SOA"></a>SOA</h1><p>很多人会把SOA和微服务搞混，甚至理解为同一个东西。实际上SOA已经面世20多年了，和微服务是不一样的，接下来去维基百科看看SOA到底是什么。</p><p><a href="https://en.wikipedia.org/wiki/Service-oriented_architecture" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Service-oriented_architecture</a></p><p>学技术，一定要去阅读原版的英文资料。</p><blockquote><p><strong>Service-oriented architecture (SOA)</strong> is a style of software design where services are provided to the other components by application components, through a communication protocol over a network. The basic principles of service-oriented architecture are independent of vendors, products and technologies.[1] A service is a discrete unit of functionality that can be accessed remotely and acted upon and updated independently, such as retrieving a credit card statement online.</p></blockquote><blockquote><p>A service has four properties according to one of many definitions of SOA:[2]</p></blockquote><blockquote><ol><li>It logically represents a business activity with a specified outcome.        </li><li>It is self-contained.        </li><li>It is a black box for its consumers.</li><li>It may consist of other underlying services.[3]</li></ol><p>Different services can be used in conjunction to provide the functionality of a large software application,[5] a principle SOA shares with modular programming. Service-oriented architecture integrates distributed, separately-maintained and -deployed software components. It is enabled by technologies and standards that facilitate components’ communication and cooperation over a network, especially over an IP network.</p></blockquote><p>SOA是一种软件设计风格，SOA包含了一些服务，服务是通过应用组件的形式，通过网络上的一些通信协议像向其他应用提供服务。不同的服务可以联合起来构成一个大型的应用，SOA遵循模块化编程，它的这种架构集成了分布式的，独自维护的，独自部署的软件组件。也是通过网络来通信的。</p><p>好像看起来SOA的和微服务的概念也没什么太大差别？</p><blockquote><p>In SOA, services use protocols that describe how they pass and parse messages using description metadata. This metadata describes both the functional characteristics of the service and quality-of-service characteristics. Service-oriented architecture aims to allow users to combine large chunks of functionality to form applications which are built purely from existing services and combining them in an ad hoc manner. A service presents a simple interface to the requester that abstracts away the underlying complexity acting as a black box. Further users can also access these independent services without any knowledge of their internal implementation.[6]</p></blockquote><p>在SOA里，服务是用元数据描述的服务的功能特性和质量特性。有没有想起wsdl实现的webservice？</p><p>SOA里有3个角色</p><ul><li>Service provider</li><li>Service broker, service registry or service repository</li><li>Service requester/consumer</li></ul><p>SOA可以借助webservice实现，通过标准的internet协议，通过网络来访问这些功能。比如SOAP，Jini，CORBA，Rest</p><p>有很多技术都可以实现SOA，比如</p><ul><li>Web services based on WSDL and SOAP</li><li>Messaging, e.g., with ActiveMQ, JMS, RabbitMQ</li><li>RESTful HTTP, with Representational state transfer (REST) constituting its own constraints-based architectural style</li><li>OPC-UA</li><li>WCF (Microsoft’s implementation of Web services, forming a part of WCF)</li><li>Apache Thrift</li><li>SORCER</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>SOA已经被Web Service合并了，然而Web Service只是实现SOA的一种方式。在缺乏本地或二进制的数据传递调用的情况下，远程调用和效率都会变慢。XML是比较慢的，JSON相比XML会好一些。</p><p>有状态的服务不利于管理。</p><p>SOA主要的挑战是元数据的管理，服务于服务之间的通信会生成大量的消息。</p><p>难以测试。</p><h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2><p>微服务是现代化的SOA架构，用于构建分布式的软件系统。在微服务架构中的服务都是一些进程，它们之间是通过网络来进行通信去完成一个目标。这些服务使用技术不可知的协议，在服务内部去封装语言和框架。微服务是一种SOA的一种新的实现方式，从2014年开始变得流行起来（在引入DevOps后）。它强调的是持续的部署和其他敏捷的实现。</p><p>微服务没有统一的定义，但是有以下特征和原则</p><ul><li>fine-grained interfaces (to independently deployable services),</li><li>business-driven development (e.g. domain-driven design),</li><li>IDEAL cloud application architectures,</li><li>polyglot programming and persistence,</li><li>lightweight container deployment,</li><li>decentralized continuous delivery, and</li><li>DevOps with holistic service monitoring.</li></ul><h1 id="SOA和微服务的差异性"><a href="#SOA和微服务的差异性" class="headerlink" title="SOA和微服务的差异性"></a>SOA和微服务的差异性</h1><h2 id="文章1"><a href="#文章1" class="headerlink" title="文章1"></a>文章1</h2><p><a href="https://www.ibm.com/blogs/cloud-computing/2018/09/06/soa-versus-microservices/" target="_blank" rel="noopener">https://www.ibm.com/blogs/cloud-computing/2018/09/06/soa-versus-microservices/</a></p><blockquote><p>The main distinction comes down to scope. To put it simply, service-oriented architecture (SOA) has an enterprise scope, while the microservices architecture has an application scope.</p></blockquote><p>SOA着重点在企业范围，微服务着重点在应用范围。</p><p><img src="https://www.ibm.com/blogs/cloud-computing/wp-content/uploads/2018/08/SOA_microservices.png" alt></p><p>从这个图可以看出来，SOA的范围更大，他关注的是应用与应用之间的关系。而微服务是应用内部的关联。</p><h2 id="文章2"><a href="#文章2" class="headerlink" title="文章2"></a>文章2</h2><p><a href="https://dzone.com/articles/microservices-vs-soa-is-there-any-difference-at-al" target="_blank" rel="noopener">https://dzone.com/articles/microservices-vs-soa-is-there-any-difference-at-al</a></p><blockquote><p>Service Oriented Architecture is less about how to modularize an application, and more about how to compose an application by integration of distributed, separately-maintained and deployed software components. It is enabled by technologies and standards that make it easier for components to communicate and cooperate over a network, especially an IP network.</p></blockquote><p><img src="/imgs/spring-cloud/sc01-01.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;微服务学习笔记&lt;/p&gt;
&lt;h1 id=&quot;什么是微服务&quot;&gt;&lt;a href=&quot;#什么是微服务&quot; class=&quot;headerlink&quot; title=&quot;什么是微服务&quot;&gt;&lt;/a&gt;什么是微服务&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://martinfowler.com/articles/microservices.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://martinfowler.com/articles/microservices.html&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Microservices” - yet another new term on the crowded streets of software architecture. Although our natural inclination is to pass such things by with a contemptuous glance, this bit of terminology describes a style of software systems that we are finding more and more appealing. We’ve seen many projects use this style in the last few years, and results so far have been positive, so much so that for many of our colleagues this is becoming the default style for building enterprise applications. Sadly, however, there’s not much information that outlines what the microservice style is and how to do it.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="微服务" scheme="http://www.saily.top/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="微服务" scheme="http://www.saily.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Spring Cloud" scheme="http://www.saily.top/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Effective Java 第三版-3条款3_强制对单例属性使用私有构造方法或是枚举类型</title>
    <link href="http://www.saily.top/2019/03/21/effective-java-3rd-3/"/>
    <id>http://www.saily.top/2019/03/21/effective-java-3rd-3/</id>
    <published>2019-03-21T13:08:04.000Z</published>
    <updated>2019-05-23T14:56:34.705Z</updated>
    
    <content type="html"><![CDATA[<h1 id="条款3：强制对单例属性使用私有构造方法或是枚举类型"><a href="#条款3：强制对单例属性使用私有构造方法或是枚举类型" class="headerlink" title="条款3：强制对单例属性使用私有构造方法或是枚举类型"></a>条款3：强制对单例属性使用私有构造方法或是枚举类型</h1><blockquote><p>A <em>singleton</em> is simply a class that is instantiated exactly once [Gamma95]. Singletons typically represent either a stateless object such as a function (Item 24) or a system component that is intrinsically unique. <strong>Making a class a singleton can make it difficult to test its clients</strong> because it’s impossible to substitute a mock implementation for a singleton unless it implements an interface that serves as its type.<br><a id="more"></a><br>所谓单例，指的是只会实例化⼀次的类[Gamma95]。单例要么表示⼀个⽆状态的对象（⽐<br>如说函数，条款25），要么表示⼀个本质上独⼀⽆⼆的系统组件。将⼀个类设定为单例会使得其客户端难以测试，这是因为我们⽆法为单例替换模拟实现，除⾮它实现了作为其类型的接⼝。</p></blockquote><p>单例是只实例化一次的简单类[Gamma95]。单例通常要么是一个无状态的对象，比如一个<del>功能</del>，要么是系统内固有且唯一的组件。类变成单例后会让他的客户端很难测试，因为无法为单例模拟一个替代的实现，除非这个类实现了一个接口作为它的类型。</p><blockquote><p>There are two common ways to implement singletons. Both are based on keeping the constructor private and exporting a public static member to provide access to the sole instance. In one approach, the member is a final field:</p></blockquote><blockquote><p>有两种常⻅的⽅式来实现单例。他们的做法都是将构造⽅法设为私有，并导出⼀个公有的静态成员来提供对唯⼀实例的访问。在第⼀种⽅式中，成员是个final字段：</p></blockquote><p>有两种常规方式实现单例模式。都是让构造方法保持私有，输出一个公共的静态成员以提供访问唯一的实例。一种实现的方法是成员是一个final的字段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Singleton with public final field</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Elvis</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Elvis INSTANCE = <span class="keyword">new</span> Elvis();</span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="title">Elvis</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">leaveTheBuilding</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>The private constructor is called only once, to initialize the public static final field Elvis.INSTANCE. The lack of a public or protected constructor guarantees a “monoelvistic” universe: exactly one Elvis instance will exist once the Elvis class is initialized—no more, no less. Nothing that a client does can change this, with one caveat: a privileged client can invoke the private constructor reflectively (Item 65) with the aid of the AccessibleObject.setAccessible method. If you need to defend against this attack, modify the constructor to make it throw an exception if it’s asked to create a second instance.</p></blockquote><blockquote><p>私有构造⽅法只会被调⽤⼀次，⽤于初始化public static final字段Elvis.INSTANCE。由于缺乏公有或是受保护的构造⽅法，因此这可以确保⼀种『独占的』世界：当实例化Elvis类时，只有唯⼀⼀个Elvis实例会存在——不多也不少。⽆论客户端怎么做都⽆法改变这⼀点，只不过我还是要警告⼀下：授权的客户端可以通过反射来调⽤私有构造⽅法（条款65），借助于AccessibleObject.setAccessible⽅法即可做到。如果需要防范这种情况，请修改构造⽅法，使得在通过构造⽅法创建第⼆个实例时抛出异常。</p></blockquote><p>私有的构造方法只会被调用一次，用来初始化public static final修饰的字段Elvis.INSTANCE。没有public和protected的构造方法保证了实例的唯一性：不多不少，在Elvis类初始化后只会有一个Elvis的实例存在。客户端做的任何事情都不能改变这一点，但是有一点要注意：有特权的客户端可以在AccessibleObject.setAccessible方法的帮助下，反射（条款65）调用private的构造方法。<del>你需要防御这种攻击</del>，修改构造方法，当它创建第二个的实例的抛出一个异常。</p><blockquote><p>In the second approach to implementing singletons, the public member is a static factory method:</p></blockquote><blockquote><p>在实现单例的第⼆种⽅式中，公有成员是个静态⼯⼚⽅法：</p></blockquote><p>实现单例模式的第二种方法是public成员是一个静态的工厂方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Singleton with static factory</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Elvis</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Elvis INSTANCE = <span class="keyword">new</span> Elvis(); <span class="function"><span class="keyword">private</span> <span class="title">Elvis</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Elvis <span class="title">getInstance</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> INSTANCE; &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">leaveTheBuilding</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>All calls to Elvis.getInstance return the same object reference, and no other Elvis instance will ever be created (with the same caveat mentioned earlier).</p></blockquote><blockquote><p>所有对Elvis.getInstance的调⽤都会返回相同的对象引⽤，不会再创建其他的Elvis实例（请不要忘记上⾯提到的警告）。</p></blockquote><p>所有Elvis.getInstance的调用都会返回相同的对象引用，不会有其他的Elvis实例被创建（除了前面提到过的特殊方式）</p><blockquote><p>The main advantage of the public field approach is that the API makes it clear that the class is a singleton: the public static field is final, so it will always contain the same object reference. The second advantage is that it’s simpler.</p></blockquote><blockquote><p>采⽤公有字段⽅式的主要优点在于，通过API我们就可以很清晰地看到类是个单例：public static字段是final的，这样它就总是包含着同样的对象引⽤。第⼆个优点则是它更加简单。</p></blockquote><p>公共字段这种方法的主要好处是API清楚的表明这个类就是一个单例类：public static修饰的字段是final的，所以它始终都包含同一个对象引用。<del>第二种方法的好处</del>则是它更简单。</p><blockquote><p>One advantage of the static factory approach is that it gives you the flexibility to change your mind about whether the class is a singleton without changing its API. The factory method returns the sole instance, but it could be modified to return, say, a separate instance for each thread that invokes it. A second advantage is that you can write a generic singleton factory if your application requires it (Item 30). A final advantage of using a static factory is that a method reference can be used as a supplier, for example Elvis::instance is a Supplier<elvis>. Unless one of these advantages is relevant, the public field approach is preferable.</elvis></p></blockquote><blockquote><p>静态⼯⼚⽅式的⼀个优点在于，它赋予了你这样⼀种灵活性，即当你想要改变类的单例特性时，你⽆需修改其API。⼯⼚⽅法返回唯⼀的实例，不过你可以修改这个⽅法，使得每个线程调⽤它时都返回⼀个单独的实例。第⼆个优点则是，如果应⽤需要的话，你可以编写⼀个泛型的单例⼯⼚（条款30）。使⽤静态⼯⼚的第三个好处是，⽅法引⽤可以⽤作提供者，⽐如说Elvis::instance就是个Supplier<elvis>。除⾮上述这些好处存在⼀定程度的相关性，否则推荐使⽤公有字段⽅式。</elvis></p></blockquote><p>静态工厂的方式的一个好处是给了你很大的灵活性，你可以不用修改API就能改变一个类是否是单例的。工厂方法返回唯一的实例，但是可以在返回之前修改它，比如说每一个调用它线程都享有单独的实例。第二个好处是如果你的应用有需求的话，你可以写一个泛型的单例工厂（条款30）。最后一个好处是静态工厂可以被当做一个supplier来使用，比如Elvis::instance就是一个Supplier<elvis>。<del>除非这些好处都用不着</del>，公共字段的方式才更可取。</elvis></p><blockquote><p>To make a singleton class that uses either of these approaches serializable (Chapter 12), it is not sufficient merely to add implements Serializable to its declaration. To maintain the singleton guarantee, declare all instance fields transient and provide a readResolve method (Item 89). Otherwise, each time a serialized instance is deserialized, a new instance will be created, leading, in the case of our example, to spurious Elvis sightings. To prevent this from happening, add this readResolve method to the Elvis class:</p></blockquote><blockquote><p>要想让上述两种⽅式实现的单例类能够序列化（第12章），仅仅在类的声明中添加<br>implements Serializable是不够的。为了确保单例，请将所有实例字段声明为transient，并提供⼀个readResolve⽅法（条款89）。否则，每次当序列化的实例在反序列化时，⼀个新的实例就会被创建出来，对于我们这个示例来说，就会出现另⼀个Elvis。为了防⽌这种情况发⽣，请将如下的readResolve⽅法添加到Elvis类中:</p></blockquote><p>要让使用这<del>两种方法之一</del>的单例类可序列化（第十二章），仅仅在声明的时候实现Serializable是不足够的。为了<del>维持保证</del>单例性，把所有instance的字段都用transient修饰，并且提供一个readResolve方法（条款89）。否则，序列化后的实例每次反序列化的时候都会生成一个新的实例，正如例子里的一样，<del>这会导致虚假的Elvis单例</del>。要避免这种情况，在Elvis类中添加readResolve方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// readResolve method to preserve singleton property</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Return the one true Elvis and let the garbage collector</span></span><br><span class="line">    <span class="comment">// take care of the Elvis impersonator.</span></span><br><span class="line">   <span class="keyword">return</span> INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>A third way to implement a singleton is to declare a single-element enum:</p></blockquote><blockquote><p>实现单例的第三种⽅式是声明⼀个单元素的枚举：</p></blockquote><p>第三种实现单例的方式是声明一个只有一个元素的枚举：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Enum singleton - the preferred approach</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Elvis &#123;</span><br><span class="line">   INSTANCE;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">leaveTheBuilding</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>This approach is similar to the public field approach, but it is more concise, provides the serialization machinery for free, and provides an ironclad guarantee against multiple instantiation, even in the face of sophisticated serialization or reflection attacks. This approach may feel a bit unnatural, but a single-element enum type is often the best way to implement a singleton. Note that you can’t use this approach if your singleton must extend a superclass other than Enum (though you can declare an enum to implement interfaces).</p></blockquote><blockquote><p>该⽅式类似于公有字段⽅式，不过更加简洁，⽽且天然提供了序列化机制，能够强有⼒地保证不会出现多次实例化的情况，即便在复杂的序列化与反射场景下亦如此。该⽅式看起来有些不那么⾃然，不过单元素枚举类型通常是实现单例的最佳⽅式。注意，如果单例必须要继承⼀个⽗类⽽⾮枚举的情况下是⽆法使⽤该⽅式的（不过可以声明⼀个实现了接⼝的枚举）。</p></blockquote><p>这种方式跟公开字段的方式是相似的，但是更简洁，天生自带序列化功能，为防止多次实例化提供了坚固的保证，甚至处理复杂的序列化或者反射调用时候也没有问题。这种方式可能感觉不太自然，但通常只有一个元素的枚举类是实现单例模式的最好的一种方式。注意这种方式你只能继承一个枚举类型以外的类（<del>尽管</del>你可以声明一个枚举去实现接口）。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;条款3：强制对单例属性使用私有构造方法或是枚举类型&quot;&gt;&lt;a href=&quot;#条款3：强制对单例属性使用私有构造方法或是枚举类型&quot; class=&quot;headerlink&quot; title=&quot;条款3：强制对单例属性使用私有构造方法或是枚举类型&quot;&gt;&lt;/a&gt;条款3：强制对单例属性使用私有构造方法或是枚举类型&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;A &lt;em&gt;singleton&lt;/em&gt; is simply a class that is instantiated exactly once [Gamma95]. Singletons typically represent either a stateless object such as a function (Item 24) or a system component that is intrinsically unique. &lt;strong&gt;Making a class a singleton can make it difficult to test its clients&lt;/strong&gt; because it’s impossible to substitute a mock implementation for a singleton unless it implements an interface that serves as its type.&lt;br&gt;
    
    </summary>
    
      <category term="Effective Java" scheme="http://www.saily.top/categories/Effective-Java/"/>
    
    
      <category term="java" scheme="http://www.saily.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Effective Java 第三版-条款2_当面对很多构造方法参数时，请考虑使用构建器</title>
    <link href="http://www.saily.top/2019/03/20/effective-java-3rd-2/"/>
    <id>http://www.saily.top/2019/03/20/effective-java-3rd-2/</id>
    <published>2019-03-20T12:24:33.000Z</published>
    <updated>2019-05-23T14:56:41.839Z</updated>
    
    <content type="html"><![CDATA[<p>原文-&gt;翻译-&gt;对比</p><blockquote><p>Static factories and constructors share a limitation: they do not scale well to large numbers of optional parameters. Consider the case of a class representing the Nutrition Facts label that appears on packaged foods. These labels have a few required fields—serving size, servings per container, and calories per serving— and more than twenty optional fields—total fat, saturated fat, trans fat, cholesterol, sodium, and so on. Most products have nonzero values for only a few of these optional fields.</p></blockquote><a id="more"></a><p>静态工厂和构造方法都有一个限制：他们的伸缩性很差当有太多可选参数的情况。考虑有这样一个类，Nutrition Facts–食物的营养成分表。这些标签有一些必要的字段，比如每份的分量，每份的容量，每份的卡路里以及超过20个可选的字段，例如脂肪，饱和脂肪，反式脂肪，胆固醇，钠等等。大多数产品只有其中少量字段是非0的。</p><blockquote><p>静态⼯⼚与构造⽅法有⼀个共通的限制：当存在⼤量的可选参数时，他们的可伸缩性很差。考虑这样⼀个类，它表示贴在包装好的⻝品上的营养表标签。这些标签有⼀些必要的字段，如分量⼤⼩、每瓶容量以及每份的卡路⾥数，还有20多个可选字段，如总脂肪量、饱和脂肪酸、反式脂肪酸、胆固醇及钠元素等等。对于⼤多数产品来说，只有少量的这些可选字段有⾮零值。</p></blockquote><blockquote><p>What sort of constructors or static factories should you write for such a class? Traditionally, programmers have used the telescoping constructor pattern, in which you provide a constructor with only the required parameters, another with a single optional parameter, a third with two optional parameters, and so on, culminating in a constructor with all the optional parameters. Here’s how it looks in practice. For brevity’s sake, only four optional fields are shown:</p></blockquote><p>对于这样一个类你应该写什么样的构造方法或者静态工厂呢？通常程序员会用重叠的构造方法模式，就是提供一个有必要参数的构造方法，第二个构造方法多一个可选参数，第三个构造多两个可选参数…这样一直叠下去。最后一个构造方法拥有所有的可选参数。为简洁起见只写4个可选参数：</p><blockquote><p>对于这样⼀个类来说，你应该编写哪种构造⽅法或是静态⼯⼚呢？传统上，程序员们会使⽤重叠构造⽅法模式，在这种模式中，你会提供⼀个只接收必要参数的构造⽅法，然后编写⼀个接收单个可选参数的构造⽅法，再编写⼀个接收两个可选参数的构造⽅法，以此类推，最后提供⼀个接收所有可选参数的构造⽅法。如下代码示例就说明了这⼀点。出于简洁的⽬的，这⾥只给出了4个可选字段：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Telescoping constructor pattern - does not scale well!</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NutritionFacts</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize; <span class="comment">// (mL) required</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servings;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> calories;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> fat;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> sodium;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> carbohydrate; <span class="comment">// (g/serving)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NutritionFacts</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(servingSize, servings, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NutritionFacts</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings, <span class="keyword">int</span> calories)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(servingSize, servings, calories, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NutritionFacts</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> calories, <span class="keyword">int</span> fat)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(servingSize, servings, calories, fat, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NutritionFacts</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings, <span class="keyword">int</span> calories, <span class="keyword">int</span> fat, <span class="keyword">int</span> sodium)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(servingSize, servings, calories, fat, sodium, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NutritionFacts</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings, <span class="keyword">int</span> calories, <span class="keyword">int</span> fat, <span class="keyword">int</span> sodium, <span class="keyword">int</span> carbohydrate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.servingSize = servingSize;</span><br><span class="line">        <span class="keyword">this</span>.servings = servings;</span><br><span class="line">        <span class="keyword">this</span>.calories = calories;</span><br><span class="line">        <span class="keyword">this</span>.fat = fat;</span><br><span class="line">        <span class="keyword">this</span>.sodium = sodium;</span><br><span class="line">        <span class="keyword">this</span>.carbohydrate = carbohydrate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>When you want to create an instance, you use the constructor with the shortest parameter list containing all the parameters you want to set:</p></blockquote><p>当你想创建一个实例，你用参数列表最少的一个构造方法来包含所有你想设置的参数：</p><blockquote><p>在创建实例时，你可以使⽤包含了所要设置的所有参数的最短参数列表构造⽅法：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NutritionFacts cocaCola =</span><br><span class="line"><span class="keyword">new</span> NutritionFacts(<span class="number">240</span>, <span class="number">8</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="number">35</span>, <span class="number">27</span>);</span><br></pre></td></tr></table></figure><blockquote><p>Typically this constructor invocation will require many parameters that you don’t<br>want to set, but you’re forced to pass a value for them anyway. In this case, we passed a value of 0 for fat. With “only” six parameters this may not seem so bad,<br>but it quickly gets out of hand as the number of parameters increases. </p></blockquote><p>显然这个构造方法的调用会要求一些你并不想设置的参数，但是你必须传一个值给它。在这个例子中，我们传了一个0给fat。“只有”6个参数看起来也许还不太糟，但是随着参数的数量增加它很快就失控了。</p><blockquote><p>⼀般来说，这个构造⽅法调⽤需要很多你并不想设置的参数，但却不得不为其传值。在这种情况下，我们为fat传递了0值。上述代码『只有』6个参数，看起来还不算太糟糕，不过随着参数数量的增加，很快你就数不过来了。</p></blockquote><blockquote><p>In short, the telescoping constructor pattern works, but it is hard to write client code when there are many parameters, and harder still to read it. The reader is left wondering what all those values mean and must carefully count parameters to find out. Long sequences of identically typed parameters can cause subtle bugs. If the client accidentally reverses two such parameters, the compiler won’t complain, but the program will misbehave at runtime (Item 51).</p></blockquote><p>简而言之，重叠的构造方法模式可以用，但是当参数太多的时候，不便于写客户端代码，代码可读性也不好。读者会很疑惑这些值代表什么意思，必须小心的看这些参数。长长的相同类型的参数会导致一些隐藏的bug。如果客户端不小心写反了2个参数，编译器不会报错，但是程序会在运行时出现错误的行为(条款51)。</p><blockquote><p>⼀⾔以蔽之，重叠构造⽅法模式可以⽤，但当参数数量过多时，客户端代码的编写就变得愈发困难，阅读起来也更费劲。阅读者会想，所有这些值是什么意思，并且要⼩⼼地检查参数才能知道结果。⻓⻓的同类型参数序列会导致⾮常隐秘的Bug。如果客户端不⼩⼼改变了这样两个参数的顺序，那么编译器是不知情的，不过程序在运⾏期则会表现出错误的⾏为（条款51）。</p></blockquote><blockquote><p>A second alternative when you’re faced with many optional parameters in a constructor is the JavaBeans pattern, in which you call a parameterless constructor to create the object and then call setter methods to set each required parameter and each optional parameter of interest:</p></blockquote><p>当你处理太多可选参数的时候，第二个选择是用JavaBeans模式，先用无参构造方法创建一个对象，然后再调用setter方法来设置所有必须的参数和可选参数：</p><blockquote><p>当构造⽅法中存在⼤量可选参数时，另⼀种解决⽅案是JavaBeans模式。在这种模式下，你会通过⼀个⽆参构造⽅法来创建对象，接下来调⽤setter⽅法设置每个必填参数与所需要的每个可选参数：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JavaBeans Pattern - allows inconsistency, mandates mutability</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NutritionFacts</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Parameters initialized to default values (if any)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> servingSize = -<span class="number">1</span>; <span class="comment">// Required; no default value</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> servings = -<span class="number">1</span>; <span class="comment">// Required; no default value</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> calories = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> fat = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sodium = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> carbohydrate = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NutritionFacts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Setters</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServingSize</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        servingSize = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServings</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        servings = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCalories</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        calories = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFat</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        fat = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSodium</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        sodium = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCarbohydrate</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        carbohydrate = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>This pattern has none of the disadvantages of the telescoping constructor pattern. It is easy, if a bit wordy, to create instances, and easy to read the resulting code:</p></blockquote><p>这个模式没有重叠的构造器模式的缺点。它很简单，就是对于创建一个对象来说有一些啰嗦，下面的代码很容易阅读：</p><blockquote><p>该模式没有重叠构造⽅法模式的缺点。通过这种⽅式可以轻松创建实例（就是稍微有点冗⻓），并且代码读起来也⽐较容易：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">NutritionFacts cocaCola = <span class="keyword">new</span> NutritionFacts();</span><br><span class="line">cocaCola.setServingSize(<span class="number">240</span>);</span><br><span class="line">cocaCola.setServings(<span class="number">8</span>);</span><br><span class="line">cocaCola.setCalories(<span class="number">100</span>);</span><br><span class="line">cocaCola.setSodium(<span class="number">35</span>);</span><br><span class="line">cocaCola.setCarbohydrate(<span class="number">27</span>);</span><br></pre></td></tr></table></figure><blockquote><p>Unfortunately, the JavaBeans pattern has serious disadvantages of its own. Because construction is split across multiple calls, a JavaBean may be in an inconsistent state partway through its construction. The class does not have the option of enforcing consistency merely by checking the validity of the constructor parameters. Attempting to use an object when it’s in an inconsistent state may cause failures that are far removed from the code containing the bug and hence difficult to debug. A related disadvantage is that the JavaBeans pattern precludes the possibility of making a class immutable (Item 17) and requires added effort on the part of the programmer to ensure thread safety.</p></blockquote><p>不幸的是，JavaBeans模式有它自己的缺点。因为构造被拆分成了很多调用，一个JavaBean在构造的过程中可能会进入一个不一致的状态。<del>Class无法通过检查构造器的参数来确保参数的一致性。</del>尝试用一个处于不一致的状态中的对象可能会导致一些跟代码无关的bug，并且很难调试。一个关联的缺点是JavaBeans模式没有制作不可变类的能力，需要程序员额外的努力来保证线程安全。</p><blockquote><p>但遗憾的是，JavaBeans模式⾃身存在严重的缺陷。由于构造过程被划分为多个调⽤，因此JavaBean在构造过程中可能会处于⼀种不⼀致的状态下。类仅仅通过检查构造⽅法参数的有效性是⽆法确保⼀致性的。当对象处于不⼀致状态时，使⽤这个对象会导致难以觉察的Bug，这种Bug也极难调试。与之相关的另⼀个缺陷就是JavaBeans模式⽆法确保⼀个类的不变性（条款17），并且需要程序员⾃⼰确保线程安全性。</p></blockquote><blockquote><p>It is possible to reduce these disadvantages by manually “freezing” the object when its construction is complete and not allowing it to be used until frozen, but this variant is unwieldy and rarely used in practice. Moreover, it can cause errors at runtime because the compiler cannot ensure that the programmer calls the freeze method on an object before using it.</p></blockquote><p>在对象构造完成后手动冻结它，在解冻之前不允许使用，是有可能减少这些缺点的，但是这种方式很难操作，在实践中很少使用。而且，这也会导致一些运行时错误，因为编译器不能保证程序员在使用对象之前调用它的冻结方法。</p><blockquote><p>当构造完毕时，我们可以通过⼿⼯『冻结』对象并且直到冻结后才允许使⽤对象来消除这些缺陷，不过这种做法很少使⽤。此外，这么做会导致运⾏期错误，因为编译器⽆法确保程序员在使⽤对象前会调⽤对象的冻结⽅法。</p></blockquote><blockquote><p>Luckily, there is a third alternative that combines the safety of the telescoping constructor pattern with the readability of the JavaBeans pattern. It is a form of the Builder pattern [Gamma95]. Instead of making the desired object directly, the client calls a constructor (or static factory) with all of the required parameters and gets a builder object. Then the client calls setter-like methods on the builder object to set each optional parameter of interest. Finally, the client calls a parameterless build method to generate the object, which is typically immutable. The builder is typically a static member class (Item 24) of the class it builds. Here’s how it looks in practice:</p></blockquote><p>幸运的是，有第三种选择，那就是把安全的重叠的构造方法模式和可读性好的JavaBeans模式组合在一起。它是构建器模式[Gamma95]的一种形式。相比直接构建一个需要的对象，客户端用所有需要的参数调用构造方法（或静态工厂）来得到一个构建器对象。然后客户端调用构建器对象类似setter的方法来设置所有想要的可选参数。最后，客户端调用一个无参的build方法来生成一个不可变对象。构建器是这个类本身的一个静态成员类（条款24）。下面是代码：</p><blockquote><p>幸好，还有⼀种⽅案融合了重叠构造⽅法模式的安全性与JavaBeans模式的可读性。它是⼀种构建器模式[Gamma95]。相⽐于直接创建所需的对象，客户端会调⽤⼀个构造⽅法（或是静态⼯⼚），该构造⽅法带有所需的参数，并且得到⼀个构建器对象。接下来，客户端会对构建器对象调⽤类似于setter的⽅法来设置每⼀个感兴趣的可选参数。最后，客户端会调⽤⼀个⽆参的build⽅法来⽣成对象，该对象是个不变对象。构建器通常是它所构建的类的⼀个静态成员类（条款24）。如下代码展示了其使⽤⽅式：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Builder Pattern</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NutritionFacts</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servings;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> calories;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> fat;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> sodium;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> carbohydrate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Required parameters</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servings;</span><br><span class="line">        <span class="comment">// Optional parameters - initialized to default values</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> calories = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> fat = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> sodium = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> carbohydrate = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.servingSize = servingSize;</span><br><span class="line">            <span class="keyword">this</span>.servings = servings;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">calories</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">            calories = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">fat</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">            fat = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">sodium</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">            sodium = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">carbohydrate</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">            carbohydrate = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> NutritionFacts <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> NutritionFacts(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">NutritionFacts</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        servingSize = builder.servingSize;</span><br><span class="line">        servings = builder.servings;</span><br><span class="line">        calories = builder.calories;</span><br><span class="line">        fat = builder.fat;</span><br><span class="line">        sodium = builder.sodium;</span><br><span class="line">        carbohydrate = builder.carbohydrate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>The NutritionFacts class is immutable, and all parameter default values are in one place. The builder’s setter methods return the builder itself so that invocations can be chained, resulting in a fluent API. Here’s how the client code looks:</p></blockquote><p>NutritionFacts类是不可变的，并且所有的参数默认值都在一个地方。构建器的setter方法返回构建器本身，所以调用可以是链式的，这就是流式API（fluent API)。下面是客户端代码：</p><blockquote><p>NutritionFacts类是不可变的，所有的参数默认值都在⼀个地⽅。构建器的setter⽅法返回的是构建器⾃身，这样调⽤就可以链接起来，形成⼀种流式API。如下展示了客户端代码的样⼦：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NutritionFacts cocaCola = <span class="keyword">new</span> NutritionFacts.Builder(<span class="number">240</span>, <span class="number">8</span>)</span><br><span class="line">           .calories(<span class="number">100</span>).sodium(<span class="number">35</span>).carbohydrate(<span class="number">27</span>).build();</span><br></pre></td></tr></table></figure><blockquote><p>This client code is easy to write and, more importantly, easy to read. The Builder pattern simulates named optional parameters as found in Python and Scala.<br>Validity checks were omitted for brevity. To detect invalid parameters as soon as possible, check parameter validity in the builder’s constructor and methods. Check invariants involving multiple parameters in the constructor invoked by the build method. To ensure these invariants against attack, do the checks on object fields after copying parameters from the builder (Item 50). If a check fails, throw an IllegalArgumentException (Item 72) whose detail message indicates which parameters are invalid (Item 75).</p></blockquote><p>这种客户端代码易于编写，更重要的是易于阅读。构建器模式模拟了Python和Scala里的具名可选参数。<br>为了简洁有效性检查被省略了。为了尽快检测到不合法的参数，要在构建器的构造方法和方法里校验参数的合法性。在build方法中调用的构造方法里检查涉及的多个参数的不变性。从builder复制这些参数过来后再执行检查（条款50），以确保这些不变性不被攻击。如果检查失败了，抛一个IllegalArgumentException，它的详细消息要说明是哪一个参数不合法（条款75）。</p><blockquote><p>上述客户端代码编写起来很容易，更为重要的是，阅读起来也⾮常轻松。<strong>构建器模式模拟了Python与Scala中的具名可选参数。</strong><br>出于简洁的⽬的，这⾥省略了有效性检查。为了能尽快检测出⽆效参数，请在构建器的构造⽅法与⽅法中检查参数的有效性。不变性检查涉及到由build⽅法所调⽤的构造⽅法中的多个参数。为了确保这些不变参数真正能够做到不变，请在从构建器中复制完参数后就对对象字段进⾏检查（条款50）。如果检查失败，那就要抛出IllegalArgumentException异常（条<br>款72），异常的详细信息标识出了哪些参数是⽆效的（条款75）。</p></blockquote><hr><blockquote><p>The Builder pattern is well suited to class hierarchies. Use a parallel hierarchy of builders, each nested in the corresponding class. Abstract classes have abstract builders; concrete classes have concrete builders. For example, consider an abstract class at the root of a hierarchy representing various kinds of pizza:</p></blockquote><p>构建器模式非常适合类继承。构建器采用一个平行的层次，每一个都嵌套在相应的类里。抽象类有抽象的构建器；子类有子类的构建器。例如，考虑有这样一个抽象类，它是各种披萨的一个根类：</p><blockquote><p>构建器模式⾮常适合于类继承。使⽤平⾏的构建器层次体系，每个都嵌套在对应的类中。抽象类有抽象构建器；具体类有具体构建器。⽐如说，考虑如下这个抽象类，它是层次体系的根，表示各种类型的披萨：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Builder pattern for class hierarchies</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Topping &#123;</span><br><span class="line">        HAM, MUSHROOM, ONION, PEPPER, SAUSAGE</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Set&lt;Topping&gt; toppings;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Builder</span>&lt;<span class="title">T</span>&gt;&gt; </span>&#123;</span><br><span class="line">        EnumSet&lt;Topping&gt; toppings = EnumSet.noneOf(Topping.class);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">addTopping</span><span class="params">(Topping topping)</span> </span>&#123;</span><br><span class="line">            toppings.add(Objects.requireNonNull(topping));</span><br><span class="line">            <span class="keyword">return</span> self();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">abstract</span> Pizza <span class="title">build</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Subclasses must override this method to return "this"</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> T <span class="title">self</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Pizza(Builder&lt;?&gt; builder) &#123;</span><br><span class="line">        toppings = builder.toppings.clone(); <span class="comment">// See Item 50</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Note that Pizza.Builder is a generic type with a recursive type parameter (Item 30). This, along with the abstract self method, allows method chaining to work properly in subclasses, without the need for casts. This workaround for the fact that Java lacks a self type is known as the simulated self-type idiom.</p></blockquote><p>注意Pizza.Builder是一个有可递归参数的泛型类（条款30）。<del>这样，连同抽象类本身的方法一样，在子类中方法的链式调用也可以工作的很好，不需要类型转换</del>。对于Java缺乏自类型这一事实，这种解决方法称为模拟自类型.</p><blockquote><p>注意到Pizza.Builder是个泛型类型，它有⼀个递归的类型参数（条款30）。通过该参数以及抽象的self⽅法可以让⽅法在⼦类中恰当地链接起来，⽽⽆需进⾏类型转换。这种对于Java缺乏⾃我类型问题的解决⽅案叫做模拟的⾃我类型。</p></blockquote><blockquote><p>Here are two concrete subclasses of Pizza, one of which represents a standard New-York-style pizza, the other a calzone. The former has a required size parameter, while the latter lets you specify whether sauce should be inside or out:</p></blockquote><p>下面是Pizza的两个具体子类，一个是标准的纽约风格披萨，另一个是半月披萨。前面的有一个必要的size参数，而后者允许你指定sauce（沙司）应该在里面还是外面：</p><blockquote><p>如下是两个具体的Pizza⼦类，⼀个代表标准的纽约⻛格披萨，另⼀个代表半圆形烤乳酪披萨。前者有⼀个必填的size参数，后者则可以指定将沙司加在⾥⾯还是外⾯：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NyPizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Size &#123;</span><br><span class="line">        SMALL, MEDIUM, LARGE</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Size size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> <span class="keyword">extends</span> <span class="title">Pizza</span>.<span class="title">Builder</span>&lt;<span class="title">Builder</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Size size;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(Size size)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.size = Objects.requireNonNull(size);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> NyPizza <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> NyPizza(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Builder <span class="title">self</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">NyPizza</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(builder);</span><br><span class="line">        size = builder.size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calzone</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> sauceInside;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> <span class="keyword">extends</span> <span class="title">Pizza</span>.<span class="title">Builder</span>&lt;<span class="title">Builder</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> sauceInside = <span class="keyword">false</span>; <span class="comment">// Default</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">sauceInside</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            sauceInside = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Calzone <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Calzone(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Builder <span class="title">self</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Calzone</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(builder);</span><br><span class="line">        sauceInside = builder.sauceInside;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Note that the build method in each subclass’s builder is declared to return the correct subclass: the build method of NyPizza.Builder returns NyPizza, while the one in Calzone.Builder returns Calzone. This technique, wherein a subclass method is declared to return a subtype of the return type declared in the superclass, is known as covariant return typing. It allows clients to use these builders without the need for casting.</p></blockquote><p>注意build方法在每一个子类的构建器里都被声明为返回了正确的子类型：NyPizza.Builder的build方法返回NyPizza，Calzone.Builder里的返回Calzone。这种在子类方法中声明返回一个<strong>父类声明返回的类型的子类</strong>的技术，被称为返回类型协变。可以让客户端不需要类型转换就能使用构建器。</p><blockquote><p>注意到每个⼦类构建器中的build⽅法都被声明为返回正确的⼦类：NyPizza.Builder的build⽅法返回NyPizza，Calzone.Builder的build⽅法则返回Calzone。这种⼦类⽅法声明为返回⽗类⽅法所声明的返回类型的⼦类型的技术叫做协变返回类型。客户端可以通过这项技术在不借助于类型转换的情况下使⽤这些构建器。</p></blockquote><p>–</p><blockquote><p>The client code for these “hierarchical builders” is essentially identical to the code for the simple NutritionFacts builder. The example client code shown next assumes static imports on enum constants for brevity:</p></blockquote><p>这些有继承关系的构建器的客户端代码基本上跟简单的NutritionFacts构建器的代码是一样的。下面的客户端代码例子假设静态导入了枚举常量：</p><blockquote><p>这些『层次化构建器』的客户端代码本质上与简单的NutritionFacts构建器客户端代码别⽆⼆致。出于简洁的⽬的，如下的示例客户端代码假设已经静态导⼊了枚举常量</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NyPizza pizza = <span class="keyword">new</span> NyPizza.Builder(SMALL)</span><br><span class="line">           .addTopping(SAUSAGE).addTopping(ONION).build();</span><br><span class="line">Calzone calzone = <span class="keyword">new</span> Calzone.Builder()</span><br><span class="line">       .addTopping(HAM).sauceInside().build();</span><br></pre></td></tr></table></figure><blockquote><p>A minor advantage of builders over constructors is that builders can have multiple varargs parameters because each parameter is specified in its own method. Alternatively, builders can aggregate the parameters passed into multiple calls to a method into a single field, as demonstrated in the addTopping method earlier.</p></blockquote><p>构建器相对构造方法的一个小优势是构建器可以有多个可变参数，因为每个参数都指定在它自己的方法里。或者，构建器可以将用多个方法调用传递的参数聚合到单个字段中，如前面的addTopping方法所示。</p><blockquote><p>相⽐于构造⽅法来说，构建器的⼀个⼩⼩的优势在于构建器可以拥有多个可变参数，这是因为每个参数都是在⾃⼰的⽅法中指定的。此外，构建器可以将传递给多个调⽤的参数聚合起来，并通过⼀个⽅法传给单个字段，这⼀点在之前的addTopping⽅法中已经介绍过了。</p></blockquote><p>–</p><blockquote><p>The Builder pattern is quite flexible. A single builder can be used repeatedly to build multiple objects. The parameters of the builder can be tweaked between invocations of the build method to vary the objects that are created. A builder can fill in some fields automatically upon object creation, such as a serial number that increases each time an object is created.</p></blockquote><p>构建器模式是很灵活的。一个单独的构建器可以被重复用来构建多个对象。构建器的参数可以在build方法的调用之间进行调整，以更改创建的对象。一个构建器可以在对象创建的时候自动填写一些字段，比如每次在对象创建的时候生成一个自增的序列号。</p><blockquote><p>构建器模式是相当灵活的。单个构建器可以重复多次使⽤来构建多个对象。构建器的参数可以在build⽅法的调⽤之间进⾏调整以改变所创建的对象。构建器可以在对象创建时⾃动填充⼀些字段，⽐如说每次创建⼀个对象时递增的序列号等</p></blockquote><p>–</p><blockquote><p>The Builder pattern has disadvantages as well. In order to create an object, you must first create its builder. While the cost of creating this builder is unlikely to be noticeable in practice, it could be a problem in performance-critical situations. Also, the Builder pattern is more verbose than the telescoping constructor pattern, so it should be used only if there are enough parameters to make it worthwhile, say four or more. But keep in mind that you may want to add more parameters in the future. But if you start out with constructors or static factories and switch to a builder when the class evolves to the point where the number of parameters gets out of hand, the obsolete constructors or static factories will stick out like a sore thumb. Therefore, it’s often better to start with a builder in the first place.</p></blockquote><p>构建器也有一些缺点。为了创建一个对象，你必须先创建一个构建器。<del>虽然创建构建器的开销不像实际中那样显著</del>，但是在一些高性能的场景下也可能会是个问题。并且，构建器模式比重叠的构造方法更冗长，所以它只应该在有很多参数的时候才值得使用，比如说4个以上。但是请记住你也许在未来会想添加更多的参数。<del>如果你刚开始用构造方法或者工厂方法，当类的参数数量发展到不可控制的时候再替换成构建器，废弃的构造方法和静态工厂会像一个疼痛的拇指一样突出。</del>因此，最好在一开始的时候就用构建器。</p><blockquote><p>构建器模式也有⾃身的缺点。为了创建对象，你必须要先创建其构建器。虽然在实际情况中，创建构建器的成本并不是很⾼，但在性能关键的情况下这就会导致问题了。此外，构建器模式要⽐重叠的构造⽅法模式更加冗⻓，这样只有在参数数量⾜够多的情况下使⽤构建器模式才是值得的，⽐如说4个以上的参数。不过请记住，你可能会在未来增加更多的参数。但如果⼀开始使⽤的是构造⽅法或是静态⼯⼚，当参数数量变得很多时，想要切换到构建器，那么显⽽易⻅，会遗留很多废弃的构造⽅法或是静态⼯⼚。因此，更好的做法则是⼀开始就使⽤构建器。</p></blockquote><p>–</p><blockquote><p>In summary, the Builder pattern is a good choice when designing classes whose constructors or static factories would have more than a handful of parameters, especially if many of the parameters are optional or of identical type. Client code is much easier to read and write with builders than with telescoping constructors, and builders are much safer than JavaBeans.</p></blockquote><p>总结一下，当设计的类的构造方法或者静态工厂有太多参数的时候，构建器模式是一个好的选择，特别是当大多数参数都是可选的，或者相同的类型。构建器的客户端代码会比重叠的构造器更容易编写和阅读，而且构建器比JavaBeans更安全。</p><blockquote><p>总的来说，在设计类时，如果构造⽅法或是静态⼯⼚有很多参数，那么构建器模式就是个很好的选择，特别是当很多参数都是可选的，或是类型相同的情况下更是如此。相⽐于重叠的构造⽅法来说，构建器的客户端代码的读写都会更加轻松，⽽且要⽐JavaBeans更加安全。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文-&amp;gt;翻译-&amp;gt;对比&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Static factories and constructors share a limitation: they do not scale well to large numbers of optional parameters. Consider the case of a class representing the Nutrition Facts label that appears on packaged foods. These labels have a few required fields—serving size, servings per container, and calories per serving— and more than twenty optional fields—total fat, saturated fat, trans fat, cholesterol, sodium, and so on. Most products have nonzero values for only a few of these optional fields.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Effective Java" scheme="http://www.saily.top/categories/Effective-Java/"/>
    
    
      <category term="java" scheme="http://www.saily.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud基于用户和ip的灰度发布方案</title>
    <link href="http://www.saily.top/2019/02/28/spring-cloud-nepxion-gray/"/>
    <id>http://www.saily.top/2019/02/28/spring-cloud-nepxion-gray/</id>
    <published>2019-02-28T03:32:01.000Z</published>
    <updated>2019-02-28T03:52:48.649Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于用户和ip的灰度发布方案"><a href="#基于用户和ip的灰度发布方案" class="headerlink" title="基于用户和ip的灰度发布方案"></a>基于用户和ip的灰度发布方案</h1><p>为了能够更好的解决系统新版本上线无法验证的风险，我们通常需要在升级的时候进行灰度发布，下面调研了一个上线灰度发布的流程。</p><p>下面先看一张图，然后再用一段文字描述整个发布的逻辑。</p><p><img src="/img/spring-cloud/灰度流量V2.jpg" alt></p><a id="more"></a><p>在正常情况下，用户的流量是可以随意打到A，A1，A2服务上的，A到B的流量，也是可以随意打的。<br>当灰度发布的开关打开以后，如图上所示，例如A3,B2,C4的链路为灰度路由的配置。此时将切断正常用户对A3,B2,C4的服务实例的访问，并且正常流量到A1以后，也不会再打到B2上。<br>当指定的测试账号访问系统的时候，所有的测试流量都会打到A3,B2,C4的链路服务实例上，第一步流量到A3以后，也不会将A调用B的流量打到B1的服务实例上。<br>当测试将这一组验证完毕后，即可将对配置进行修改，进而发布下一组。<br>当所有的实例都发布完成后，再将灰度发布开关关闭，此时，发布完成。<br>所有的这些操作，都可以在Apollo配置中心一键完成。</p><p>链路配置格式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"sevice-demo-a"</span>: <span class="string">"172.16.101.90:5000"</span>,</span><br><span class="line">    <span class="attr">"sevice-demo-b"</span>: <span class="string">"172.16.101.90:5020"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p>本方案基于Nepxion Discovery开发</p><blockquote><p>Nepxion Discovery is an enhancement for Spring Cloud Discovery on Eureka + Consul + Zookeeper + Nacos with Nacos + Apollo config for gray release, router and isolation 灰度发布、服务隔离、服务路由、服务权重、黑/白名单过滤 <a href="http://www.nepxion.com" target="_blank" rel="noopener">http://www.nepxion.com</a></p></blockquote><p>要了解灰度发布的原理，首先需要知道SpringCloud是基于Ribbon实现负载均衡算法的，以及是如何从注册中心拉取的服务列表。</p><p>灰度路由除了可以根据请求头来路由请求，也可以跟服务实例本身的版本号来决定路由。下面给出一个逻辑图，以及两个个源码解析的UML图。</p><p><img src="/img/spring-cloud/版本和IP路由逻辑.jpg" alt="版本和IP路由逻辑"></p><p><img src="/img/spring-cloud/版本号过滤服务列表逻辑.jpg" alt="版本号过滤服务列表逻辑"></p><p><img src="/img/spring-cloud/根据请求头执行负载均衡规则（权重逻辑）.jpg" alt="根据请求头执行负载均衡规则（权重逻辑）"></p><p>nepxion本来就提供了良好的服务过滤扩展，所以我的代码就是核心的一个过滤策略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 本策略实现了当灰度开关开启，对服务实例的ip进行过滤</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yangfan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/01/02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Log</span>4j2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GrayIpDiscoveryEnabledStrategy</span> <span class="keyword">implements</span> <span class="title">DiscoveryEnabledStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String IS_GRAY_USER = <span class="string">"isGrayUser"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVICE_IP = <span class="string">"serviceIp"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String GRAY_SWITCH = <span class="string">"graySwitch"</span>;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ServiceStrategyContextHolder serviceStrategyContextHolder;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; serviceIpMap;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> graySwitch;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;apollo.plugin.namespace&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String namespace;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Config config = ConfigService.getConfig(namespace);</span><br><span class="line">        serviceIpMap = toMap(config.getProperty(SERVICE_IP, <span class="string">"&#123;&#125;"</span>));</span><br><span class="line">        graySwitch = config.getBooleanProperty(SWITCH, Boolean.FALSE);</span><br><span class="line"></span><br><span class="line">        config.addChangeListener(changeEvent -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// ip配置发生变化</span></span><br><span class="line">            <span class="keyword">if</span> (changeEvent.isChanged(SERVICE_IP)) &#123;</span><br><span class="line">                <span class="keyword">final</span> String newValue = changeEvent.getChange(SERVICE_IP).getNewValue();</span><br><span class="line">                <span class="keyword">final</span> String oldValue = changeEvent.getChange(SERVICE_IP).getOldValue();</span><br><span class="line">                log.info(<span class="string">"service ip map changed, oldValue is &#123;&#125;, newValue is &#123;&#125;"</span>, () -&gt; oldValue, () -&gt; newValue);</span><br><span class="line">                serviceIpMap = toMap(newValue);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 开关发生变化</span></span><br><span class="line">            <span class="keyword">if</span> (changeEvent.isChanged(GRAY_SWITCH)) &#123;</span><br><span class="line">                <span class="keyword">final</span> String newValue = changeEvent.getChange(GRAY_SWITCH).getNewValue();</span><br><span class="line">                <span class="keyword">final</span> String oldValue = changeEvent.getChange(GRAY_SWITCH).getOldValue();</span><br><span class="line">                log.info(<span class="string">"graySwitch changed, oldValue is &#123;&#125;, newValue is &#123;&#125;"</span>, () -&gt; oldValue, () -&gt; newValue);</span><br><span class="line">                graySwitch = Boolean.valueOf(changeEvent.getChange(GRAY_SWITCH).getNewValue());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;, Sets.newHashSet(SERVICE_IP, GRAY_SWITCH));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(Server server, Map&lt;String, String&gt; metadata)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ip过滤</span></span><br><span class="line">        <span class="keyword">boolean</span> enabled = applyIpFilter(server, metadata);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!enabled) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当灰度开关打开后，正在灰度的region不能被正常流量访问到</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> server</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metadata</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">applyIpFilter</span><span class="params">(Server server, Map&lt;String, String&gt; metadata)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!graySwitch) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String appName = server.getMetaInfo().getAppName();</span><br><span class="line">        String ip = server.getHostPort();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ip匹配，灰度请求，灰度实例可访问</span></span><br><span class="line">        <span class="keyword">final</span> String ipHost = serviceIpMap.get(appName);</span><br><span class="line">        <span class="keyword">if</span> (ipHost != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> ipMatch = ip.equals(ipHost);</span><br><span class="line"></span><br><span class="line">            ServletRequestAttributes restAttributes = serviceStrategyContextHolder.getRestAttributes();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 非http请求</span></span><br><span class="line">            <span class="keyword">if</span> (restAttributes == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// ip和灰度实例匹配，不予访问</span></span><br><span class="line">                log.info(<span class="string">"The ServletRequestAttributes object is null, ignore to do gray ip filter for service=&#123;&#125;"</span>, appName);</span><br><span class="line">                <span class="keyword">return</span> !ipMatch;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> String isGrayUser = restAttributes.getRequest().getHeader(IS_GRAY_USER);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 无法识别是否是灰度用户</span></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isEmpty(isGrayUser)) &#123;</span><br><span class="line">                <span class="comment">// ip和灰度实例匹配，不予访问</span></span><br><span class="line">                log.info(<span class="string">"The isGrayUser header is null, ignore to do gray ip filter for service=&#123;&#125;"</span>, appName);</span><br><span class="line">                <span class="keyword">return</span> !ipMatch;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 灰度用户</span></span><br><span class="line">            <span class="keyword">if</span> (Boolean.valueOf(isGrayUser)) &#123;</span><br><span class="line">                <span class="comment">// ip和灰度实例匹配，通过访问</span></span><br><span class="line">                <span class="keyword">if</span> (ipMatch) &#123;</span><br><span class="line">                    log.info(<span class="string">"found gray user request, service &#123;&#125; route to ip &#123;&#125;"</span>, appName, ipHost);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> ipMatch;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">// 非灰度用户</span></span><br><span class="line">                <span class="comment">// ip和灰度实例匹配，不予访问</span></span><br><span class="line">                <span class="keyword">return</span> !ipMatch;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">toMap</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        JavaType javaType = getParametricTypeJavaType(String.class, String.class);</span><br><span class="line">        <span class="keyword">return</span> objectMapper.readValue(str, javaType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> JavaType <span class="title">getParametricTypeJavaType</span><span class="params">(Class... clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> objectMapper.getTypeFactory().constructParametricType(HashMap.class, clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nepxion discovery框架的作者是个很用心的作者，我在开发的时候也遇到了一些问题，作者都耐心的和我一起分析，一一帮我解决了，推荐大家去Star，去学习。</p><p><a href="https://github.com/Nepxion/Discovery" target="_blank" rel="noopener">https://github.com/Nepxion/Discovery</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基于用户和ip的灰度发布方案&quot;&gt;&lt;a href=&quot;#基于用户和ip的灰度发布方案&quot; class=&quot;headerlink&quot; title=&quot;基于用户和ip的灰度发布方案&quot;&gt;&lt;/a&gt;基于用户和ip的灰度发布方案&lt;/h1&gt;&lt;p&gt;为了能够更好的解决系统新版本上线无法验证的风险，我们通常需要在升级的时候进行灰度发布，下面调研了一个上线灰度发布的流程。&lt;/p&gt;
&lt;p&gt;下面先看一张图，然后再用一段文字描述整个发布的逻辑。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/spring-cloud/灰度流量V2.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="spring boot/cloud" scheme="http://www.saily.top/categories/spring-boot-cloud/"/>
    
    
      <category term="spring-cloud" scheme="http://www.saily.top/tags/spring-cloud/"/>
    
      <category term="微服务" scheme="http://www.saily.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="灰度发布" scheme="http://www.saily.top/tags/%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Security OAuth2 定制错误消息</title>
    <link href="http://www.saily.top/2019/01/09/spring-security-oauth2-custom-exception-response/"/>
    <id>http://www.saily.top/2019/01/09/spring-security-oauth2-custom-exception-response/</id>
    <published>2019-01-09T12:32:49.000Z</published>
    <updated>2019-01-12T15:46:31.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近在搭建一个Spring Cloud的项目，在搭建途中，遇到了一些问题，这里记录一下。<br>在搭建AuthorizationServer的时候，就遇到了问题，我的授权模式是用的password模式，然后是集成了JWT生成access_token。</p><p>基本上我是参照这个项目搭建的，<a href="https://gitee.com/log4j/pig" target="_blank" rel="noopener">https://gitee.com/log4j/pig</a> 。不过因为只是参考，所以我还做了一些改动，而且我们Spring Cloud的版本也不一样，我是F版的。</p><a id="more"></a><h2 id="问题1-oauth-token-401问题"><a href="#问题1-oauth-token-401问题" class="headerlink" title="问题1 /oauth/token 401问题"></a>问题1 /oauth/token 401问题</h2><p>在AuthorizationServer搭建完成以后，启动访问/oauth/token接口获取access_token。传入用户名和密码，然后一直得到一个401错误，日志也没有，我最开始还以为是Spring Security把这个接口给拦截了，后来DEBUG了一下源码，发现在BasicAuthenticationFilter.doFilterInternal()里有这么一句判断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String header = request.getHeader(<span class="string">"Authorization"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (header == <span class="keyword">null</span> || !header.toLowerCase().startsWith(<span class="string">"basic "</span>)) &#123;</span><br><span class="line">chain.doFilter(request, response);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是如果你的header里面没有Authorization(BasicAuthenticationFilter.doFilterInternal)，或者Authorization不是以basic 开头的，直接就返回401了。虽然我忘记了传这个参数，但是日志里没有任何提示，这个错误真是让我好一顿找才给解决。</p><p>这里面是<code>client_id:client_secret</code>的base64编码。到这还没完，因为Spring Cloud F版会有那个PasswordEncoder，所以他在校验secret的时候会和服务器配置的时候会进行加密，如果存储的密钥不是相应的加密方式，他也会报错，这个错误在网上都搜得到了。</p><p><a href="http://springcloud.cn/view/13" target="_blank" rel="noopener">Spring Security 4.x -&gt; 5.x 踩坑记录</a></p><p>DaoAuthenticationProvider.additionalAuthenticationChecks()方法里，就是检查密码的地方。</p><h2 id="问题2-Unsupported-grant-type-password"><a href="#问题2-Unsupported-grant-type-password" class="headerlink" title="问题2 Unsupported grant type: password"></a>问题2 Unsupported grant type: password</h2><p>接着我又开始遇到这个错误，搜了一下说是AuthenticationManager无法注入。</p><p>在AuthorizationServerEndpointsConfigurer.getDefaultTokenGranters里面，如果AuthenticationManager类的实例的话，那么就不支持password的授权模式，也就是ResourceOwnerPasswordTokenGranter。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;TokenGranter&gt; <span class="title">getDefaultTokenGranters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ClientDetailsService clientDetails = clientDetailsService();</span><br><span class="line">AuthorizationServerTokenServices tokenServices = tokenServices();</span><br><span class="line">AuthorizationCodeServices authorizationCodeServices = authorizationCodeServices();</span><br><span class="line">OAuth2RequestFactory requestFactory = requestFactory();</span><br><span class="line"></span><br><span class="line">List&lt;TokenGranter&gt; tokenGranters = <span class="keyword">new</span> ArrayList&lt;TokenGranter&gt;();</span><br><span class="line">tokenGranters.add(<span class="keyword">new</span> AuthorizationCodeTokenGranter(tokenServices, authorizationCodeServices, clientDetails,</span><br><span class="line">requestFactory));</span><br><span class="line">tokenGranters.add(<span class="keyword">new</span> RefreshTokenGranter(tokenServices, clientDetails, requestFactory));</span><br><span class="line">ImplicitTokenGranter implicit = <span class="keyword">new</span> ImplicitTokenGranter(tokenServices, clientDetails, requestFactory);</span><br><span class="line">tokenGranters.add(implicit);</span><br><span class="line">tokenGranters.add(<span class="keyword">new</span> ClientCredentialsTokenGranter(tokenServices, clientDetails, requestFactory));</span><br><span class="line"><span class="keyword">if</span> (authenticationManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">tokenGranters.add(<span class="keyword">new</span> ResourceOwnerPasswordTokenGranter(authenticationManager, tokenServices,</span><br><span class="line">clientDetails, requestFactory));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tokenGranters;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://springcloud.cn/view/13" target="_blank" rel="noopener">Spring Security 4.x -&gt; 5.x 踩坑记录</a>的也提到了这个问题，不过我这里遇到了更奇怪的现象，在WebSecurityConfigurerAdapter加上下面的配置后，并没有解决我的问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(name = BeanIds.AUTHENTICATION_MANAGER)</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AuthenticationManager <span class="title">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.authenticationManagerBean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果我发现在我的项目中，AuthorizationServerConfig竟然比WebSecurityConfigurer先加载，所以在<code>public void configure(AuthorizationServerEndpointsConfigurer endpoints)</code>注入并设置endpoints.authenticationManager(authenticationManager)的时候，放的是一个null进去。</p><p>我还觉得蛮奇怪的，下面的代码也会注入一个null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br></pre></td></tr></table></figure><p>然后我把这个参数改到构造方法里面去启动，结果就告诉我循环依赖，后来想了想，可能是因为Spring在处理循环依赖的时候，把一些注入类自动处理成null了。</p><p>在我解决了循环依赖以后，我就能登录成功了。</p><h2 id="问题3-如何定制BadCredentialsException-UserNameNotFound的异常消息"><a href="#问题3-如何定制BadCredentialsException-UserNameNotFound的异常消息" class="headerlink" title="问题3 如何定制BadCredentialsException,UserNameNotFound的异常消息"></a>问题3 如何定制BadCredentialsException,UserNameNotFound的异常消息</h2><p>接下来就是输入错误密码的时候得到的错误了，如果用户名或者密码错误了，Spring Security会返回一个</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"error"</span>: <span class="string">"invalid_grant"</span>,</span><br><span class="line"><span class="attr">"error_ description"</span>: <span class="string">"坏的凭证"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个错误信息太不友好了，我们一般给客户端返回的消息都是统一标准的格式，比如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"code"</span>:<span class="string">"401"</span>,</span><br><span class="line"><span class="attr">"msg"</span>:<span class="string">"用户名或密码错误"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样另类的消息格式是绝对不允许的。所以我就想定制化这个消息格式，是相信Spring Security肯定提供了相应的机制来供我们实现这个消息的定制，我先是在网上搜了很久，都没有找到解决方案，只是找到了一些哥们跟我有同样的问题，但是却没有人给出解决方案。</p><p>比如这个stackoverflow.com上的这个<a href="https://stackoverflow.com/questions/38109842/how-to-change-the-badcredentialsexception-usernamenotfound-exception-messages-in" target="_blank" rel="noopener">哥们</a>。</p><p>没办法了，找不到方案就自己想办法吧，我就从抛出异常的地方开始一行一行的debug，接着发现这个异常被TokenEndpoint类里的一个ExceptionHandler给拦截然后输出的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler</span>(OAuth2Exception.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;OAuth2Exception&gt; <span class="title">handleException</span><span class="params">(OAuth2Exception e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">logger.warn(<span class="string">"Handling error: "</span> + e.getClass().getSimpleName() + <span class="string">", "</span> + e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> getExceptionTranslator().translate(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么这个getExceptionTranslator到底是个什么东西，最后翻了一下到底是在哪里设置的这个属性，最终发现是AuthorizationServerEndpointsConfigurer的一个字段，是不是很眼熟？</p><p>和设置AuthenticationManager的是同一个类，所以定制一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomWebResponseExceptionTranslator</span> <span class="keyword">implements</span> <span class="title">WebResponseExceptionTranslator</span>&lt;<span class="title">OAuth2Exception</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">translate</span><span class="params">(Exception e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(RestResp.error(CommonErrorCode.AUTHORIZED_ERROR), HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在AuthorizationServerConfig里加上配置，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    endpoints</span><br><span class="line">            <span class="comment">//......其他配置</span></span><br><span class="line">            .exceptionTranslator(customWebResponseExceptionTranslator)</span><br><span class="line">            .authenticationManager(authenticationManager);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后得到了我们想要的输出结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"401"</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"用户名或密码错误"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题4-invalid-token-错误消息定制"><a href="#问题4-invalid-token-错误消息定制" class="headerlink" title="问题4 invalid_token 错误消息定制"></a>问题4 invalid_token 错误消息定制</h2><p>如果传入的token是错误的，那么会得到这样格式的一个错误消息：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"error"</span>: <span class="string">"invalid_token"</span>,</span><br><span class="line">  <span class="attr">"error_description"</span>: <span class="string">"Cannot convert access token to JSON"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上有可能是这个token在redis里没有等好几种错误</p><p>DefaultTokenServices.loadAuthentication(String accessTokenValue)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (accessToken == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> InvalidTokenException(<span class="string">"Invalid access token: "</span> + accessTokenValue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (accessToken.isExpired()) &#123;</span><br><span class="line">tokenStore.removeAccessToken(accessToken);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> InvalidTokenException(<span class="string">"Access token expired: "</span> + accessTokenValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">OAuth2Authentication result = tokenStore.readAuthentication(accessToken);</span><br><span class="line"><span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// in case of race condition</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> InvalidTokenException(<span class="string">"Invalid access token: "</span> + accessTokenValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想要定制化这个错误消息，需要制定一个AuthExceptionEntryPoint.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Log</span>4j2</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthExceptionEntryPoint</span> <span class="keyword">implements</span> <span class="title">AuthenticationEntryPoint</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commence</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        log.info(<span class="string">"Token失效，禁止访问 &#123;&#125;"</span>, request.getRequestURI());</span><br><span class="line">        response.setCharacterEncoding(StandardCharsets.UTF_8.displayName());</span><br><span class="line">        response.setContentType(MediaType.APPLICATION_JSON_UTF8_VALUE);</span><br><span class="line">        RestResp result = RestResp.error(CommonErrorCode.UNAUTHORIZED, <span class="string">"Token错误"</span>);</span><br><span class="line">        response.setStatus(HttpStatus.SC_OK);</span><br><span class="line">        PrintWriter printWriter = response.getWriter();</span><br><span class="line">        printWriter.append(objectMapper.writeValueAsString(result));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后ResourceServerConfiguration里增加配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ResourceServerSecurityConfigurer resources)</span> </span>&#123;</span><br><span class="line">    resources.expressionHandler(expressionHandler);</span><br><span class="line">    resources.authenticationEntryPoint(authExceptionEntryPoint);</span><br><span class="line">    resources.accessDeniedHandler(iuMiaoAccessDeniedHandler);</span><br><span class="line">    resources.tokenStore(redisTokenStore());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就能得到自定义的错误。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"10000401"</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"未授权: Token错误"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;最近在搭建一个Spring Cloud的项目，在搭建途中，遇到了一些问题，这里记录一下。&lt;br&gt;在搭建AuthorizationServer的时候，就遇到了问题，我的授权模式是用的password模式，然后是集成了JWT生成access_token。&lt;/p&gt;
&lt;p&gt;基本上我是参照这个项目搭建的，&lt;a href=&quot;https://gitee.com/log4j/pig&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://gitee.com/log4j/pig&lt;/a&gt; 。不过因为只是参考，所以我还做了一些改动，而且我们Spring Cloud的版本也不一样，我是F版的。&lt;/p&gt;
    
    </summary>
    
      <category term="spring" scheme="http://www.saily.top/categories/spring/"/>
    
    
      <category term="spring security" scheme="http://www.saily.top/tags/spring-security/"/>
    
  </entry>
  
  <entry>
    <title>Sleuth在异步线程中丢失traceId的解决方案</title>
    <link href="http://www.saily.top/2018/12/29/sleuth-lost-traceId/"/>
    <id>http://www.saily.top/2018/12/29/sleuth-lost-traceId/</id>
    <published>2018-12-29T01:55:21.000Z</published>
    <updated>2018-12-29T03:07:13.714Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>今天同事说在Hystrix的执行方法里打印日志的时候，Sleuth的traceId丢失了，产生了新的traceId，我第一反应是难道是因为Hystrix采用的是线程隔离模式，所以导致sleuth在线程切换的时候丢失了traceId吗？但是我记得Sleuth是针对是Hystrix处理过的，具体的处理的类就是<code>SleuthHystrixConcurrencyStrategy</code>。Spring Cloud Sleuth专门对Hystrix处理过线程切换上下文传递的问题。<br><a id="more"></a></p><p>所以我猜测可能是同事的业务代码里使用了线程池。经确认后确实有线程池代码，原因同样是线程上下文切换丢失了traceId。那么接下来就去找一找解决方案吧。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>在Spring的官方文档中，我们找到了关于异步通讯的部分。</p><p><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-sleuth/1.3.4.RELEASE/single/spring-cloud-sleuth.html#_asynchronous_communication" target="_blank" rel="noopener">https://cloud.spring.io/spring-cloud-static/spring-cloud-sleuth/1.3.4.RELEASE/single/spring-cloud-sleuth.html#_asynchronous_communication</a></p><p>我也贴一下原文：</p><blockquote><h2 id="Executor-ExecutorService-and-ScheduledExecutorService"><a href="#Executor-ExecutorService-and-ScheduledExecutorService" class="headerlink" title="Executor, ExecutorService and ScheduledExecutorService"></a>Executor, ExecutorService and ScheduledExecutorService</h2></blockquote><blockquote><p>We’re providing LazyTraceExecutor, TraceableExecutorService and TraceableScheduledExecutorService. Those implementations are creating Spans each time a new task is submitted, invoked or scheduled.</p></blockquote><blockquote><p>Here you can see an example of how to pass tracing information with TraceableExecutorService when working with CompletableFuture:</p></blockquote><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;Long&gt; completableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line"><span class="comment">// perform some logic</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1_000_000L</span>;</span><br><span class="line">&#125;, <span class="keyword">new</span> TraceableExecutorService(executorService,</span><br><span class="line"><span class="comment">// 'calculateTax' explicitly names the span - this param is optional</span></span><br><span class="line">tracer, traceKeys, spanNamer, <span class="string">"calculateTax"</span>));</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>Important</strong></p><p>Sleuth doesn’t work with parallelStream() out of the box. If you want to have the tracing information propagated through the stream you have to use the approach with supplyAsync(…) as presented above.</p></blockquote><p>大概意思就是Sleuth提供了一个<code>TraceableExecutorService</code>包装我们自己的ExecutorService，我们手动传入traceId等参数。并且在提交新的任务的时候，<code>TraceableExecutorService</code>会为我们创建新的Span，但是traceId是一致的。</p><p>所以大家在用Sleuth的时候，如果代码里有用到线程池、或者Spring Boot提供的@Async注解的时候，大家需要注意一下traceId丢失的问题，这样会导致链路无法追踪。</p><p>下面分别贴出两种情况的解决方案代码。</p><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> BeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TraceableExecutorService traceableExecutorService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    traceableExecutorService = <span class="keyword">new</span> TraceableExecutorService(beanFactory, ThreadUtil.newExecutor());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">getR</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    traceableExecutorService.execute(() -&gt; someMethod());</span><br></pre></td></tr></table></figure><p>效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[demo,96d8ba3676199532,96d8ba3676199532] [ix-RedisGroup-1]</span><br><span class="line">[demo,96d8ba3676199532,d5538e854c35b369] [ix-redisGroup-1] </span><br><span class="line">[demo,96d8ba3676199532,96d8ba3676199532] [nio-5000-exec-3]</span><br></pre></td></tr></table></figure><p>第一行是Hystrix执行的时候打印的，第二行是异步线程执行的时候打印的，第三行是同步执行的时候打印的。</p><h2 id="Async注解"><a href="#Async注解" class="headerlink" title="@Async注解"></a>@Async注解</h2><p>用<code>TraceableExecutorService</code>包装线程池。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomExecutorConfig</span> <span class="keyword">extends</span> <span class="title">AsyncConfigurerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span> BeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Executor <span class="title">getAsyncExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line"><span class="comment">// CUSTOMIZE HERE</span></span><br><span class="line">executor.setCorePoolSize(<span class="number">7</span>);</span><br><span class="line">executor.setMaxPoolSize(<span class="number">42</span>);</span><br><span class="line">executor.setQueueCapacity(<span class="number">11</span>);</span><br><span class="line">executor.setThreadNamePrefix(<span class="string">"MyExecutor-"</span>);</span><br><span class="line"><span class="comment">// DON'T FORGET TO INITIALIZE</span></span><br><span class="line">executor.initialize();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> LazyTraceExecutor(<span class="keyword">this</span>.beanFactory, executor);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>赶紧查查代码里有没有这个问题吧</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;今天同事说在Hystrix的执行方法里打印日志的时候，Sleuth的traceId丢失了，产生了新的traceId，我第一反应是难道是因为Hystrix采用的是线程隔离模式，所以导致sleuth在线程切换的时候丢失了traceId吗？但是我记得Sleuth是针对是Hystrix处理过的，具体的处理的类就是&lt;code&gt;SleuthHystrixConcurrencyStrategy&lt;/code&gt;。Spring Cloud Sleuth专门对Hystrix处理过线程切换上下文传递的问题。&lt;br&gt;
    
    </summary>
    
      <category term="spring" scheme="http://www.saily.top/categories/spring/"/>
    
    
      <category term="spring" scheme="http://www.saily.top/tags/spring/"/>
    
      <category term="sleuth" scheme="http://www.saily.top/tags/sleuth/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Zuul中修改URI</title>
    <link href="http://www.saily.top/2018/12/11/zuul-change-uri/"/>
    <id>http://www.saily.top/2018/12/11/zuul-change-uri/</id>
    <published>2018-12-11T09:14:01.000Z</published>
    <updated>2018-12-17T10:14:56.625Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zuul-修改URI"><a href="#Zuul-修改URI" class="headerlink" title="Zuul 修改URI"></a>Zuul 修改URI</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近项目中有一个需求，因为系统要进行重构，所以在重构期间网关需要判断URL请求的是老系统还是新系统。如果请求的是老系统那么就需要根据URL和参数在网关层对进行转换，也就是要修改成新系统的URL，并转发到新系统上去。如果请求的是新系统，那么则不做处理，进行相应的鉴权操作。</p><a id="more"></a><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>在网上搜索了一番以后，发现zuul提供了一种方式，就是自定义一个Pre类型的Filter，然后写入这行代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.set(FilterConstants.REQUEST_URI_KEY, yourUri);</span><br></pre></td></tr></table></figure><p>经过我的测试，他确实可以修改URI，但是并不满足我的需求。</p><p>客户端请求的是/a/helloA，我在这里修改成/b/helloB，我会得到一个404错误。经过分析发现，它已经确定了/a/**开头对应的服务，然后在a服务里去找/b/helloB这个路径，所以得到的是一个404。我的需求是修改成b服务下的/helloB请求。</p><p>所以我必须在zuul解析/a/** -&gt;&gt; a服务之前就将路径修改了，经过一番探索，以及zuul自带的filter里的源码，我发现<code>PreDecorationFilter</code>里有这样一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line"><span class="keyword">final</span> String requestURI = <span class="keyword">this</span>.urlPathHelper.getPathWithinApplication(ctx.getRequest());</span><br><span class="line">Route route = <span class="keyword">this</span>.routeLocator.getMatchingRoute(requestURI);</span><br><span class="line"><span class="keyword">if</span> (route != <span class="keyword">null</span>) &#123;</span><br><span class="line">String location = route.getLocation();</span><br><span class="line"><span class="keyword">if</span> (location != <span class="keyword">null</span>) &#123;</span><br><span class="line">ctx.put(REQUEST_URI_KEY, route.getPath());</span><br><span class="line">ctx.put(PROXY_KEY, route.getId());</span><br><span class="line">.....</span><br></pre></td></tr></table></figure><p>这不就是获取URI，然后routeLocator获取匹配的Route的代码吗？</p><p>那我们跟进<code>this.urlPathHelper.getPathWithinApplication(ctx.getRequest());</code>，看看它是怎么获取URI的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPathWithinApplication</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">String contextPath = getContextPath(request);</span><br><span class="line">String requestUri = getRequestUri(request);</span><br><span class="line">String path = getRemainingPath(requestUri, contextPath, <span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">if</span> (path != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// Normal case: URI contains context path.</span></span><br><span class="line"><span class="keyword">return</span> (StringUtils.hasText(path) ? path : <span class="string">"/"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> requestUri;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getRequestUri</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">String uri = (String) request.getAttribute(WebUtils.INCLUDE_REQUEST_URI_ATTRIBUTE);</span><br><span class="line"><span class="keyword">if</span> (uri == <span class="keyword">null</span>) &#123;</span><br><span class="line">uri = request.getRequestURI();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> decodeAndCleanUriString(request, uri);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现Spring是这样来获取URI的：<code>request.getAttribute(WebUtils.INCLUDE_REQUEST_URI_ATTRIBUTE);</code></p><p>既然这样，那我们就可以自由发挥一下了。</p><h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><p>我的思路就是在执行<code>PreDecorationFilter</code>之前，将request的attribute中的<code>WebUtils.INCLUDE_REQUEST_URI_ATTRIBUTE</code>先设置一下。首先<code>PreDecorationFilter</code>的order是5，自定义的过滤得在它前面执行，接下来自定义一个过滤器吧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceName2APIFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FilterConstants.PRE_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FilterConstants.PRE_DECORATION_FILTER_ORDER - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = ctx.getRequest();</span><br><span class="line">        <span class="keyword">final</span> String uri = request.getRequestURI();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> uri.contains(<span class="string">"/helloB"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        <span class="keyword">final</span> HttpServletRequest request = ctx.getRequest();</span><br><span class="line">        <span class="comment">// 转发回到helloA</span></span><br><span class="line">        <span class="comment">// 将替换掉的url set进去,在对应的转发请求的url就会使用这个url</span></span><br><span class="line"></span><br><span class="line">        request.setAttribute(WebUtils.INCLUDE_REQUEST_URI_ATTRIBUTE, <span class="string">"/a/helloA"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记得标记@Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServiceName2APIFilter <span class="title">serviceName2APIFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ServiceName2APIFilter();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我测试了一下，成功了，需求解决。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Zuul-修改URI&quot;&gt;&lt;a href=&quot;#Zuul-修改URI&quot; class=&quot;headerlink&quot; title=&quot;Zuul 修改URI&quot;&gt;&lt;/a&gt;Zuul 修改URI&lt;/h1&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;最近项目中有一个需求，因为系统要进行重构，所以在重构期间网关需要判断URL请求的是老系统还是新系统。如果请求的是老系统那么就需要根据URL和参数在网关层对进行转换，也就是要修改成新系统的URL，并转发到新系统上去。如果请求的是新系统，那么则不做处理，进行相应的鉴权操作。&lt;/p&gt;
    
    </summary>
    
      <category term="spring" scheme="http://www.saily.top/categories/spring/"/>
    
    
      <category term="zuul" scheme="http://www.saily.top/tags/zuul/"/>
    
  </entry>
  
  <entry>
    <title>深入理解JVM01-类加载</title>
    <link href="http://www.saily.top/2018/12/02/understandjvm-1/"/>
    <id>http://www.saily.top/2018/12/02/understandjvm-1/</id>
    <published>2018-12-02T07:55:41.000Z</published>
    <updated>2019-03-26T12:14:25.580Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h1><p>在Java代码中，类型的加载、连接与初始化过程都是在程序运行期间完成的。</p><ol><li>类加载常见的行为是将磁盘上的class文件加载到内存中</li><li>连接将是类与类之间的关系处理好</li><li>初始化对一些静态的变量进行赋值</li></ol><a id="more"></a><p>这提供了更大的灵活性，增加了更多的可能性。</p><h2 id="类加载深入剖析"><a href="#类加载深入剖析" class="headerlink" title="类加载深入剖析"></a>类加载深入剖析</h2><p>加载类的工具，叫做类加载器</p><h3 id="Java虚拟机的生命周期"><a href="#Java虚拟机的生命周期" class="headerlink" title="Java虚拟机的生命周期"></a>Java虚拟机的生命周期</h3><p>在如下几种情况，Java虚拟机将结束生命周期</p><ul><li>执行了System.exit()方法</li><li>程序正常执行结束</li><li>程序在执行过程中遇到了异常或错误而异常终止</li><li>由于操作系统出现错误而导致Java虚拟机进程终止</li></ul><h2 id="类的加载、连续、与初始化"><a href="#类的加载、连续、与初始化" class="headerlink" title="类的加载、连续、与初始化"></a>类的加载、连续、与初始化</h2><ul><li>加载：查找并加载类的二进制数据</li><li><p>连接</p><ul><li>验证：确保被加载的类的正确性</li><li>准备：为类的静态变量分配内存，并将其初始化为默认值</li><li>解析：把类中的符号引用转换为直接引用</li></ul></li><li>初始化：为类的静态变量赋予正确的初始值。</li></ul><h2 id="类的使用和卸载"><a href="#类的使用和卸载" class="headerlink" title="类的使用和卸载"></a>类的使用和卸载</h2><ul><li>使用</li><li>卸载</li></ul><p>Java对类的使用方式可以分为两种，主动使用和被动使用。所有的Java虚拟机实现必须在每个类或接口被Java程序<strong>首次主动使用</strong>时才初始化他们，这也意味着被动使用不会初始化他们。</p><p>主动使用一共有其七种情况：</p><ol><li>创建类的实例</li><li>访问某个类或接口的静态变量，或者对该静态变量赋值（getstatic,putstatic）</li><li>调用类的静态方法（invokestatic）</li><li>反射（如Class.forName(“com.test.Test”)）</li><li>初始化一个类的子类</li><li>Java虚拟机启动时被标明为启动类的类（Java Test）</li><li>JDK1.7开始提供的动态语言支持：java.lang.invoke.MethodHandle实例的解析结果<code>REF_getStatic</code>，<code>REF_putStatic</code>，<code>REF_invokeStatic</code>句柄对应的类没有初始化，则初始化</li></ol><p>除了以上其中情况，其他使用Java类的方式都被看做是对类的被动使用，都不会导致类的初始化。</p><h2 id="类的加载"><a href="#类的加载" class="headerlink" title="类的加载"></a>类的加载</h2><p>类的加载指的是将类的.class文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在内存中创建一个java.lang.Class对象（规范未说明Class对象位于哪里，HotSpot虚拟机将其放在了方法区中）用来封装类在方法区内的数据结构（JDK8以后没有方法区了，叫做MetaSpace）</p><p>加载.class文件的几种方式：</p><ol><li>从本地系统中直接加载</li><li>通过网络下载.class文件</li><li>从zip,jar等归档文件中加载.class文件</li><li>从专有数据库中提取.class文件</li><li>将Java源文件动态编译为.class文件</li></ol><h3 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h3><p>下面给一个类加载的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * -XX:+TraceClassLoading，用于追踪类的加载信息并打印出来</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yangfan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/12/03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="comment">// MyTest1就是启动类，会先加载</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里MyChild1里面的静态代码块并不会执行</span></span><br><span class="line">        <span class="comment">// 因为没有主动使用MyChild1</span></span><br><span class="line">        <span class="comment">// 虽然MyChild1没有初始化，但是它被加载了，在加了-XX:+TraceClassLoading参数后可以看到</span></span><br><span class="line">        System.out.println(MyChild1.str);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对于静态字段来说，只有直接定义了该字段的类才会被初始化</span></span><br><span class="line">        <span class="comment">// 当一个类在初始化时，要求其父类全部都已经初始化完毕</span></span><br><span class="line"><span class="comment">//        System.out.println(MyChild1.st2);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyParent1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String str = <span class="string">"hello world"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"MyParent1 static block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyChild1</span> <span class="keyword">extends</span> <span class="title">MyParent1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String st2 = <span class="string">"welcome"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"MyChild1 static block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里用到了一个JVM参数，其实我们大多数时候，可能只是调整一下堆大小，其他的参数用得比较少，其实这个参数是有规律可循的。</p><p><code>-XX:+&lt;option&gt;</code>，表示开启option选项<br><code>-XX:-&lt;option&gt;</code>，表示关闭option选项<br><code>-XX:&lt;option&gt;=value</code>，表示将option选项的值设置为value</p><h3 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用javap反编译后</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * classes javap -c com.sail.jvm.classloader.MyTest2</span></span><br><span class="line"><span class="comment"> * Compiled from "MyTest2.java"</span></span><br><span class="line"><span class="comment"> * public class com.sail.jvm.classloader.MyTest2 &#123;</span></span><br><span class="line"><span class="comment"> *   public com.sail.jvm.classloader.MyTest2();</span></span><br><span class="line"><span class="comment"> *     Code:</span></span><br><span class="line"><span class="comment"> *        0: aload_0</span></span><br><span class="line"><span class="comment"> *        1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span></span><br><span class="line"><span class="comment"> *        4: return</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   public static void main(java.lang.String[]);</span></span><br><span class="line"><span class="comment"> *     Code:</span></span><br><span class="line"><span class="comment"> *        0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line"><span class="comment"> *        3: ldc           #4                  // String hello world</span></span><br><span class="line"><span class="comment"> *        5: invokevirtual #5                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line"><span class="comment"> *        8: return</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 助记符：</span></span><br><span class="line"><span class="comment"> * ldc表示将int，float或是String类型的常量值从常量池推送至栈顶</span></span><br><span class="line"><span class="comment"> * bipush表示将单字节(-128 ~ 127)的常量值推送至栈顶</span></span><br><span class="line"><span class="comment"> * sipush表示将一个短整型常量值(-32768 ~ 32767)推送至栈顶</span></span><br><span class="line"><span class="comment"> * iconst_1表示将int类型1推送至栈顶(iconst_m1 ~ iconst_5)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yangfan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/12/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(MyParent2.str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyParent2</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在编译阶段，这个常量会存入到调用这个常量的方法所在的类的常量池中，</span></span><br><span class="line"><span class="comment">     * 本质上调用类并没有直接引用到定义常量的类，因此并不会触发定义常量的类的初始化</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 即str会被放置到MyTest2的常量池中，之后MyTest2与MyParent2就没有任何关系了，</span></span><br><span class="line"><span class="comment">     * 甚至，我们可以将MyParent2的class删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String str = <span class="string">"hello world"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">short</span> s = <span class="number">127</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> m = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"MyParent2 static block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这些助记符在rt.jar里都能找到，比如iconst就在com.sun.org.apache.bcel.internal.generic.ICONST里。</p><h3 id="例3"><a href="#例3" class="headerlink" title="例3"></a>例3</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当一个常量的值并非编译期间可以确定的，那么其值就不会被放到调用类的常量池中，</span></span><br><span class="line"><span class="comment"> * 这时程序在运行时，会导致主动使用这个常量所在的类，显然会导致这个类被初始化。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yangfan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/03/26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(MyParent3.str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyParent3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String str = UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"MyParent3 static code"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例4"><a href="#例4" class="headerlink" title="例4"></a>例4</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对于数组实例来说，其类型是由JVM在运行期动态生成的，表示为class [Lcom.sail.jvm.classloader.MyParent4</span></span><br><span class="line"><span class="comment"> * 这种形式。动态生成的类型，其父类型就是Object。</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 对于数组来说，JavaDoc经常将构成数组的元素称为Component，实际上就是将数组降低一个未读后的类型。</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 助记符：</span></span><br><span class="line"><span class="comment"> * anewarray：表示创建一个引用类型的（如类、接口、数组）数组，并将其引用值亚茹栈顶</span></span><br><span class="line"><span class="comment"> * newarray：表示创建一个指定的原始类型（如int、float、char等）的数组，并将其引用值压入栈顶</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yangfan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/03/26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 首次主动使用</span></span><br><span class="line"><span class="comment">//        MyParent4 myParent4 = new MyParent4();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不会输出，并没有使用</span></span><br><span class="line">        MyParent4[] myParent4s = <span class="keyword">new</span> MyParent4[<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// class [Lcom.sail.jvm.classloader.MyParent4;</span></span><br><span class="line">        System.out.println(myParent4s.getClass());</span><br><span class="line"></span><br><span class="line">        MyParent4[][] myParent4s1 = <span class="keyword">new</span> MyParent4[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// class [[Lcom.sail.jvm.classloader.MyParent4;</span></span><br><span class="line">        System.out.println(myParent4s1.getClass());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// class java.lang.Object</span></span><br><span class="line">        System.out.println(myParent4s.getClass().getSuperclass());</span><br><span class="line">        <span class="comment">// class java.lang.Object</span></span><br><span class="line">        System.out.println(myParent4s1.getClass().getSuperclass());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"======="</span>);</span><br><span class="line">        <span class="keyword">int</span>[] ints = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// class [I</span></span><br><span class="line">        System.out.println(ints.getClass());</span><br><span class="line">        <span class="comment">// class java.lang.Object</span></span><br><span class="line">        System.out.println(ints.getClass().getSuperclass());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] chars = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1</span>];</span><br><span class="line">        System.out.println(chars.getClass());</span><br><span class="line">        <span class="keyword">boolean</span>[] booleans = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">1</span>];</span><br><span class="line">        System.out.println(booleans.getClass());</span><br><span class="line">        <span class="keyword">short</span>[] shorts = <span class="keyword">new</span> <span class="keyword">short</span>[<span class="number">1</span>];</span><br><span class="line">        System.out.println(shorts.getClass());</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1</span>];</span><br><span class="line">        System.out.println(bytes.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyParent4</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 会输出</span></span><br><span class="line">        System.out.println(<span class="string">"MyParent4 static block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public class com.sail.jvm.classloader.MyTest4 &#123;</span></span><br><span class="line"><span class="comment">  public com.sail.jvm.classloader.MyTest4();</span></span><br><span class="line"><span class="comment">    Code:</span></span><br><span class="line"><span class="comment">       0: aload_0</span></span><br><span class="line"><span class="comment">       1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span></span><br><span class="line"><span class="comment">       4: return</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  public static void main(java.lang.String[]);</span></span><br><span class="line"><span class="comment">    Code:</span></span><br><span class="line"><span class="comment">       0: iconst_1</span></span><br><span class="line"><span class="comment">       1: anewarray     #2                  // class com/sail/jvm/classloader/MyParent4</span></span><br><span class="line"><span class="comment">       4: astore_1</span></span><br><span class="line"><span class="comment">       5: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line"><span class="comment">       8: aload_1</span></span><br><span class="line"><span class="comment">       9: invokevirtual #4                  // Method java/lang/Object.getClass:()Ljava/lang/Class;</span></span><br><span class="line"><span class="comment">      12: invokevirtual #5                  // Method java/io/PrintStream.println:(Ljava/lang/Object;)V</span></span><br><span class="line"><span class="comment">      15: iconst_1</span></span><br><span class="line"><span class="comment">      16: iconst_1</span></span><br><span class="line"><span class="comment">      17: multianewarray #6,  2             // class "[[Lcom/sail/jvm/classloader/MyParent4;"</span></span><br><span class="line"><span class="comment">      21: astore_2</span></span><br><span class="line"><span class="comment">      22: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line"><span class="comment">      25: aload_2</span></span><br><span class="line"><span class="comment">      26: invokevirtual #4                  // Method java/lang/Object.getClass:()Ljava/lang/Class;</span></span><br><span class="line"><span class="comment">      29: invokevirtual #5                  // Method java/io/PrintStream.println:(Ljava/lang/Object;)V</span></span><br><span class="line"><span class="comment">      32: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line"><span class="comment">      35: aload_1</span></span><br><span class="line"><span class="comment">      36: invokevirtual #4                  // Method java/lang/Object.getClass:()Ljava/lang/Class;</span></span><br><span class="line"><span class="comment">      39: invokevirtual #7                  // Method java/lang/Class.getSuperclass:()Ljava/lang/Class;</span></span><br><span class="line"><span class="comment">      42: invokevirtual #5                  // Method java/io/PrintStream.println:(Ljava/lang/Object;)V</span></span><br><span class="line"><span class="comment">      45: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line"><span class="comment">      48: aload_2</span></span><br><span class="line"><span class="comment">      49: invokevirtual #4                  // Method java/lang/Object.getClass:()Ljava/lang/Class;</span></span><br><span class="line"><span class="comment">      52: invokevirtual #7                  // Method java/lang/Class.getSuperclass:()Ljava/lang/Class;</span></span><br><span class="line"><span class="comment">      55: invokevirtual #5                  // Method java/io/PrintStream.println:(Ljava/lang/Object;)V</span></span><br><span class="line"><span class="comment">      58: iconst_1</span></span><br><span class="line"><span class="comment">      59: newarray       int</span></span><br><span class="line"><span class="comment">      61: astore_3</span></span><br><span class="line"><span class="comment">      62: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line"><span class="comment">      65: aload_3</span></span><br><span class="line"><span class="comment">      66: invokevirtual #4                  // Method java/lang/Object.getClass:()Ljava/lang/Class;</span></span><br><span class="line"><span class="comment">      69: invokevirtual #5                  // Method java/io/PrintStream.println:(Ljava/lang/Object;)V</span></span><br><span class="line"><span class="comment">      72: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line"><span class="comment">      75: aload_3</span></span><br><span class="line"><span class="comment">      76: invokevirtual #4                  // Method java/lang/Object.getClass:()Ljava/lang/Class;</span></span><br><span class="line"><span class="comment">      79: invokevirtual #7                  // Method java/lang/Class.getSuperclass:()Ljava/lang/Class;</span></span><br><span class="line"><span class="comment">      82: invokevirtual #5                  // Method java/io/PrintStream.println:(Ljava/lang/Object;)V</span></span><br><span class="line"><span class="comment">      85: return</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="例5"><a href="#例5" class="headerlink" title="例5"></a>例5</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当一个接口在初始化时，并不要求其父接口都完成了初始化</span></span><br><span class="line"><span class="comment"> * 只有在真正使用到父接口的时候（如引用接口中定义的常量时），才会初始化</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yangfan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/03/26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 删除MyParent5.class文件后再运行</span></span><br><span class="line">        <span class="comment">// 把MyChild5.class删了，也没有问题</span></span><br><span class="line">        System.out.println(MyChild5.b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyParent5</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyChild5</span> <span class="keyword">extends</span> <span class="title">MyParent5</span> </span>&#123;</span><br><span class="line"><span class="comment">//    int b = 6;</span></span><br><span class="line">    <span class="comment">// 此时要求MyParent5.class必须存在</span></span><br><span class="line">    <span class="keyword">int</span> b = <span class="keyword">new</span> Random().nextInt(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例6"><a href="#例6" class="headerlink" title="例6"></a>例6</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yangfan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/03/26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Singleton singleton = Singleton.getInstance();</span><br><span class="line">        System.out.println(<span class="string">"counter:1 "</span> + Singleton.counter1);</span><br><span class="line">        System.out.println(<span class="string">"counter:2 "</span> + Singleton.counter2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> counter1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在这里输出1</span></span><br><span class="line"><span class="comment">//    public static int counter2 = 0;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        counter1++;</span><br><span class="line">        counter2++; <span class="comment">// 准备阶段的重要意义（分配内存，给默认值）</span></span><br><span class="line"></span><br><span class="line">        System.out.println(counter1);</span><br><span class="line">        System.out.println(counter2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在这里输出0</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> counter2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;类加载&quot;&gt;&lt;a href=&quot;#类加载&quot; class=&quot;headerlink&quot; title=&quot;类加载&quot;&gt;&lt;/a&gt;类加载&lt;/h1&gt;&lt;p&gt;在Java代码中，类型的加载、连接与初始化过程都是在程序运行期间完成的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;类加载常见的行为是将磁盘上的class文件加载到内存中&lt;/li&gt;
&lt;li&gt;连接将是类与类之间的关系处理好&lt;/li&gt;
&lt;li&gt;初始化对一些静态的变量进行赋值&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="JVM" scheme="http://www.saily.top/categories/JVM/"/>
    
    
      <category term="java" scheme="http://www.saily.top/tags/java/"/>
    
      <category term="JVM" scheme="http://www.saily.top/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch08-内核原理</title>
    <link href="http://www.saily.top/2018/09/28/elasticSearch08/"/>
    <id>http://www.saily.top/2018/09/28/elasticSearch08/</id>
    <published>2018-09-28T07:12:35.000Z</published>
    <updated>2018-09-27T09:56:23.896Z</updated>
    
    <content type="html"><![CDATA[<h1 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h1><p>如何使文本被搜索到是搜索引擎很重要的一部分，倒排索引是很适合搜索的。</p><p>因为它的结构：</p><ol><li>包含这个关键词的document list</li><li>包含这个关键词的所有document的数量：IDFinverse document frequency. </li><li>这个关键词在每个document中出现的次数：TFterm frequency. <a id="more"></a></li><li>这个关键词在这个document中的次序</li><li>每个document的长度：length norm</li><li>包含这个关键词的所有document的平均长度</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Term  | Doc 1 | Doc 2 | Doc 3 | ...</span><br><span class="line">------------------------------------</span><br><span class="line">brown |   X   |       |  X    | ...</span><br><span class="line">fox   |   X   |   X   |  X    | ...</span><br><span class="line">quick |   X   |   X   |       | ...</span><br><span class="line">the   |   X   |       |  X    | ...</span><br></pre></td></tr></table></figure><p>倒排索引是不可变的，它的好处如下：</p><ul><li>不需要锁，提升并发能力，避免锁的问题</li><li>数据不变，一直保存在os cache中，只要cache内存足够</li><li>filter cache一直驻留在内存，因为数据不变</li><li>可以压缩，节省cpu和io开销</li></ul><p>当然，一个不变的索引也有不好的地方。主要事实是它是不可变的! 你不能修改它。如果你需要让一个新的文档 可被搜索，你需要重建整个索引。这要么对一个索引所能包含的数据量造成了很大的限制，要么对索引可被更新的频率造成了很大的限制。</p><h1 id="文档写入原理"><a href="#文档写入原理" class="headerlink" title="文档写入原理"></a>文档写入原理</h1><p>文档在写入的时候，ES的流程如下：</p><ol><li>新文档写入buffer</li><li>commit point</li><li>buffer中的数据写入新的index segment</li><li>等待在os cache中的index segment被fsync强制刷到磁盘上</li><li>新的index sgement被打开，供search使用</li><li>buffer被清空</li></ol><p><img src="https://www.elastic.co/guide/cn/elasticsearch/guide/current/images/elas_1102.png" alt></p><p><strong>删除和更新</strong></p><p>每次commit point时，会有一个.del文件，标记了哪些segment中的哪些document被标记为deleted了。<br>搜索的时候，会依次查询所有的segment，从旧的到新的，比如被修改过的document，在旧的segment中，会标记为deleted，在新的segment中会有其新的数据。</p><h1 id="优化写入流程"><a href="#优化写入流程" class="headerlink" title="优化写入流程"></a>优化写入流程</h1><p>现有流程的问题，每次都必须等待fsync将segment刷入磁盘，才能将segment打开供search使用，这样的话从一个document写入，到它可以被搜索，可能会超过1分钟！这就不是近实时的搜索了！主要瓶颈在于fsync实际发生磁盘IO写数据进磁盘，是很耗时的。</p><p>写入流程被改进如下：</p><ol><li>数据写入buffer</li><li>每隔一定时间，buffer中的数据被写入segment文件，但是先写入os cache</li><li>只要segment写入os cache，那就直接打开供search使用，不立即执行commit</li></ol><p><img src="https://www.elastic.co/guide/cn/elasticsearch/guide/current/images/elas_1105.png" alt></p><p>数据写入os cache，并被打开供搜索的过程，叫做refresh，默认是每隔1秒refresh一次。也就是说，每隔一秒就会将buffer中的数据写入一个新的index segment file，先写入os cache中。所以es是近实时的，数据写入到可以被搜索，默认是1秒。</p><p>POST /my_index/_refresh，可以手动refresh，一般不需要手动执行，没必要这样，让es自己搞就可以了。</p><p>比如说，我们现在的时效性要求比较低，只要求一条数据写入es，一分钟以后才让我们搜索到就可以了，那么就可以调整refresh interval。如果写的并发量和数据量比较大的话，refresh设置长一点可以优化写入速度，因为频繁的写入index segment file会比较占用资源。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"refresh_interval"</span>: <span class="string">"60s"</span> </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="可靠存储实现"><a href="#可靠存储实现" class="headerlink" title="可靠存储实现"></a>可靠存储实现</h1><p>再次优化的写入流程</p><ol><li>数据写入buffer缓冲和translog日志文件</li><li>每隔一秒钟，buffer中的数据被写入新的segment file，并进入os cache，此时segment被打开并供search使用</li><li>buffer被清空</li><li>重复1~3，新的segment不断添加，buffer不断被清空，而translog中的数据不断累加</li><li>当translog长度达到一定程度的时候，commit操作发生<ol><li>buffer中的所有数据写入一个新的segment，并写入os cache，打开供使用</li><li>buffer被清空</li><li>一个commit ponit被写入磁盘，标明了所有的index segment</li><li>filesystem cache中的所有index segment file缓存数据，被fsync强行刷到磁盘上</li><li>现有的translog被清空，创建一个新的translog</li></ol></li></ol><p><strong>新的文档被添加到内存缓冲区并且被追加到了事务日志</strong></p><p><img src="https://www.elastic.co/guide/cn/elasticsearch/guide/current/images/elas_1106.png" alt="新的文档被添加到内存缓冲区并且被追加到了事务日志"></p><p><strong>刷新（refresh）完成后, 缓存被清空但是事务日志不会</strong></p><p><img src="https://www.elastic.co/guide/cn/elasticsearch/guide/current/images/elas_1107.png" alt></p><p><strong>事务日志不断积累文档</strong></p><p><img src="https://www.elastic.co/guide/cn/elasticsearch/guide/current/images/elas_1108.png" alt></p><p><strong>在刷新（flush）之后，段被全量提交，并且事务日志被清空</strong></p><p><img src="https://www.elastic.co/guide/cn/elasticsearch/guide/current/images/elas_1109.png" alt></p><h2 id="数据恢复"><a href="#数据恢复" class="headerlink" title="数据恢复"></a>数据恢复</h2><p>OS cache中积累了不少数据，这个时候如果机器宕机了，虽然os cache的数据丢失了，但是translog的数据是存在的，可以基于translog和commit point进行数据恢复。</p><p>fsync+清空translog，就是flush，默认每隔30分钟flush一次，或者当translog过大的时候，也会flush。</p><p>POST /my_index/_flush，一般来说别手动flush，让它自动执行就可以了。</p><p><strong>translog</strong></p><p>translog本身，每隔5秒被fsync一次到磁盘上。在一次增删改操作之后，当fsync在primary shard和replica shard都成功之后，那次增删改操作才会成功。</p><p>但是这种在一次增删改时强行fsync translog可能会导致部分操作比较耗时，也可以允许部分数据丢失，设置异步fsync translog。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index/_settings</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"index.translog.durability"</span>: <span class="string">"async"</span>,</span><br><span class="line">    <span class="attr">"index.translog.sync_interval"</span>: <span class="string">"5s"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你不确定这个行为的后果，最好是使用默认的参数（ “index.translog.durability”: “request” ）来避免数据丢失。</p><h1 id="段合并"><a href="#段合并" class="headerlink" title="段合并"></a>段合并</h1><p>前面说了，refresh操作默认是每秒一次，每秒生成一个新的segment file，这样文件太多了，而且每次search都要搜索所有的segment，很耗时。</p><p>ES默认会在后台执行segment merge操作，在merge的时候，被标记为deleted的document也会被彻底物理删除。</p><p>每次merge操作的执行流程：</p><ol><li>选择一些有相似大小的segment，merge成一个大的segment</li><li>将新的segment flush到磁盘上去</li><li>写一个新的commit point，包括了新的segment，并且排除旧的那些segment</li><li>将新的segment打开供搜索</li><li>将旧的segment删除</li></ol><p><strong>两个提交了的段和一个未提交的段正在被合并到一个更大的段</strong></p><p><img src="https://www.elastic.co/guide/cn/elasticsearch/guide/current/images/elas_1110.png" alt></p><p><strong>一旦合并结束，老的段被删除</strong></p><p><img src="https://www.elastic.co/guide/cn/elasticsearch/guide/current/images/elas_1111.png" alt></p><h2 id="optimize-API"><a href="#optimize-API" class="headerlink" title="optimize API"></a>optimize API</h2><p>optimize API大可看做是 强制合并 API 。它会将一个分片强制合并到 max_num_segments 参数指定大小的段数目。 这样做的意图是减少段的数量（通常减少到一个），来提升搜索性能。</p><p>POST /my_index/_optimize?max_num_segments=1，尽量不要手动执行，让它自动默认执行就可以了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;倒排索引&quot;&gt;&lt;a href=&quot;#倒排索引&quot; class=&quot;headerlink&quot; title=&quot;倒排索引&quot;&gt;&lt;/a&gt;倒排索引&lt;/h1&gt;&lt;p&gt;如何使文本被搜索到是搜索引擎很重要的一部分，倒排索引是很适合搜索的。&lt;/p&gt;
&lt;p&gt;因为它的结构：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;包含这个关键词的document list&lt;/li&gt;
&lt;li&gt;包含这个关键词的所有document的数量：IDFinverse document frequency. &lt;/li&gt;
&lt;li&gt;这个关键词在每个document中出现的次数：TFterm frequency.
    
    </summary>
    
      <category term="ElasticSearch" scheme="http://www.saily.top/categories/ElasticSearch/"/>
    
    
      <category term="ElasticSearch" scheme="http://www.saily.top/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch07-索引管理</title>
    <link href="http://www.saily.top/2018/09/27/elasticSearch07/"/>
    <id>http://www.saily.top/2018/09/27/elasticSearch07/</id>
    <published>2018-09-27T03:48:13.000Z</published>
    <updated>2018-09-27T07:12:43.899Z</updated>
    
    <content type="html"><![CDATA[<p>此为龙果学院课程学习笔记，记录以后翻看</p><h1 id="索引管理"><a href="#索引管理" class="headerlink" title="索引管理"></a>索引管理</h1><h2 id="手动创建索引"><a href="#手动创建索引" class="headerlink" title="手动创建索引"></a>手动创建索引</h2><p>之前都是直接插入document，ES为我们自动创建索引。其实在大部分情况下，我们是需要自己先手动创建mapping的，就像数据库建表一样，你可能需要设置primary shard的数量，字段的分词器，具体的数据类型等等。</p><a id="more"></a><p><strong>创建索引的语法</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"number_of_shards"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"number_of_replicas"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"my_type"</span>: &#123;</span><br><span class="line">      <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"my_field"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"text"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改索引"><a href="#修改索引" class="headerlink" title="修改索引"></a>修改索引</h2><p><code>number_of_shards</code>是不能修改的，修改一下<code>number_of_replicas</code>试试。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index/_settings</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"number_of_replicas"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DELETE /my_index</span><br><span class="line">DELETE /index_one,index_two</span><br><span class="line">DELETE /index_*</span><br><span class="line">DELETE /_all</span><br></pre></td></tr></table></figure><p><code>DELETE /_all</code>是很危险的操作，可以在ES的配置文件里禁用掉。</p><p><strong>elasticsearch.yml</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">action.destructive_requires_name:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="配置分词器"><a href="#配置分词器" class="headerlink" title="配置分词器"></a>配置分词器</h2><p>分词器是用于将全文字符串转换为适合搜索的倒排索引。</p><p>standard 分析器是用于全文字段的默认分析器， 对于大部分西方语系来说是一个不错的选择。 它包括了以下几点：</p><ul><li>standard tokenizer：以单词边界进行切分</li><li>standard token filter：什么都不做</li><li>lowercase token filter：将所有字母转换为小写</li><li>stop token filter（默认被禁用）：移除停用词，比如a the it等等</li></ul><h2 id="修改分词器"><a href="#修改分词器" class="headerlink" title="修改分词器"></a>修改分词器</h2><p>启用english停用词token filter</p><p>在下面的例子中，我们创建了一个新的分析器，叫做 <code>es_std</code> ， 并使用预定义的英语停用词列表：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"analysis"</span>: &#123;</span><br><span class="line">      <span class="attr">"analyzer"</span>: &#123;</span><br><span class="line">        <span class="attr">"es_std"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"standard"</span>,</span><br><span class="line">          <span class="attr">"stopwords"</span>: <span class="string">"_english_"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET /my_index/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"standard"</span>, </span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"a dog is in the house"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokens"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"a"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"dog"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">5</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"is"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">6</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">8</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"in"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">9</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">11</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">3</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"the"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">12</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">15</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">4</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"house"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">16</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">21</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GET /my_index/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"es_std"</span>,</span><br><span class="line">  <span class="attr">"text"</span>:<span class="string">"a dog is in the house"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokens"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"dog"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">5</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"house"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">16</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">21</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义分词器"><a href="#自定义分词器" class="headerlink" title="自定义分词器"></a>自定义分词器</h2><p>虽然Elasticsearch带有一些现成的分析器，然而在分析器上Elasticsearch真正的强大之处在于，你可以通过在一个适合你的特定数据的设置之中组合字符过滤器、分词器、词汇单元过滤器来创建自定义的分析器。</p><p>一个分词器就是在一个包里面组合了三种函数的一个包装器， 三种函数按照顺序被执行:</p><ul><li><p>字符过滤器<br>  字符过滤器 用来 整理 一个尚未被分词的字符串。例如，如果我们的文本是HTML格式的，它会包含像 <code>&lt;p&gt;</code> 或者 <code>&lt;div&gt;</code> 这样的HTML标签，这些标签是我们不想索引的。我们可以使用 html清除 字符过滤器 来移除掉所有的HTML标签，并且像把 <code>&amp;Aacute;</code> 转换为相对应的Unicode字符 Á 这样，转换HTML实体。</p><p>  一个分析器可能有0个或者多个字符过滤器。</p></li><li><p>分词器<br>  一个分析器 必须 有一个唯一的分词器。 分词器把字符串分解成单个词条或者词汇单元。 standard 分析器里使用的 standard 分词器 把一个字符串根据单词边界分解成单个词条，并且移除掉大部分的标点符号，然而还有其他不同行为的分词器存在。</p></li><li><p>词单元过滤器<br>  经过分词，作为结果的 词单元流 会按照指定的顺序通过指定的词单元过滤器 。<br><strong>举例</strong>：</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"analysis"</span>: &#123;</span><br><span class="line">      <span class="attr">"char_filter"</span>: &#123;</span><br><span class="line">        <span class="attr">"&amp;_to_and"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"mapping"</span>,</span><br><span class="line">          <span class="attr">"mappings"</span>: [<span class="string">"&amp;=&gt; and"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"filter"</span>: &#123;</span><br><span class="line">        <span class="attr">"my_stopwords"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"stop"</span>,</span><br><span class="line">          <span class="attr">"stopwords"</span>: [<span class="string">"the"</span>, <span class="string">"a"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"analyzer"</span>: &#123;</span><br><span class="line">        <span class="attr">"my_analyzer"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"custom"</span>,</span><br><span class="line">          <span class="attr">"char_filter"</span>: [<span class="string">"html_strip"</span>, <span class="string">"&amp;_to_and"</span>],</span><br><span class="line">          <span class="attr">"tokenizer"</span>: <span class="string">"standard"</span>,</span><br><span class="line">          <span class="attr">"filter"</span>: [<span class="string">"lowercase"</span>, <span class="string">"my_stopwords"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里创建了一个<code>my_analyzer</code>分析器，分词用的standard，字符过滤器用了<code>html_strip</code>和<code>&amp;_to_and</code>，词过滤器用了<code>lowercase</code>和<code>my_stopwords</code>。</p><p>测试一下分词器的效果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">GET /my_index/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"tom&amp;jerry are a friend in the house, &lt;a&gt;, HAHA!!"</span>,</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"my_analyzer"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokens"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"tomandjerry"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">9</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"are"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">10</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">13</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"friend"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">16</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">22</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">3</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"in"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">23</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">25</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">4</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"house"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">30</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">35</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">6</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"haha"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">42</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">46</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">7</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如何在索引中使用我们自定义的分词器？</strong></p><p>创建一个mapping，为content设置我们自定义的分词器</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index/_mapping/my_type</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"properties"</span>: &#123;</span><br><span class="line">    <span class="attr">"content"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">      <span class="attr">"analyzer"</span>: <span class="string">"my_analyzer"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h1><p>type，是一个index中用来区分类似的文档。类似的文档可能有不同的fields，而且有不同的属性来控制索引建立、分词器。就像数据库中的 schema ，描述了文档可能具有的字段或 属性 、 每个字段的数据类型—比如 string, integer 或 date —以及Lucene是如何索引和存储这些字段的。</p><p>field的value，在底层的lucene中建立索引的时候，全部是opaque bytes类型，是不区分类型的。</p><p>Lucene 没有文档类型的概念，每个文档的类型名被存储在一个叫 <code>_type</code> 的元数据字段上。 当我们要检索某个类型的文档时, Elasticsearch 通过在 <code>_type</code> 字段上使用过滤器限制只返回这个类型的文档。</p><p>Lucene 也没有映射的概念。 映射是 Elasticsearch 将复杂 JSON 文档 映射 成 Lucene 需要的扁平化数据的方式。</p><p>一个index中的多个type，实际上是放在一起存储的，因此一个index下，不能有多个type重名，而类型或者其他设置不同的，因为那样是无法处理的。</p><p>比如有个映射和文档：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"ecommerce"</span>: &#123;</span><br><span class="line">      <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">         <span class="attr">"elactronic_goods"</span>: &#123;</span><br><span class="line">            <span class="attr">"properties"</span>: &#123;</span><br><span class="line">               <span class="attr">"name"</span>: &#123;</span><br><span class="line">                  <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">               &#125;,</span><br><span class="line">               <span class="attr">"price"</span>: &#123;</span><br><span class="line">                  <span class="attr">"type"</span>: <span class="string">"double"</span></span><br><span class="line">               &#125;,</span><br><span class="line">       <span class="attr">"service_period"</span>: &#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">       &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="attr">"fresh_goods"</span>: &#123;</span><br><span class="line">            <span class="attr">"properties"</span>: &#123;</span><br><span class="line">               <span class="attr">"name"</span>: &#123;</span><br><span class="line">                  <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">               &#125;,</span><br><span class="line">               <span class="attr">"price"</span>: &#123;</span><br><span class="line">                  <span class="attr">"type"</span>: <span class="string">"double"</span></span><br><span class="line">               &#125;,</span><br><span class="line">       <span class="attr">"eat_period"</span>: &#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">       &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"geli kongtiao"</span>,</span><br><span class="line">  <span class="attr">"price"</span>: <span class="number">1999.0</span>,</span><br><span class="line">  <span class="attr">"service_period"</span>: <span class="string">"one year"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"aozhou dalongxia"</span>,</span><br><span class="line">  <span class="attr">"price"</span>: <span class="number">199.0</span>,</span><br><span class="line">  <span class="attr">"eat_period"</span>: <span class="string">"one week"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际在Lucene里的数据可能是：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"ecommerce"</span>: &#123;</span><br><span class="line">      <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">        <span class="attr">"_type"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">          <span class="attr">"index"</span>: <span class="string">"not_analyzed"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"name"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="string">"price"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"double"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="string">"service_period"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="string">"eat_period"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"elactronic_goods"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"geli kongtiao"</span>,</span><br><span class="line">  <span class="attr">"price"</span>: <span class="number">1999.0</span>,</span><br><span class="line">  <span class="attr">"service_period"</span>: <span class="string">"one year"</span>,</span><br><span class="line">  <span class="attr">"eat_period"</span>: <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"fresh_goods"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"aozhou dalongxia"</span>,</span><br><span class="line">  <span class="attr">"price"</span>: <span class="number">199.0</span>,</span><br><span class="line">  <span class="attr">"service_period"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"eat_period"</span>: <span class="string">"one week"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以最佳实践是，将类似结构的type放在一个index下，这些type应该有多个field是相同的。<br><strong>假如你将两个type的field完全不同，放在一个index下，那么就每条数据都至少有一半的field在底层的lucene中是空值，会有严重的性能问题</strong>。</p><h1 id="根对象"><a href="#根对象" class="headerlink" title="根对象"></a>根对象</h1><p>映射的最高一层被称为 根对象 ，它可能包含下面几项：</p><ul><li>一个 properties 节点，列出了文档中可能包含的每个字段的映射</li><li>各种元数据字段，它们都以一个下划线开头，例如 <code>_type</code> 、 <code>_id</code> 和 <code>_source</code></li><li>设置项，控制如何动态处理新的字段，例如 <code>analyzer</code> 、 <code>dynamic_date_formats</code> 和 <code>dynamic_templates</code></li><li>其他设置，可以同时应用在根对象和其他 <code>object</code> 类型的字段上，例如 <code>enabled</code> 、 <code>dynamic</code> 和 <code>include_in_all</code></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"my_type"</span>: &#123;</span><br><span class="line">      <span class="attr">"properties"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h2><p>文档的字段描述，包含type，index，analyzer</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index/_mapping/my_type</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"properties"</span>: &#123;</span><br><span class="line">    <span class="attr">"title"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"text"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="source"><a href="#source" class="headerlink" title="_source"></a>_source</h2><p>Elasticsearch 在 <code>_source</code> 字段存储代表文档体的JSON字符串。和所有被存储的字段一样， <code>_source</code> 字段在被写入磁盘之前先会被压缩。</p><p>好处：</p><ol><li>查询的时候，直接可以拿到完整的document，不需要先拿document id，再发送一次请求拿document</li><li>partial update基于_source实现</li><li>reindex时，直接基于_source实现，不需要从数据库（或者其他外部存储）查询数据再修改</li><li>可以基于_source定制返回field</li><li>debug query更容易，因为可以直接看到_source</li></ol><p>不需要的话，也可以禁用_source，不保存原始对象</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index/_mapping/my_type2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_source"</span>: &#123;<span class="attr">"enabled"</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="all"><a href="#all" class="headerlink" title="_all"></a>_all</h2><p>前面说过，将所有field打包在一起，作为一个_all field，建立索引。没指定任何field进行搜索时，就是使用_all field在搜索。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index/_mapping/my_type3</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_all"</span>: &#123;<span class="attr">"enabled"</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以在field级别设置<code>include_in_all</code> field，设置是否要将field的值包含在<code>_all</code> field中&gt;</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index/_mapping/my_type4</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"properties"</span>: &#123;</span><br><span class="line">    <span class="attr">"my_field"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">      <span class="attr">"include_in_all"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="标识性metadata"><a href="#标识性metadata" class="headerlink" title="标识性metadata"></a>标识性metadata</h2><ul><li>_id<br>  文档的 ID 字符串</li><li>_type<br>  文档的类型名</li><li>_index<br>  文档所在的索引</li><li>_uid<br>  <code>_type</code> 和 <code>_id</code> 连接在一起构造成 type#id</li></ul><h1 id="定制dynamic策略"><a href="#定制dynamic策略" class="headerlink" title="定制dynamic策略"></a>定制dynamic策略</h1><p>ES在数据遇到新的字段时候，会为我们自动mapping，但是我们也可以定制化这个策略：</p><ul><li>true：遇到陌生字段，就进行dynamic mapping</li><li>false：遇到陌生字段，就忽略</li><li>strict：遇到陌生字段，就报错</li></ul><p>修改策略为<code>strict</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"my_type"</span>: &#123;</span><br><span class="line">      <span class="attr">"dynamic"</span>: <span class="string">"strict"</span>,</span><br><span class="line">      <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"title"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"text"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"address"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">          <span class="attr">"dynamic"</span>: <span class="string">"true"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试添加数据，这里多了一个mapping里没有的content字段，因为是<code>strict</code>策略，所以ES报错了：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index/my_type/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"my article"</span>,</span><br><span class="line">  <span class="attr">"content"</span>: <span class="string">"this is my article"</span>,</span><br><span class="line">  <span class="attr">"address"</span>: &#123;</span><br><span class="line">    <span class="attr">"province"</span>: <span class="string">"guangdong"</span>,</span><br><span class="line">    <span class="attr">"city"</span>: <span class="string">"guangzhou"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"error"</span>: &#123;</span><br><span class="line">    <span class="attr">"root_cause"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"strict_dynamic_mapping_exception"</span>,</span><br><span class="line">        <span class="attr">"reason"</span>: <span class="string">"mapping set to strict, dynamic introduction of [content] within [my_type] is not allowed"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"strict_dynamic_mapping_exception"</span>,</span><br><span class="line">    <span class="attr">"reason"</span>: <span class="string">"mapping set to strict, dynamic introduction of [content] within [my_type] is not allowed"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="number">400</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="date-detection"><a href="#date-detection" class="headerlink" title="date_detection"></a>date_detection</h2><p>默认会按照一定格式识别date，比如yyyy-MM-dd。但是如果某个field先过来一个2017-01-01的值，就会被自动dynamic mapping成date，后面如果再来一个”hello world”之类的值，就会报错。可以手动关闭某个type的date_detection，如果有需要，自己手动指定某个field为date类型。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index/_mapping/my_type</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"date_detection"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义dynamic-mapping-template（type-level）"><a href="#自定义dynamic-mapping-template（type-level）" class="headerlink" title="自定义dynamic mapping template（type level）"></a>自定义dynamic mapping template（type level）</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"my_type"</span>: &#123;</span><br><span class="line">      <span class="attr">"dynamic_templates"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"en"</span>: &#123;</span><br><span class="line">            <span class="attr">"match"</span>: <span class="string">"*_en"</span>,</span><br><span class="line">            <span class="attr">"match_mapping_type"</span>: <span class="string">"string"</span>,</span><br><span class="line">            <span class="attr">"mapping"</span>: &#123;</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">              <span class="attr">"analyzer"</span>: <span class="string">"english"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"long_to_date"</span>: &#123;</span><br><span class="line">            <span class="attr">"match"</span>: <span class="string">"*time"</span>,</span><br><span class="line">            <span class="attr">"match_mapping_type"</span>: <span class="string">"long"</span>,</span><br><span class="line">            <span class="attr">"mapping"</span>: &#123;</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"date"</span>,</span><br><span class="line">              <span class="attr">"index"</span>: <span class="string">"not_analyzed"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index/my_type/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"this is my first article"</span>,</span><br><span class="line">  <span class="attr">"title_en"</span>: <span class="string">"this is my first article"</span>,</span><br><span class="line">  <span class="attr">"create_time"</span>: <span class="number">1538031023000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看看ES为我们创建的mapping，<code>create_time</code>成功被映射成了date类型，<code>title_en</code>设置了english为分词器。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">GET /my_index/my_type/_mapping</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"my_index"</span>: &#123;</span><br><span class="line">    <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">      <span class="attr">"my_type"</span>: &#123;</span><br><span class="line">        <span class="attr">"dynamic_templates"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"en"</span>: &#123;</span><br><span class="line">              <span class="attr">"match"</span>: <span class="string">"*_en"</span>,</span><br><span class="line">              <span class="attr">"match_mapping_type"</span>: <span class="string">"string"</span>,</span><br><span class="line">              <span class="attr">"mapping"</span>: &#123;</span><br><span class="line">                <span class="attr">"analyzer"</span>: <span class="string">"english"</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"long_to_date"</span>: &#123;</span><br><span class="line">              <span class="attr">"match"</span>: <span class="string">"*time"</span>,</span><br><span class="line">              <span class="attr">"match_mapping_type"</span>: <span class="string">"long"</span>,</span><br><span class="line">              <span class="attr">"mapping"</span>: &#123;</span><br><span class="line">                <span class="attr">"index"</span>: <span class="string">"not_analyzed"</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"date"</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"properties"</span>: &#123;</span><br><span class="line">          <span class="attr">"create_time"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"date"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"title"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">            <span class="attr">"fields"</span>: &#123;</span><br><span class="line">              <span class="attr">"keyword"</span>: &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">                <span class="attr">"ignore_above"</span>: <span class="number">256</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"title_en"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">            <span class="attr">"analyzer"</span>: <span class="string">"english"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义dynamic-mapping-template（index-level）"><a href="#自定义dynamic-mapping-template（index-level）" class="headerlink" title="自定义dynamic mapping template（index level）"></a>自定义dynamic mapping template（index level）</h2><p><code>_default_</code>就是设置这个index下所有的模板，type自己的配置可以覆盖<code>_default_</code>的配置。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">        <span class="attr">"_default_"</span>: &#123;</span><br><span class="line">            <span class="attr">"_all"</span>: &#123; <span class="attr">"enabled"</span>:  <span class="literal">false</span> &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"blog"</span>: &#123;</span><br><span class="line">            <span class="attr">"_all"</span>: &#123; <span class="attr">"enabled"</span>:  <span class="literal">true</span>  &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="重建索引"><a href="#重建索引" class="headerlink" title="重建索引"></a>重建索引</h1><p>一个field的设置是不能被修改的，如果要修改一个Field，那么应该重新按照新的mapping，建立一个index，然后将数据批量查询出来，重新用bulk api写入index中。</p><p>批量查询的时候，建议采用scroll api，并且采用多线程并发的方式来reindex数据，每次scoll就查询指定日期的一段数据，交给一个线程即可。</p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>一开始，依靠dynamic mapping，插入数据，但是不小心有些数据是2017-01-01这种日期格式的，所以title这种field被自动映射为了date类型，实际上它应该是string类型的。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index/my_type/3</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"2017-01-03"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"my_index"</span>: &#123;</span><br><span class="line">    <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">      <span class="attr">"my_type"</span>: &#123;</span><br><span class="line">        <span class="attr">"properties"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"date"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当后期向索引中加入string类型的title值的时候，就会报错</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index/my_type/4</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"my first article"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"error"</span>: &#123;</span><br><span class="line">    <span class="attr">"root_cause"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"mapper_parsing_exception"</span>,</span><br><span class="line">        <span class="attr">"reason"</span>: <span class="string">"failed to parse [title]"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"mapper_parsing_exception"</span>,</span><br><span class="line">    <span class="attr">"reason"</span>: <span class="string">"failed to parse [title]"</span>,</span><br><span class="line">    <span class="attr">"caused_by"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"illegal_argument_exception"</span>,</span><br><span class="line">      <span class="attr">"reason"</span>: <span class="string">"Invalid format: \"my first article\""</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="number">400</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果此时想修改title的类型，是不可能的</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index/_mapping/my_type</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"properties"</span>: &#123;</span><br><span class="line">    <span class="attr">"title"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"text"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"error"</span>: &#123;</span><br><span class="line">    <span class="attr">"root_cause"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"illegal_argument_exception"</span>,</span><br><span class="line">        <span class="attr">"reason"</span>: <span class="string">"mapper [title] of different type, current_type [date], merged_type [text]"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"illegal_argument_exception"</span>,</span><br><span class="line">    <span class="attr">"reason"</span>: <span class="string">"mapper [title] of different type, current_type [date], merged_type [text]"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="number">400</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，唯一的办法就是进行reindex。重新建立一个索引，将旧索引的数据查询出来，再导入新索引。</p><p>比如旧索引的名字，是<code>old_index</code>，新索引的名字是<code>new_index</code>，终端是java应用，已经在使用<code>old_index</code>在操作了，难道还要去停止java应用，修改使用的index为new_index，才重新启动java应用吗？这个过程中，就会导致java应用停机，可用性降低，这样肯定不好。</p><p>那么在我们的例子中先给旧索引一个别名，客户端先用<code>goods_index</code>这个别名来操作，此时实际指向的是旧的<code>my_index</code>。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index/_alias/goods_index</span><br></pre></td></tr></table></figure><p>然后新建一个index，调整其title的类型为string</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index_new</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"my_type"</span>: &#123;</span><br><span class="line">      <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"title"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"text"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用scroll api将数据批量查询出来</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">GET /my_index/_search?scroll=1m</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"sort"</span>: [<span class="string">"_doc"</span>],</span><br><span class="line">    <span class="attr">"size"</span>:  <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_scroll_id"</span>: <span class="string">"DnF1ZXJ5VGhlbkZldGNoBQAAAAAAAwhlFkxyT3g1eWVVUVFhWWJGNEwxM3o1WncAAAAAAAMIZhZMck94NXllVVFRYVliRjRMMTN6NVp3AAAAAAADCGQWTHJPeDV5ZVVRUWFZYkY0TDEzejVadwAAAAAAAwhnFkxyT3g1eWVVUVFhWWJGNEwxM3o1WncAAAAAAAMIaBZMck94NXllVVFRYVliRjRMMTN6NVp3"</span>,</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">38</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"my_index"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"my_type"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"2"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"2017-01-02"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"sort"</span>: [</span><br><span class="line">          <span class="number">0</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>采用bulk api将scoll查出来的一批数据，批量写入新索引。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST /_bulk</span><br><span class="line">&#123; <span class="attr">"index"</span>:&#123; <span class="attr">"_index"</span>: <span class="string">"my_index_new"</span>, <span class="attr">"_type"</span>: <span class="string">"my_type"</span>, <span class="attr">"_id"</span>: <span class="string">"2"</span> &#125;&#125;</span><br><span class="line">&#123; <span class="attr">"title"</span>:<span class="string">"2017-01-02"</span> &#125;</span><br></pre></td></tr></table></figure><p>反复循环，查询一批又一批的数据出来，采取bulk api将每一批数据批量写入新索引。</p><p>将goods_index alias切换到my_index_new上去，java应用会直接通过index别名使用新的索引中的数据，java应用程序不需要停机，零停机，高可用。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST /_aliases</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"actions"</span>: [</span><br><span class="line">        &#123; <span class="attr">"remove"</span>: &#123; <span class="attr">"index"</span>: <span class="string">"my_index"</span>, <span class="attr">"alias"</span>: <span class="string">"goods_index"</span> &#125;&#125;,</span><br><span class="line">        &#123; <span class="attr">"add"</span>:    &#123; <span class="attr">"index"</span>: <span class="string">"my_index_new"</span>, <span class="attr">"alias"</span>: <span class="string">"goods_index"</span> &#125;&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接通过goods_index别名来查询，是否成功，这里只有一条，因为我只操作了一条。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">GET /goods_index/my_type/_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">24</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"my_index_new"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"my_type"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"2"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"2017-01-02"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此为龙果学院课程学习笔记，记录以后翻看&lt;/p&gt;
&lt;h1 id=&quot;索引管理&quot;&gt;&lt;a href=&quot;#索引管理&quot; class=&quot;headerlink&quot; title=&quot;索引管理&quot;&gt;&lt;/a&gt;索引管理&lt;/h1&gt;&lt;h2 id=&quot;手动创建索引&quot;&gt;&lt;a href=&quot;#手动创建索引&quot; class=&quot;headerlink&quot; title=&quot;手动创建索引&quot;&gt;&lt;/a&gt;手动创建索引&lt;/h2&gt;&lt;p&gt;之前都是直接插入document，ES为我们自动创建索引。其实在大部分情况下，我们是需要自己先手动创建mapping的，就像数据库建表一样，你可能需要设置primary shard的数量，字段的分词器，具体的数据类型等等。&lt;/p&gt;
    
    </summary>
    
      <category term="ElasticSearch" scheme="http://www.saily.top/categories/ElasticSearch/"/>
    
    
      <category term="ElasticSearch" scheme="http://www.saily.top/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch06-_Search API</title>
    <link href="http://www.saily.top/2018/09/21/elasticSearch06/"/>
    <id>http://www.saily.top/2018/09/21/elasticSearch06/</id>
    <published>2018-09-21T02:15:48.000Z</published>
    <updated>2018-09-22T03:48:04.287Z</updated>
    
    <content type="html"><![CDATA[<p>此为龙果学院课程学习笔记，记录以后翻看</p><p>前面讲了简单的搜索、分词和映射，这篇文章讲ES的搜索API</p><h1 id="search-API"><a href="#search-API" class="headerlink" title="search API"></a>search API</h1><p>Search API的基本语法：</p><p>这是一个空查询，空查询将返回所有索引库（indices)中的所有文档：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>只用一个查询字符串，你就可以在一个、多个或者 _all 索引库（indices）和一个、多个或者所有types中查询：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /index_2014*/type1,type2/_search</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><p>同时你可以使用 from 和 size 参数来分页：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"from"</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>##一个带请求体的 GET 请求？</p></blockquote><blockquote><p>某些特定语言（特别是 JavaScript）的 HTTP 库是不允许 GET 请求带有请求体的。 事实上，一些使用者对于 GET 请求可以带请求体感到非常的吃惊。</p></blockquote><blockquote><p>而事实是这个RFC文档 RFC 7231— 一个专门负责处理 HTTP 语义和内容的文档 — 并没有规定一个带有请求体的 GET 请求应该如何处理！结果是，一些 HTTP 服务器允许这样子，而有一些 — 特别是一些用于缓存和代理的服务器 — 则不允许。</p></blockquote><blockquote><p>对于一个查询请求，Elasticsearch 的工程师偏向于使用 GET 方式，因为他们觉得它比 POST 能更好的描述信息检索（retrieving information）的行为。然而，因为带请求体的 GET 请求并不被广泛支持，所以 search API 同时支持 POST 请求：</p></blockquote><blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"from"</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>类似的规则可以应用于任何需要带请求体的 GET API。</p></blockquote><h1 id="query-dsl"><a href="#query-dsl" class="headerlink" title="query dsl"></a>query dsl</h1><p>查询表达式(Query DSL)是一种非常灵活又富有表现力的 查询语言。 Elasticsearch 使用它可以以简单的 JSON 接口来展现 Lucene 功能的绝大部分。在你的应用中，你应该用它来编写你的查询语句。它可以使你的查询语句更灵活、更精确、易读和易调试。</p><p>要使用这种查询表达式，只需将查询语句传递给 <code>query</code> 参数：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Query-DSL-基本语法"><a href="#Query-DSL-基本语法" class="headerlink" title="Query DSL 基本语法"></a>Query DSL 基本语法</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    QUERY_NAME: &#123;</span><br><span class="line">        ARGUMENT: VALUE,</span><br><span class="line">        ARGUMENT: VALUE,...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    QUERY_NAME: &#123;</span><br><span class="line">        FIELD_NAME: &#123;</span><br><span class="line">            ARGUMENT: VALUE,</span><br><span class="line">            ARGUMENT: VALUE,...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /test_index/test_type/_search </span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"test_field"</span>: <span class="string">"test"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组合多个搜索条件"><a href="#组合多个搜索条件" class="headerlink" title="组合多个搜索条件"></a>组合多个搜索条件</h2><p>利用bool查询进行组合搜索，数据准备：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">PUT /website/article/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"my elasticsearch article"</span>,</span><br><span class="line">  <span class="attr">"content"</span>: <span class="string">"es is very good"</span>,</span><br><span class="line">  <span class="attr">"author_id"</span>: <span class="number">110</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /website/article/2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"my hadoop article"</span>,</span><br><span class="line">  <span class="attr">"content"</span>: <span class="string">"hadoop is very good"</span>,</span><br><span class="line">  <span class="attr">"author_id"</span>: <span class="number">111</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /website/article/3</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"my elasticsearch article"</span>,</span><br><span class="line">  <span class="attr">"content"</span>: <span class="string">"es is very bad"</span>,</span><br><span class="line">  <span class="attr">"author_id"</span>: <span class="number">111</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>搜索需求：title必须包含elasticsearch，content可以包含elasticsearch也可以不包含，author_id必须不为111</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">GET /website/article/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"bool"</span>: &#123;</span><br><span class="line">      <span class="attr">"must"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"match"</span>: &#123;</span><br><span class="line">            <span class="attr">"title"</span>: <span class="string">"elasticsearch"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"should"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"match"</span>: &#123;</span><br><span class="line">            <span class="attr">"content"</span>: <span class="string">"elasticsearch"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"must_not"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"match"</span>: &#123;</span><br><span class="line">            <span class="attr">"author_id"</span>: <span class="string">"111"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">23</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">0.25316024</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"website"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"article"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">0.25316024</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"my elasticsearch article"</span>,</span><br><span class="line">          <span class="attr">"content"</span>: <span class="string">"es is very good"</span>,</span><br><span class="line">          <span class="attr">"author_id"</span>: <span class="number">110</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="查询和过滤（query-amp-filter"><a href="#查询和过滤（query-amp-filter" class="headerlink" title="查询和过滤（query &amp; filter)"></a>查询和过滤（query &amp; filter)</h1><p>在ES中查找数据，除了查询还有过滤</p><h2 id="query与filter示例"><a href="#query与filter示例" class="headerlink" title="query与filter示例"></a>query与filter示例</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">PUT /company/employee/2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"address"</span>: &#123;</span><br><span class="line">    <span class="attr">"country"</span>: <span class="string">"china"</span>,</span><br><span class="line">    <span class="attr">"province"</span>: <span class="string">"jiangsu"</span>,</span><br><span class="line">    <span class="attr">"city"</span>: <span class="string">"nanjing"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"tom"</span>,</span><br><span class="line">  <span class="attr">"age"</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="attr">"join_date"</span>: <span class="string">"2016-01-01"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /company/employee/3</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"address"</span>: &#123;</span><br><span class="line">    <span class="attr">"country"</span>: <span class="string">"china"</span>,</span><br><span class="line">    <span class="attr">"province"</span>: <span class="string">"shanxi"</span>,</span><br><span class="line">    <span class="attr">"city"</span>: <span class="string">"xian"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"marry"</span>,</span><br><span class="line">  <span class="attr">"age"</span>: <span class="number">35</span>,</span><br><span class="line">  <span class="attr">"join_date"</span>: <span class="string">"2015-01-01"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>搜索请求：年龄必须大于等于30，同时join_date必须是2016-01-01</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">GET /company/employee/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"bool"</span>: &#123;</span><br><span class="line">      <span class="attr">"must"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"match"</span>: &#123;</span><br><span class="line">            <span class="attr">"join_date"</span>: <span class="string">"2016-01-01"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"filter"</span>: &#123;</span><br><span class="line">        <span class="attr">"range"</span>: &#123;</span><br><span class="line">          <span class="attr">"age"</span>: &#123;</span><br><span class="line">            <span class="attr">"gte"</span>: <span class="number">30</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="filter与query对比"><a href="#filter与query对比" class="headerlink" title="filter与query对比"></a>filter与query对比</h2><ul><li>filter：仅仅只是按照搜索条件过滤出需要的数据而已，不计算任何相关度分数，对相关度没有任何影响。</li><li>query：会去计算每个document相对于搜索条件的相关度，并按照相关度进行排序。</li></ul><p>一般来说，如果你是在进行搜索，需要将最匹配搜索条件的数据先返回，那么用query；如果你只是要根据一些条件筛选出一部分数据，不关注其排序，那么用filter。</p><h2 id="filter与query性能比较"><a href="#filter与query性能比较" class="headerlink" title="filter与query性能比较"></a>filter与query性能比较</h2><ul><li>filter：不需要计算相关度分数，不需要按照相关度分数进行排序，同时还有内置的自动cache最常使用filter的数据</li><li>query：相反，要计算相关度分数，按照分数进行排序，而且无法cache结果</li></ul><h1 id="query搜索实战"><a href="#query搜索实战" class="headerlink" title="query搜索实战"></a>query搜索实战</h1><h2 id="match-all查询"><a href="#match-all查询" class="headerlink" title="match all查询"></a>match all查询</h2><p>match_all 查询简单的 匹配所有文档。在没有指定查询方式时，它是默认的查询：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="match查询"><a href="#match查询" class="headerlink" title="match查询"></a>match查询</h2><p>无论你在任何字段上进行的是全文搜索还是精确查询，match 查询是你可用的标准查询。</p><p>如果你在一个全文字段上使用 match 查询，在执行查询前，它将用正确的分析器去分析查询字符串，如果在一个精确值的字段上使用它， 例如数字、日期、布尔或者一个 not_analyzed 字符串字段，那么它将会精确匹配给定的值。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>: &#123; <span class="attr">"match"</span>: &#123; <span class="attr">"title"</span>: <span class="string">"my elasticsearch article"</span> &#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对于精确值的查询，你可能需要使用 filter 语句来取代 query，因为 filter 将会被缓存。</p></blockquote><h2 id="multi-match查询"><a href="#multi-match查询" class="headerlink" title="multi match查询"></a>multi match查询</h2><p>multi_match 查询可以在多个字段上执行相同的 match 查询：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"multi_match"</span>: &#123;</span><br><span class="line">        <span class="attr">"query"</span>:    <span class="string">"full text search"</span>,</span><br><span class="line">        <span class="attr">"fields"</span>:   [ <span class="string">"title"</span>, <span class="string">"body"</span> ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="range-查询"><a href="#range-查询" class="headerlink" title="range 查询"></a>range 查询</h2><p><code>range</code> 查询找出那些落在指定区间内的数字或者时间：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"range"</span>: &#123;</span><br><span class="line">        <span class="attr">"age"</span>: &#123;</span><br><span class="line">            <span class="attr">"gte"</span>:  <span class="number">20</span>,</span><br><span class="line">            <span class="attr">"lt"</span>:   <span class="number">30</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被允许的操作符如下：</p><p>gt 大于<br>gte 大于等于<br>lt 小于<br>lte 小于等于        </p><h2 id="term-查询"><a href="#term-查询" class="headerlink" title="term 查询"></a>term 查询</h2><p><code>term</code> 查询被用于精确值 匹配，这些精确值可能是数字、时间、布尔或者那些 not_analyzed 的字符串：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"term"</span>: &#123; <span class="attr">"age"</span>:    <span class="number">26</span>           &#125;&#125;</span><br><span class="line">&#123; <span class="attr">"term"</span>: &#123; <span class="attr">"date"</span>:   <span class="string">"2014-09-01"</span> &#125;&#125;</span><br><span class="line">&#123; <span class="attr">"term"</span>: &#123; <span class="attr">"public"</span>: <span class="literal">true</span>         &#125;&#125;</span><br><span class="line">&#123; <span class="attr">"term"</span>: &#123; <span class="attr">"tag"</span>:    <span class="string">"full_text"</span>  &#125;&#125;</span><br></pre></td></tr></table></figure><p><code>term</code> 查询对于输入的文本不 分析 ，所以它将给定的值进行精确查询。</p><h2 id="terms查询"><a href="#terms查询" class="headerlink" title="terms查询"></a>terms查询</h2><p><code>terms</code> 查询和 <code>term</code> 查询一样，但它允许你指定多值进行匹配。如果这个字段包含了指定值中的任何一个值，那么这个文档满足条件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>: &#123; <span class="attr">"terms"</span>: &#123; <span class="attr">"tag"</span>: [ <span class="string">"search"</span>, <span class="string">"full_text"</span>, <span class="string">"nosql"</span> ] &#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和 term 查询一样，terms 查询对于输入的文本不分析。它查询那些精确匹配的值（包括在大小写、重音、空格等方面的差异）。</p><h2 id="exists-查询"><a href="#exists-查询" class="headerlink" title="exists 查询"></a>exists 查询</h2><p>这是2.x中的查询，现在已经不提供了，但是可以用filter来完成同样的效果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /company/employee/_search</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">      <span class="attr">"bool"</span>: &#123;</span><br><span class="line">        <span class="attr">"filter"</span>: &#123;</span><br><span class="line">          <span class="attr">"exists"</span>: &#123;</span><br><span class="line">            <span class="attr">"field"</span>: <span class="string">"age"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h1><p>现实的查询需求从来都没有那么简单；它们需要在多个字段上查询多种多样的文本，并且根据一系列的标准来过滤。为了构建类似的高级查询，你需要一种能够将多查询组合成单一查询的查询方法。</p><p>你可以用 <code>bool</code> 查询来实现你的需求。这种查询将多查询组合在一起，成为用户自己想要的布尔查询。它接收以下参数：</p><ul><li>must<br>  文档 <em>必须</em> 匹配这些条件才能被包含进来。</li><li>must_not<br>  文档 <em>必须不</em> 匹配这些条件才能被包含进来。</li><li>should<br>  如果满足这些语句中的任意语句，将增加 <code>_score</code> ，否则，无任何影响。它们主要用于修正每个文档的相关性得分。</li><li>filter<br>  <em>必须</em> 匹配，但它以不评分、过滤模式来进行。这些语句对评分没有贡献，只是根据过滤标准来排除或包含文档。</li></ul><p>由于这是我们看到的第一个包含多个查询的查询，所以有必要讨论一下相关性得分是如何组合的。每一个子查询都独自地计算文档的相关性得分。一旦他们的得分被计算出来， bool 查询就将这些得分进行合并并且返回一个代表整个布尔操作的得分。</p><p>下面的查询用于查找 title 字段匹配 how to make millions 并且不被标识为 spam 的文档。那些被标识为 starred 或在2014之后的文档，将比另外那些文档拥有更高的排名。如果 _两者_ 都满足，那么它排名将更高：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"bool"</span>: &#123;</span><br><span class="line">        <span class="attr">"must"</span>:     &#123; <span class="attr">"match"</span>: &#123; <span class="attr">"title"</span>: <span class="string">"how to make millions"</span> &#125;&#125;,</span><br><span class="line">        <span class="attr">"must_not"</span>: &#123; <span class="attr">"match"</span>: &#123; <span class="attr">"tag"</span>:   <span class="string">"spam"</span> &#125;&#125;,</span><br><span class="line">        <span class="attr">"should"</span>: [</span><br><span class="line">            &#123; <span class="attr">"match"</span>: &#123; <span class="attr">"tag"</span>: <span class="string">"starred"</span> &#125;&#125;,</span><br><span class="line">            &#123; <span class="attr">"range"</span>: &#123; <span class="attr">"date"</span>: &#123; <span class="attr">"gte"</span>: <span class="string">"2014-01-01"</span> &#125;&#125;&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="增加带过滤器（filter）的查询"><a href="#增加带过滤器（filter）的查询" class="headerlink" title="增加带过滤器（filter）的查询"></a>增加带过滤器（filter）的查询</h2><p>如果我们不想因为文档的时间而影响得分，可以用 filter 语句来重写前面的例子：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"bool"</span>: &#123;</span><br><span class="line">        <span class="attr">"must"</span>:     &#123; <span class="attr">"match"</span>: &#123; <span class="attr">"title"</span>: <span class="string">"how to make millions"</span> &#125;&#125;,</span><br><span class="line">        <span class="attr">"must_not"</span>: &#123; <span class="attr">"match"</span>: &#123; <span class="attr">"tag"</span>:   <span class="string">"spam"</span> &#125;&#125;,</span><br><span class="line">        <span class="attr">"should"</span>: [</span><br><span class="line">            &#123; <span class="attr">"match"</span>: &#123; <span class="attr">"tag"</span>: <span class="string">"starred"</span> &#125;&#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"filter"</span>: &#123;</span><br><span class="line">          <span class="attr">"range"</span>: &#123; <span class="attr">"date"</span>: &#123; <span class="attr">"gte"</span>: <span class="string">"2014-01-01"</span> &#125;&#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="constant-score查询"><a href="#constant-score查询" class="headerlink" title="constant_score查询"></a>constant_score查询</h2><p>尽管没有 bool 查询使用这么频繁，constant_score 查询也是你工具箱里有用的查询工具。它将一个不变的常量评分应用于所有匹配的文档。它被经常用于你只需要执行一个 filter 而没有其它查询（例如，评分查询）的情况下。</p><p>可以使用它来取代只有 filter 语句的 bool 查询。在性能上是完全相同的，但对于提高查询简洁性和清晰度有很大帮助。</p><p>{<br>    “constant_score”:   {<br>        “filter”: {<br>            “term”: { “category”: “ebooks” }<br>        }<br>    }<br>}</p><blockquote><p>term 查询被放置在 constant_score 中，转成不评分的 filter。这种方式可以用来取代只有 filter 语句的 bool 查询。</p></blockquote><h1 id="验证查询"><a href="#验证查询" class="headerlink" title="验证查询"></a>验证查询</h1><p>查询可以变得非常的复杂，尤其 和不同的分析器与不同的字段映射结合时，理解起来就有点困难了。不过 <code>validate-query</code> API 可以用来验证查询是否合法。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /test_index/test_type/_validate/query?explain</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"math"</span>: &#123;</span><br><span class="line">      <span class="attr">"test_field"</span>: <span class="string">"test"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"valid"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"error"</span>: <span class="string">"org.elasticsearch.common.ParsingException: no [query] registered for [math]"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说没有<code>math</code>这个查询，一看是单词写错了，应该是<code>match</code>。</p><p>这个一般用在那种特别复杂庞大的搜索下，比如写了上百行的搜索，这个时候可以先用validate api去验证一下，搜索是否合法。</p><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><p>为了按照相关性来排序，需要将相关性表示为一个数值。在 Elasticsearch 中， <em>相关性得分</em> 由一个浮点数进行表示，并在搜索结果中通过 <code>_score</code> 参数返回， 默认排序是 <code>_score</code> 降序。</p><p>有时，相关性评分对你来说并没有意义。例如，下面的查询返回所有 user_id 字段包含 1 的结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span> : &#123;</span><br><span class="line">        <span class="attr">"bool"</span> : &#123;</span><br><span class="line">            <span class="attr">"filter"</span> : &#123;</span><br><span class="line">                <span class="attr">"term"</span> : &#123;</span><br><span class="line">                    <span class="attr">"user_id"</span> : <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定制排序规则"><a href="#定制排序规则" class="headerlink" title="定制排序规则"></a>定制排序规则</h2><p>有时候我们查询的数据需要根据时间，数量之类的排序。我们可以使用 sort 参数进行实现：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">GET /company/employee/_search </span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"constant_score"</span>: &#123;</span><br><span class="line">      <span class="attr">"filter"</span>: &#123;</span><br><span class="line">        <span class="attr">"range"</span>: &#123;</span><br><span class="line">          <span class="attr">"age"</span>: &#123;</span><br><span class="line">            <span class="attr">"gte"</span>: <span class="number">30</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"sort"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"join_date"</span>: &#123;</span><br><span class="line">        <span class="attr">"order"</span>: <span class="string">"asc"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="String排序"><a href="#String排序" class="headerlink" title="String排序"></a>String排序</h2><p>如果对一个string field进行排序，结果往往不准确，因为分词后是多个单词，再排序就不是我们想要的结果了。</p><p>通常解决方案是，将一个string field建立两次索引，一个分词，用来进行搜索；一个不分词，用来进行排序。</p><p>实验一下，重新建索引，为<code>title</code>设置一个分词的，和一个不分词的。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">DELETE /website</span><br><span class="line">PUT /website </span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"article"</span>: &#123;</span><br><span class="line">      <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"title"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"fields"</span>: &#123;</span><br><span class="line">            <span class="attr">"raw"</span>: &#123;</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"fielddata"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"content"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"text"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"post_date"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"date"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"author_id"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"long"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在 ES2.x 版本字符串数据是没有 keyword 和 text 类型的，只有string类型，ES更新到5版本后，取消了 string 数据类型，代替它的是 keyword 和 text 数据类型，那么 keyword 和 text 有什么区别了？<br>Text 数据类型被用来索引长文本，比如说电子邮件的主体部分或者一款产品的介绍。这些文本会被分析，在建立索引前会将这些文本进行分词，转化为词的组合，建立索引。允许 ES来检索这些词语。text 数据类型不能用来排序和聚合。<br>Keyword 数据类型用来建立电子邮箱地址、姓名、邮政编码和标签等数据，不需要进行分词。可以被用来检索过滤、排序和聚合。keyword 类型字段只能用本身来进行检索。</p></blockquote><p>准备数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PUT /website/article/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"first article"</span>,</span><br><span class="line">  <span class="attr">"content"</span>: <span class="string">"this is my first article"</span>,</span><br><span class="line">  <span class="attr">"post_date"</span>: <span class="string">"2017-01-01"</span>,</span><br><span class="line">  <span class="attr">"author_id"</span>: <span class="number">110</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /website/article/2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"second article"</span>,</span><br><span class="line">  <span class="attr">"content"</span>: <span class="string">"this is my second article"</span>,</span><br><span class="line">  <span class="attr">"post_date"</span>: <span class="string">"2017-01-02"</span>,</span><br><span class="line">  <span class="attr">"author_id"</span>: <span class="number">110</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>搜索：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">GET /website/article/_search</span><br><span class="line">&#123; </span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"sort"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"title"</span>: &#123;</span><br><span class="line">        <span class="attr">"order"</span>: <span class="string">"desc"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET /website/article/_search</span><br><span class="line">&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"sort"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"title.raw"</span>: &#123;</span><br><span class="line">        <span class="attr">"order"</span>: <span class="string">"desc"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="相关性评分"><a href="#相关性评分" class="headerlink" title="相关性评分"></a>相关性评分</h1><p>每个文档都有相关性评分，用一个正浮点数字段 <code>_score</code> 来表示 。 <code>_score</code> 的评分越高，相关性越高。</p><p>查询语句会为每个文档生成一个 _score 字段。简单来说，就是计算出一个索引中的文本，与搜索文本他们之间的关联匹配程度。</p><p>在 Elasticsearch 中, 标准的算法是 Term Frequency/Inverse Document Frequency, 简写为 TF/IDF, (5.0 以上版本, 改为了据说更先进的 BM25 算法)</p><ul><li>Term frequency：搜索文本中的各个词条在field文本中出现了多少次，出现次数越多，就越相关</li><li>Inverse document frequency：搜索文本中的各个词条在整个索引的所有文档中出现了多少次，出现的次数越多，就越不相关</li><li>Field-length norm：field长度越长，相关度越弱</li></ul><h2 id="理解评分标准"><a href="#理解评分标准" class="headerlink" title="理解评分标准"></a>理解评分标准</h2><p>当调试一条复杂的查询语句时， 想要理解 <code>_score</code> 究竟是如何计算是比较困难的。Elasticsearch 在 每个查询语句中都有一个 explain 参数，将 explain 设为 true 就可以得到更详细的信息。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line">GET /test_index/test_type/_search?explain</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"test_field"</span>: <span class="string">"test"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">0.25316024</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_shard"</span>: <span class="string">"[test_index][1]"</span>,</span><br><span class="line">        <span class="attr">"_node"</span>: <span class="string">"LrOx5yeUQQaYbF4L13z5Zw"</span>,</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"8"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">0.25316024</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"test_field"</span>: <span class="string">"test client 2"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"_explanation"</span>: &#123;</span><br><span class="line">          <span class="attr">"value"</span>: <span class="number">0.25316024</span>,</span><br><span class="line">          <span class="attr">"description"</span>: <span class="string">"sum of:"</span>,</span><br><span class="line">          <span class="attr">"details"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">"value"</span>: <span class="number">0.25316024</span>,</span><br><span class="line">              <span class="attr">"description"</span>: <span class="string">"weight(test_field:test in 0) [PerFieldSimilarity], result of:"</span>,</span><br><span class="line">              <span class="attr">"details"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">"value"</span>: <span class="number">0.25316024</span>,</span><br><span class="line">                  <span class="attr">"description"</span>: <span class="string">"score(doc=0,freq=1.0 = termFreq=1.0\n), product of:"</span>,</span><br><span class="line">                  <span class="attr">"details"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                      <span class="attr">"value"</span>: <span class="number">0.2876821</span>,</span><br><span class="line">                      <span class="attr">"description"</span>: <span class="string">"idf, computed as log(1 + (docCount - docFreq + 0.5) / (docFreq + 0.5)) from:"</span>,</span><br><span class="line">                      <span class="attr">"details"</span>: [</span><br><span class="line">                        &#123;</span><br><span class="line">                          <span class="attr">"value"</span>: <span class="number">1</span>,</span><br><span class="line">                          <span class="attr">"description"</span>: <span class="string">"docFreq"</span>,</span><br><span class="line">                          <span class="attr">"details"</span>: []</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                          <span class="attr">"value"</span>: <span class="number">1</span>,</span><br><span class="line">                          <span class="attr">"description"</span>: <span class="string">"docCount"</span>,</span><br><span class="line">                          <span class="attr">"details"</span>: []</span><br><span class="line">                        &#125;</span><br><span class="line">                      ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      <span class="attr">"value"</span>: <span class="number">0.88</span>,</span><br><span class="line">                      <span class="attr">"description"</span>: <span class="string">"tfNorm, computed as (freq * (k1 + 1)) / (freq + k1 * (1 - b + b * fieldLength / avgFieldLength)) from:"</span>,</span><br><span class="line">                      <span class="attr">"details"</span>: [</span><br><span class="line">                        &#123;</span><br><span class="line">                          <span class="attr">"value"</span>: <span class="number">1</span>,</span><br><span class="line">                          <span class="attr">"description"</span>: <span class="string">"termFreq=1.0"</span>,</span><br><span class="line">                          <span class="attr">"details"</span>: []</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                          <span class="attr">"value"</span>: <span class="number">1.2</span>,</span><br><span class="line">                          <span class="attr">"description"</span>: <span class="string">"parameter k1"</span>,</span><br><span class="line">                          <span class="attr">"details"</span>: []</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                          <span class="attr">"value"</span>: <span class="number">0.75</span>,</span><br><span class="line">                          <span class="attr">"description"</span>: <span class="string">"parameter b"</span>,</span><br><span class="line">                          <span class="attr">"details"</span>: []</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                          <span class="attr">"value"</span>: <span class="number">3</span>,</span><br><span class="line">                          <span class="attr">"description"</span>: <span class="string">"avgFieldLength"</span>,</span><br><span class="line">                          <span class="attr">"details"</span>: []</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                          <span class="attr">"value"</span>: <span class="number">4</span>,</span><br><span class="line">                          <span class="attr">"description"</span>: <span class="string">"fieldLength"</span>,</span><br><span class="line">                          <span class="attr">"details"</span>: []</span><br><span class="line">                        &#125;</span><br><span class="line">                      ]</span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">"value"</span>: <span class="number">0</span>,</span><br><span class="line">              <span class="attr">"description"</span>: <span class="string">"match on required clause, product of:"</span>,</span><br><span class="line">              <span class="attr">"details"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">"value"</span>: <span class="number">0</span>,</span><br><span class="line">                  <span class="attr">"description"</span>: <span class="string">"# clause"</span>,</span><br><span class="line">                  <span class="attr">"details"</span>: []</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">"value"</span>: <span class="number">1</span>,</span><br><span class="line">                  <span class="attr">"description"</span>: <span class="string">"*:*, product of:"</span>,</span><br><span class="line">                  <span class="attr">"details"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                      <span class="attr">"value"</span>: <span class="number">1</span>,</span><br><span class="line">                      <span class="attr">"description"</span>: <span class="string">"boost"</span>,</span><br><span class="line">                      <span class="attr">"details"</span>: []</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      <span class="attr">"value"</span>: <span class="number">1</span>,</span><br><span class="line">                      <span class="attr">"description"</span>: <span class="string">"queryNorm"</span>,</span><br><span class="line">                      <span class="attr">"details"</span>: []</span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_shard"</span>: <span class="string">"[test_index][3]"</span>,</span><br><span class="line">        <span class="attr">"_node"</span>: <span class="string">"LrOx5yeUQQaYbF4L13z5Zw"</span>,</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"7"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">0.25316024</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"test_field"</span>: <span class="string">"test client 2"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"_explanation"</span>: &#123;</span><br><span class="line">          <span class="attr">"value"</span>: <span class="number">0.25316024</span>,</span><br><span class="line">          <span class="attr">"description"</span>: <span class="string">"sum of:"</span>,</span><br><span class="line">          <span class="attr">"details"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">"value"</span>: <span class="number">0.25316024</span>,</span><br><span class="line">              <span class="attr">"description"</span>: <span class="string">"weight(test_field:test in 0) [PerFieldSimilarity], result of:"</span>,</span><br><span class="line">              <span class="attr">"details"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">"value"</span>: <span class="number">0.25316024</span>,</span><br><span class="line">                  <span class="attr">"description"</span>: <span class="string">"score(doc=0,freq=1.0 = termFreq=1.0\n), product of:"</span>,</span><br><span class="line">                  <span class="attr">"details"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                      <span class="attr">"value"</span>: <span class="number">0.2876821</span>,</span><br><span class="line">                      <span class="attr">"description"</span>: <span class="string">"idf, computed as log(1 + (docCount - docFreq + 0.5) / (docFreq + 0.5)) from:"</span>,</span><br><span class="line">                      <span class="attr">"details"</span>: [</span><br><span class="line">                        &#123;</span><br><span class="line">                          <span class="attr">"value"</span>: <span class="number">1</span>,</span><br><span class="line">                          <span class="attr">"description"</span>: <span class="string">"docFreq"</span>,</span><br><span class="line">                          <span class="attr">"details"</span>: []</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                          <span class="attr">"value"</span>: <span class="number">1</span>,</span><br><span class="line">                          <span class="attr">"description"</span>: <span class="string">"docCount"</span>,</span><br><span class="line">                          <span class="attr">"details"</span>: []</span><br><span class="line">                        &#125;</span><br><span class="line">                      ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      <span class="attr">"value"</span>: <span class="number">0.88</span>,</span><br><span class="line">                      <span class="attr">"description"</span>: <span class="string">"tfNorm, computed as (freq * (k1 + 1)) / (freq + k1 * (1 - b + b * fieldLength / avgFieldLength)) from:"</span>,</span><br><span class="line">                      <span class="attr">"details"</span>: [</span><br><span class="line">                        &#123;</span><br><span class="line">                          <span class="attr">"value"</span>: <span class="number">1</span>,</span><br><span class="line">                          <span class="attr">"description"</span>: <span class="string">"termFreq=1.0"</span>,</span><br><span class="line">                          <span class="attr">"details"</span>: []</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                          <span class="attr">"value"</span>: <span class="number">1.2</span>,</span><br><span class="line">                          <span class="attr">"description"</span>: <span class="string">"parameter k1"</span>,</span><br><span class="line">                          <span class="attr">"details"</span>: []</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                          <span class="attr">"value"</span>: <span class="number">0.75</span>,</span><br><span class="line">                          <span class="attr">"description"</span>: <span class="string">"parameter b"</span>,</span><br><span class="line">                          <span class="attr">"details"</span>: []</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                          <span class="attr">"value"</span>: <span class="number">3</span>,</span><br><span class="line">                          <span class="attr">"description"</span>: <span class="string">"avgFieldLength"</span>,</span><br><span class="line">                          <span class="attr">"details"</span>: []</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                          <span class="attr">"value"</span>: <span class="number">4</span>,</span><br><span class="line">                          <span class="attr">"description"</span>: <span class="string">"fieldLength"</span>,</span><br><span class="line">                          <span class="attr">"details"</span>: []</span><br><span class="line">                        &#125;</span><br><span class="line">                      ]</span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">"value"</span>: <span class="number">0</span>,</span><br><span class="line">              <span class="attr">"description"</span>: <span class="string">"match on required clause, product of:"</span>,</span><br><span class="line">              <span class="attr">"details"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">"value"</span>: <span class="number">0</span>,</span><br><span class="line">                  <span class="attr">"description"</span>: <span class="string">"# clause"</span>,</span><br><span class="line">                  <span class="attr">"details"</span>: []</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">"value"</span>: <span class="number">1</span>,</span><br><span class="line">                  <span class="attr">"description"</span>: <span class="string">"*:*, product of:"</span>,</span><br><span class="line">                  <span class="attr">"details"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                      <span class="attr">"value"</span>: <span class="number">1</span>,</span><br><span class="line">                      <span class="attr">"description"</span>: <span class="string">"boost"</span>,</span><br><span class="line">                      <span class="attr">"details"</span>: []</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      <span class="attr">"value"</span>: <span class="number">1</span>,</span><br><span class="line">                      <span class="attr">"description"</span>: <span class="string">"queryNorm"</span>,</span><br><span class="line">                      <span class="attr">"details"</span>: []</span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它提供了 <code>_explanation</code> 。每个 入口都包含一个 description 、 value 、 details 字段，它分别告诉你计算的类型、计算结果和任何我们需要的计算细节。</p><p>因为我测试的版本是5.2，所以从结果看出并不是上面介绍的TF/IDF算法，大致可以看到IDF，依然存在，但是Term frequency和Field-length norm则改为了一个组合算法(tfNorm)。</p><p>具体可以参考文章 <a href="https://ruby-china.org/topics/31934" target="_blank" rel="noopener">ElasticSearch 的分数 (_score) 是怎么计算得出 (2.X &amp; 5.X)</a></p><ul><li>tfNorm反映的该term在所有满足条件的doc中field中的重要性，一般来说，相同的freq 下，field的长度越短，那么取值就越高。</li><li>IDF反映的是term的影响因子，如果docCount很大，docFreq很小，标示该term在doc之间具有很好的分辨力，当然IDF值也就越大。</li></ul><h2 id="文档是如何被匹配上的"><a href="#文档是如何被匹配上的" class="headerlink" title="文档是如何被匹配上的"></a>文档是如何被匹配上的</h2><p>当 explain 选项加到某一文档上时， explain api 会帮助你理解为何这个文档会被匹配，更重要的是，一个文档为何没有被匹配。</p><p>请求路径为 /index/type/id/_explain ，如下所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /test_index/test_type/7/_explain</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"test_field"</span>: <span class="string">"world"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不只是我们之前看到的充分解释 ，我们现在有了一个 description 元素，它将告诉我们：</p><p><code>&quot;description&quot;: &quot;no match on required clause (test_field:world)&quot;,</code></p><h1 id="Doc-Values"><a href="#Doc-Values" class="headerlink" title="Doc Values"></a>Doc Values</h1><p>搜索的时候，要依靠倒排索引；排序的时候，需要依靠正排索引，看到每个document的每个field，然后进行排序，所谓的正排索引，其实就是doc values。在建立索引的时候，一方面会建立倒排索引，以供搜索用；一方面会建立正排索引，也就是doc values，以供排序，聚合，过滤等操作使用。doc values是被保存在磁盘上的，此时如果内存足够，os会自动将其缓存在内存中，性能还是会很高；如果内存不足够，os会将其写入磁盘上。</p><h1 id="分布式检索过程"><a href="#分布式检索过程" class="headerlink" title="分布式检索过程"></a>分布式检索过程</h1><p>讨论一下在分布式环境中搜索是怎么执行的，搜索被执行成一个两阶段过程，我们称之为 query then fetch 。</p><h2 id="查询阶段"><a href="#查询阶段" class="headerlink" title="查询阶段"></a>查询阶段</h2><p>在初始 <em>查询阶段</em> 时， 查询会广播到索引中每一个分片拷贝（主分片或者副本分片）。 每个分片在本地执行搜索并构建一个匹配文档的 <em>优先队列</em>。</p><blockquote><h2 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h2><p>一个 优先队列 仅仅是一个存有 top-n 匹配文档的有序列表。优先队列的大小取决于分页参数 from 和 size 。例如，如下搜索请求将需要足够大的优先队列来放入100条文档。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"from"</span>: <span class="number">90</span>,</span><br><span class="line">    <span class="attr">"size"</span>: <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p><strong>查询过程分布式搜索</strong></p><p><img src="https://www.elastic.co/guide/cn/elasticsearch/guide/current/images/elas_0901.png" alt="查询过程分布式搜索"></p><p>查询阶段包含以下三个步骤:</p><ol><li>客户端发送一个 search 请求到 Node 3 ， Node 3 会创建一个大小为 from + size 的空优先队列。</li><li>Node 3 将查询请求转发到索引的每个主分片或副本分片中。每个分片在本地执行查询并添加结果到大小为 from + size 的本地有序优先队列中。</li><li>每个分片返回各自优先队列中所有文档的 ID 和排序值给协调节点，也就是 Node 3 ，它合并这些值到自己的优先队列中来产生一个全局排序后的结果列表。</li></ol><p>当一个搜索请求被发送到某个节点时，这个节点就变成了协调节点。 这个节点的任务是广播查询请求到所有相关分片并将它们的响应整合成全局排序后的结果集合，这个结果集合会返回给客户端。</p><p>这个也跟前面说的deep paging问题有关，from + size 分页太深，每个分片都要返回大量的数据给协调节点，会消耗大量的带宽，内存，cpu。</p><p><strong>replica shard如何增加查询吞吐量</strong></p><p>第一步是广播请求到索引中每一个节点的分片拷贝。查询请求可以被某个主分片或某个副本分片处理， 这就是为什么更多的副本（当结合更多的硬件）能够增加搜索吞吐率。 协调节点将在之后的请求中轮询所有的分片拷贝来分摊负载。</p><h2 id="取回阶段"><a href="#取回阶段" class="headerlink" title="取回阶段"></a>取回阶段</h2><p>查询阶段标识哪些文档满足 搜索请求，但是我们仍然需要取回这些文档。这是取回阶段的任务, 正如 图 “分布式搜索的取回阶段” 所展示的。</p><p><img src="https://www.elastic.co/guide/cn/elasticsearch/guide/current/images/elas_0902.png" alt="分布式搜索的取回阶段"></p><p>分布式阶段由以下步骤构成：</p><ol><li>协调节点辨别出哪些文档需要被取回并向相关的分片提交多个 GET 请求。</li><li>每个分片加载并 丰富 文档，如果有需要的话，接着返回文档给协调节点。</li><li>一旦所有的文档都被取回了，协调节点返回结果给客户端。</li></ol><p>协调节点首先决定哪些文档 确实 需要被取回。例如，如果我们的查询指定了 { “from”: 90, “size”: 10 } ，最初的90个结果会被丢弃，只有从第91个开始的10个结果需要被取回。这些文档可能来自和最初搜索请求有关的一个、多个甚至全部分片。</p><p>协调节点给持有相关文档的每个分片创建一个 multi-get request ，并发送请求给同样处理查询阶段的分片副本。</p><p>一般搜索，如果不加from和size，就默认搜索前10条，按照_score排序。</p><h1 id="搜索参数"><a href="#搜索参数" class="headerlink" title="搜索参数"></a>搜索参数</h1><p>有几个搜索参数可以影响搜索过程。</p><h2 id="preference"><a href="#preference" class="headerlink" title="preference"></a>preference</h2><p>preference 参数允许用来控制由哪些分片或节点来处理搜索请求。 它接受像 <code>_primary</code>, <code>_primary_first</code>, <code>_local</code>, <code>_only_node:xyz</code>, <code>_prefer_node:xyz</code>, 和 <code>_shards:2,3</code> 这样的值。</p><blockquote><h2 id="Bouncing-Results"><a href="#Bouncing-Results" class="headerlink" title="Bouncing Results"></a>Bouncing Results</h2><p>想象一下有两个文档有同样值的时间戳字段，搜索结果用 timestamp 字段来排序。 由于搜索请求是在所有有效的分片副本间轮询的，那就有可能发生主分片处理请求时，这两个文档是一种顺序， 而副本分片处理请求时又是另一种顺序。</p></blockquote><blockquote><p>这就是所谓的 bouncing results 问题: 每次用户刷新页面，搜索结果表现是不同的顺序。 让同一个用户始终使用同一个分片，这样可以避免这种问题， 可以设置 preference 参数为一个特定的任意值比如用户会话ID来解决。</p></blockquote><h2 id="timeout"><a href="#timeout" class="headerlink" title="timeout"></a>timeout</h2><p>通常分片处理完它所有的数据后再把结果返回给协同节点，协同节点把收到的所有结果合并为最终结果。</p><p>这意味着花费的时间是最慢分片的处理时间加结果合并的时间。如果有一个节点有问题，就会导致所有的响应缓慢。</p><p>参数 <code>timeout</code> 告诉 分片允许处理数据的最大时间。如果没有足够的时间处理所有数据，这个分片的结果可以是部分的，甚至是空数据。</p><h2 id="routing"><a href="#routing" class="headerlink" title="routing"></a>routing</h2><p>定制参数 routing ，它能够在索引时提供来确保相关的文档，比如属于某个用户的文档被存储在某个分片上。 在搜索的时候，不用搜索索引的所有分片，而是通过指定几个 routing 值来限定只搜索几个相关的分片，默认是<code>_id</code>路由，也可以指定字段<code>?routing=user_1,user2</code>。</p><h2 id="search-type"><a href="#search-type" class="headerlink" title="search_type"></a>search_type</h2><p>缺省的搜索类型是 query_then_fetch 。 在某些情况下，你可能想明确设置 search_type 为 dfs_query_then_fetch 来改善相关性精确度：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /_search?search_type=dfs_query_then_fetch</span><br></pre></td></tr></table></figure><p>搜索类型 dfs_query_then_fetch 有预查询阶段，这个阶段可以从所有相关分片获取词频来计算全局词频。 </p><h1 id="scroll-查询"><a href="#scroll-查询" class="headerlink" title="scroll 查询"></a>scroll 查询</h1><p>如果是用from + size的查询方式，会有我们之前说的Deep Paging问题，而且ES默认也限制了size的大小最多只能是1w条。如果一次性要查出来比如10万条数据，那么性能会很差，此时一般会采取用scoll滚动查询，一批一批的查，直到所有数据都查询完处理完。</p><p>使用scoll滚动搜索，可以先搜索一批数据，然后下次再搜索一批数据，以此类推，直到搜索出全部的数据来。<br>scoll搜索会在第一次搜索的时候，保存一个当时的视图快照，之后只会基于该旧的视图快照提供数据搜索，如果这个期间数据变更，是不会让用户看到的。<br>采用基于_doc进行排序的方式，性能较高。<br>每次发送scroll请求，我们还需要指定一个scoll参数，指定一个时间窗口，每次搜索请求只要在这个时间窗口内能完成就可以了。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">GET /test_index/test_type/_search?scroll=1m</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"sort"</span>: [ <span class="string">"_doc"</span> ],</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_scroll_id"</span>: <span class="string">"DnF1ZXJ5VGhlbkZldGNoBQAAAAAAAOOqFkxyT3g1eWVVUVFhWWJGNEwxM3o1WncAAAAAAADjqxZMck94NXllVVFRYVliRjRMMTN6NVp3AAAAAAAA46wWTHJPeDV5ZVVRUWFZYkY0TDEzejVadwAAAAAAAOOuFkxyT3g1eWVVUVFhWWJGNEwxM3o1WncAAAAAAADjrRZMck94NXllVVFRYVliRjRMMTN6NVp3"</span>,</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">3</span>,</span><br><span class="line">  .....</span><br></pre></td></tr></table></figure><p>这个查询的返回结果包括一个字段 <code>_scroll_id</code>， 它是一个base64编码的长字符串 (((“scroll_id”))) 。 现在我们能传递字段 <code>_scroll_id</code> 到 <code>_search/scroll</code>查询接口获取下一批结果：下一次再发送scoll请求的时候，必须带上这个<code>scoll_id</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET /_search/scroll</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"scroll"</span>: <span class="string">"1m"</span>, </span><br><span class="line">    <span class="attr">"scroll_id"</span> : <span class="string">"DnF1ZXJ5VGhlbkZldGNoBQAAAAAAAOOqFkxyT3g1eWVVUVFhWWJGNEwxM3o1WncAAAAAAADjqxZMck94NXllVVFRYVliRjRMMTN6NVp3AAAAAAAA46wWTHJPeDV5ZVVRUWFZYkY0TDEzejVadwAAAAAAAOOuFkxyT3g1eWVVUVFhWWJGNEwxM3o1WncAAAAAAADjrRZMck94NXllVVFRYVliRjRMMTN6NVp3"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个scroll查询返回的下一批结果。 尽管我们指定字段 size 的值为1000，我们有可能取到超过这个值数量的文档。 当查询的时候， 字段 size 作用于单个分片，所以每个批次实际返回的文档数量最大为 size * number_of_primary_shards 。</p><p>scoll看起来挺像分页的，但是其实使用场景不一样。分页主要是用来一页一页搜索，给用户看的；scoll主要是用来一批一批检索数据，让系统进行处理的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此为龙果学院课程学习笔记，记录以后翻看&lt;/p&gt;
&lt;p&gt;前面讲了简单的搜索、分词和映射，这篇文章讲ES的搜索API&lt;/p&gt;
&lt;h1 id=&quot;search-API&quot;&gt;&lt;a href=&quot;#search-API&quot; class=&quot;headerlink&quot; title=&quot;search API&quot;&gt;&lt;/a&gt;search API&lt;/h1&gt;&lt;p&gt;Search API的基本语法：&lt;/p&gt;
&lt;p&gt;这是一个空查询，空查询将返回所有索引库（indices)中的所有文档：&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GET /_search&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="ElasticSearch" scheme="http://www.saily.top/categories/ElasticSearch/"/>
    
    
      <category term="ElasticSearch" scheme="http://www.saily.top/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch05-搜索详解</title>
    <link href="http://www.saily.top/2018/09/19/elasticSearch05/"/>
    <id>http://www.saily.top/2018/09/19/elasticSearch05/</id>
    <published>2018-09-19T03:36:54.000Z</published>
    <updated>2018-09-21T02:31:22.027Z</updated>
    
    <content type="html"><![CDATA[<p>此为龙果学院课程学习笔记，记录以后翻看</p><p>前面讲了Document的增删改查和集群原理，接下来就是ES的重头戏了，搜索。</p><h1 id="search结果解析"><a href="#search结果解析" class="headerlink" title="_search结果解析"></a>_search结果解析</h1><p>当发出一个搜索请求的时候，会拿到很多结果，下面说一下搜索结果里的各种数据，都代表了什么含义。<br><a id="more"></a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">GET _search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">16</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">16</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">8</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">".kibana"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"config"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"5.2.0"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"buildNum"</span>: <span class="number">14695</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"8"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"test_field"</span>: <span class="string">"test client 2"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"10"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"test_field1"</span>: <span class="string">"test1"</span>,</span><br><span class="line">          <span class="attr">"test_field2"</span>: <span class="string">"updated test2"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"ecommerce"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"product"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"2"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"jiajieshi yagao"</span>,</span><br><span class="line">          <span class="attr">"desc"</span>: <span class="string">"youxiao fangzhu"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">25</span>,</span><br><span class="line">          <span class="attr">"producer"</span>: <span class="string">"jiajieshi producer"</span>,</span><br><span class="line">          <span class="attr">"tags"</span>: [</span><br><span class="line">            <span class="string">"fangzhu"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"ecommerce"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"product"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"gaolujie yagao"</span>,</span><br><span class="line">          <span class="attr">"desc"</span>: <span class="string">"gaoxiao meibai"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">30</span>,</span><br><span class="line">          <span class="attr">"producer"</span>: <span class="string">"gaolujie producer"</span>,</span><br><span class="line">          <span class="attr">"tags"</span>: [</span><br><span class="line">            <span class="string">"meibai"</span>,</span><br><span class="line">            <span class="string">"fangzhu"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"7"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"test_field"</span>: <span class="string">"test client 2"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"test_index1"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"test"</span>: <span class="string">"hello es"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"ecommerce"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"product"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"3"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"zhonghua yagao"</span>,</span><br><span class="line">          <span class="attr">"desc"</span>: <span class="string">"caoben zhiwu"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">40</span>,</span><br><span class="line">          <span class="attr">"producer"</span>: <span class="string">"zhonghua producer"</span>,</span><br><span class="line">          <span class="attr">"tags"</span>: [</span><br><span class="line">            <span class="string">"qingxin"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>took</code>：整个搜索请求花费了多少毫秒</li><li><code>hits.total</code>：本次搜索，返回了几条结果</li><li><code>hits.max_score</code>：本次搜索的所有结果中，最大的相关度分数是多少，每一条document对于search的相关度，越相关，<code>_score</code>分数越大，排位越靠前</li><li><code>hits.hits</code>：默认查询前10条数据，包含完整数据，<code>_score</code>降序排序</li><li><code>shards</code>：shards fail的条件（primary和replica全部挂掉），不影响其他shard。默认情况下来说，一个搜索请求，会打到一个index的所有primary shard上去，当然了，每个primary shard都可能会有一个或多个replic shard，所以请求也可以到primary shard的其中一个replica shard上去。</li><li><p><code>timeout</code>：默认没有所谓的timeout，如果搜索特别慢每个shard都要好几分钟，那么搜索请求会一直等待结果返回。ES提供了timeout机制，指定每个shard在设置的timeout时间内马上已经搜索到的数据（可能是部分，也可能是全部），直接返回给client程序，而不是等到所有的数据全部搜索出来以后再返回。确保一次请求可以在用户指定的timeout时常内完成，为一些时间敏感的搜索应用提供良好支持。</p><p>  <code>GET /_search?timeout=10m</code></p></li></ul><h1 id="multi-index和multi-type搜索模式"><a href="#multi-index和multi-type搜索模式" class="headerlink" title="multi-index和multi-type搜索模式"></a>multi-index和multi-type搜索模式</h1><p>如何一次性搜索多个index和多个type下的数据</p><ul><li><code>/_search</code>：所有索引，所有type下的所有数据都搜索出来</li><li><code>/index1/_search</code>：指定一个index，搜索其下所有type的数据</li><li><code>/index1,index2/_search</code>：同时搜索两个index下的数据</li><li><code>/*1,*2/_search</code>：按照通配符去匹配多个索引</li><li><code>/index1/type1/_search</code>：搜索一个index下指定的type的数据</li><li><code>/index1/type1,type2/_search</code>：可以搜索一个index下多个type的数据</li><li><code>/index1,index2/type1,type2/_search</code>：搜索多个index下的多个type的数据</li><li><code>/_all/type1,type2/_search</code>：_all，可以代表搜索所有index下的指定type的数据</li></ul><h2 id="搜索基本原理"><a href="#搜索基本原理" class="headerlink" title="搜索基本原理"></a>搜索基本原理</h2><p>客户端发送一个搜索请求，会把请求分配到所有的primary shard上去执行，因为每个shard都包含部分数据，所以每个shard上都可能会包含搜索请求的结果。但是如果primary shard有replica shard，那么请求也可以分配到replica shard上去执行。</p><h1 id="分页搜索"><a href="#分页搜索" class="headerlink" title="分页搜索"></a>分页搜索</h1><h2 id="分页搜索语法"><a href="#分页搜索语法" class="headerlink" title="分页搜索语法"></a>分页搜索语法</h2><p>参数：</p><ul><li>size: 一页多少条</li><li>from：从多少条开始</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /_search?size=10&amp;from=0</span><br></pre></td></tr></table></figure><p>返回结果里面写了总共有多少条：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"hits": &#123;</span><br><span class="line">    "total": 8,</span><br></pre></td></tr></table></figure><h2 id="deep-paging问题"><a href="#deep-paging问题" class="headerlink" title="deep paging问题"></a>deep paging问题</h2><p>deep paging就是搜索特别深，比如总共有3w条数据，每页10条数据，搜索最后一页</p><p>请求先发到coordinate node（通常是client节点），然后请求会分配到不同的节点上去找数据，每个个shard都会把所有的数据找出来，排序后取最后10条，返回给客户端。</p><p>这个过程会耗费很大的网络带宽、内存和CPU，所以deep paging有较大的性能问题，应该尽量避免做出这种deep paging操作。</p><h1 id="query-string语法介绍"><a href="#query-string语法介绍" class="headerlink" title="query string语法介绍"></a>query string语法介绍</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /test_index/test_type/_search?q=test_field:test</span><br><span class="line">GET /test_index/test_type/_search?q=+test_field:test</span><br><span class="line">GET /test_index/test_type/_search?q=-test_field:test</span><br></pre></td></tr></table></figure><ul><li><ul><li>test_field包含test</li></ul></li><li><ul><li>test_field不包含test</li></ul></li></ul><h1 id="all-metadata介绍"><a href="#all-metadata介绍" class="headerlink" title="_all metadata介绍"></a>_all metadata介绍</h1><pre><code>GET /test_index/test_type/_search?q=test</code></pre><p>直接可以搜索所有的field，任意一个field包含指定的关键字就可以搜索出来。我们在进行中搜索的时候，难道是对document中的每一个field都进行一次搜索吗？不是这样的。</p><p>es中的<code>_all</code>元数据，在建立索引的时候，我们插入一条document，它里面包含了多个field，此时es会自动将多个field的值，全部用字符串的方式串联起来，变成一个长的字符串，作为<code>_all</code> field的值，同时建立索引。</p><p>后面如果在搜索的时候，没有对某个field指定搜索，就默认搜索_all field，其中是包含了所有field的值的。</p><p>举个例子</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"jack"</span>,</span><br><span class="line">  <span class="attr">"age"</span>: <span class="number">26</span>,</span><br><span class="line">  <span class="attr">"email"</span>: <span class="string">"jack@sina.com"</span>,</span><br><span class="line">  <span class="attr">"address"</span>: <span class="string">"guamgzhou"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>jack 26 jack@sina.com guangzhou</code>，作为这一条document的<code>_all</code> field的值，同时进行分词后建立对应的倒排索引。</p><h1 id="mapping介绍"><a href="#mapping介绍" class="headerlink" title="mapping介绍"></a>mapping介绍</h1><p>先插入几条数据，让ES自动建立一个索引：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">PUT /website/article/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"post_date"</span>: <span class="string">"2017-01-01"</span>,</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"my first article"</span>,</span><br><span class="line">  <span class="attr">"content"</span>: <span class="string">"this is my first article in this website"</span>,</span><br><span class="line">  <span class="attr">"author_id"</span>: <span class="number">11400</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /website/article/2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"post_date"</span>: <span class="string">"2017-01-02"</span>,</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"my second article"</span>,</span><br><span class="line">  <span class="attr">"content"</span>: <span class="string">"this is my second article in this website"</span>,</span><br><span class="line">  <span class="attr">"author_id"</span>: <span class="number">11400</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /website/article/3</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"post_date"</span>: <span class="string">"2017-01-03"</span>,</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"my third article"</span>,</span><br><span class="line">  <span class="attr">"content"</span>: <span class="string">"this is my third article in this website"</span>,</span><br><span class="line">  <span class="attr">"author_id"</span>: <span class="number">11400</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面进行搜索测试：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /website/article/_search?q=20173条结果             </span><br><span class="line">GET /website/article/_search?q=2017-01-01        3条结果</span><br><span class="line">GET /website/article/_search?q=post_date:2017-01-01   1条结果</span><br><span class="line">GET /website/article/_search?q=post_date:2017         1条结果</span><br></pre></td></tr></table></figure><p>这个搜索结果，不太符合我们的期望，这里涉及到ES的mapping了，具体这个数字是怎么搜索出来的，后面<a href="#案例详解">案例详解</a>会讲到。</p><p>自动或手动为index中的type建立的一种数据结构和相关配置，简称为mapping，<br><code>dynamic mapping</code>，就是ES自动为我们建立index，创建type，以及type对应的mapping，mapping中包含了每个field对应的数据类型，以及如何分词等设置。</p><p>如何查看mapping？</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">GET /website/_mapping/article</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"website"</span>: &#123;</span><br><span class="line">    <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">      <span class="attr">"article"</span>: &#123;</span><br><span class="line">        <span class="attr">"properties"</span>: &#123;</span><br><span class="line">          <span class="attr">"author_id"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"long"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"content"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">            <span class="attr">"fields"</span>: &#123;</span><br><span class="line">              <span class="attr">"keyword"</span>: &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">                <span class="attr">"ignore_above"</span>: <span class="number">256</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"post_date"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"date"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"title"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">            <span class="attr">"fields"</span>: &#123;</span><br><span class="line">              <span class="attr">"keyword"</span>: &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">                <span class="attr">"ignore_above"</span>: <span class="number">256</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>搜索结果为什么不一致，因为es自动建立mapping的时候，为不同的field设置了不同的data type。不同的data type的分词、搜索等行为是不一样的。所以出现了_all field和post_date field的搜索表现完全不一样的结果。</p><h1 id="精确搜索和全文搜索对比"><a href="#精确搜索和全文搜索对比" class="headerlink" title="精确搜索和全文搜索对比"></a>精确搜索和全文搜索对比</h1><h2 id="精确搜索"><a href="#精确搜索" class="headerlink" title="精确搜索"></a>精确搜索</h2><p>2017-01-01，用精确值搜索的时候，必须输入2017-01-01，才能搜索出来<br>如果你输入一个01，是搜索不出来的</p><h2 id="全文搜索"><a href="#全文搜索" class="headerlink" title="全文搜索"></a>全文搜索</h2><ol><li>缩写 vs. 全称：cn vs. china</li><li>格式转化：like liked likes</li><li>大小写：Tom vs tom</li><li>同义词：like vs love</li></ol><p>2017-01-01，2017 01 01，搜索2017，或者01，都可以搜索出来</p><p>china，搜索cn，也可以将china搜索出来<br>likes，搜索like，也可以将likes搜索出来<br>Tom，搜索tom，也可以将Tom搜索出来<br>like，搜索love，同义词，也可以将like搜索出来        </p><p>就不是说单纯的只是匹配完整的一个值，而是可以对值进行拆分词语后（分词）进行匹配，也可以通过缩写、时态、大小写、同义词等进行匹配</p><h1 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h1><p>倒排索引是实现“单词-文档矩阵”的一种具体存储形式，通过倒排索引，可以根据单词快速获取包含这个单词的文档列表。倒排索引主要由两个部分组成：“单词词典”和“倒排文件”。</p><p>先来两个文档：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">doc1：I really liked my small dogs, and I think my mom also liked them.</span><br><span class="line">doc2：He never liked any dogs, so I hope that my mom will not expect me to liked him.</span><br></pre></td></tr></table></figure><p>接下来分词，初步的倒排索引的建立。</p><p>演示一下倒排索引最简单的建立的一个过程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">worddoc1doc2</span><br><span class="line"></span><br><span class="line">I**</span><br><span class="line">really*</span><br><span class="line">liked**</span><br><span class="line">my**</span><br><span class="line">small*</span><br><span class="line">dogs*</span><br><span class="line">and*</span><br><span class="line">think*</span><br><span class="line">mom**</span><br><span class="line">also*</span><br><span class="line">them*</span><br><span class="line">He*</span><br><span class="line">never*</span><br><span class="line">any*</span><br><span class="line">so*</span><br><span class="line">hope*</span><br><span class="line">that*</span><br><span class="line">will*</span><br><span class="line">not*</span><br><span class="line">expect*</span><br><span class="line">me*</span><br><span class="line">to*</span><br><span class="line">him*</span><br></pre></td></tr></table></figure><p>如果用<code>mother like little dog</code>去搜索，是搜不到结果的，搜索的时候会被拆成4个单词去搜索，即</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mother</span><br><span class="line">like</span><br><span class="line">little</span><br><span class="line">dog</span><br></pre></td></tr></table></figure><p>但是，在我们看来mother和mom是同义词，like和liked也是一样的意思，little和small也一样，dog和dogs也一样。</p><p>所以在简历倒排所以的时候，会执行一个操作，对拆分出的各个单词进行相应的处理，以提升后面搜索的时候能够搜索到相关联的文档的概率，这个过程叫normalization。</p><p>比如时态的转换，单复数的转换，同义词的转换，大小写的转换等等</p><p>mom —&gt; mother<br>liked —&gt; like<br>small —&gt; little<br>dogs —&gt; dog        </p><p>重新建立倒排索引，加入normalization，再次用<code>mother liked little dog</code>搜索，doc1和doc2都会搜索出来。</p><h1 id="分词器介绍"><a href="#分词器介绍" class="headerlink" title="分词器介绍"></a>分词器介绍</h1><p>分词器，是将用户输入的一段文本，分析成符合逻辑的一种工具，给你一段文本，然后将这段句子拆分成一个一个的单个的单词，同时对每个单词进行normalization（时态转换，单复数转换），分词器<br>提升recall召回率（召回率：搜索的时候，增加能够搜索到的结果的数量）</p><ol><li>character filter：在一段文本进行分词之前，先进行预处理，比如说最常见的就是，过滤html标签（<span>hello<span> –&gt; hello），&amp; –&gt; and（I&amp;you –&gt; I and you）</span></span></li><li>tokenizer：分词，hello you and me –&gt; hello, you, and, me</li><li>token filter：lowercase，stop word，synonymom，dogs –&gt; dog，liked –&gt; like，Tom –&gt; tom，a/the/an –&gt; 干掉，mother –&gt; mom，small –&gt; little</li></ol><p>分词器很重要，它将一段文本进行各种处理，最后处理好的结果才会拿去建立倒排索引。</p><h2 id="内置分词器介绍"><a href="#内置分词器介绍" class="headerlink" title="内置分词器介绍"></a>内置分词器介绍</h2><p><code>Set the shape to semi-transparent by calling set_trans(5)</code></p><ul><li>standard analyzer：set, the, shape, to, semi, transparent, by, calling, set_trans, 5（默认的是standard）</li><li>simple analyzer：set, the, shape, to, semi, transparent, by, calling, set, trans</li><li>whitespace analyzer：Set, the, shape, to, semi-transparent, by, calling, set_trans(5)</li><li>language analyzer（特定的语言的分词器，比如说，english，英语分词器）：set, shape, semi, transpar, call, set_tran, 5</li></ul><h2 id="query-string分词"><a href="#query-string分词" class="headerlink" title="query string分词"></a>query string分词</h2><p><strong>query string必须以和index建立时相同的analyzer进行分词</strong></p><p>比如我们有一个document，其中有一个field，包含的value是：hello you and me。</p><p>我们要搜索这个document对应的index，搜索文本是hell me，这个搜索文本就是query string。<br>query string，默认情况下，es会使用它对应的field建立倒排索引时相同的分词器去进行分词和normalization，只有这样才能实现正确的搜索。</p><p>建立倒排索引的时候，将dogs –&gt; dog。结果搜索的时候用dogs去搜索，那不就搜索不到了吗？所以搜索的时候，那个dogs也必须变成dog才行。才能搜索到。</p><p><strong>query string对exact value（精确搜索）和full text（全文搜索）的区别对待</strong></p><blockquote><p>所以不同类型的field，可能有的就是full text，有的就是exact value。</p></blockquote><h2 id="案例详解"><a href="#案例详解" class="headerlink" title="案例详解"></a>案例详解</h2><p><code>GET /_search?q=2017</code></p><p>这个查询前面说了，搜索的是<code>_all</code> field，document所有的field都会拼接成一个大字符串，进行分词搜索。</p><p>拼接以后的字符串：2017-01-02 my second article this is my second article in this website 11400</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">doc1doc2doc3</span><br><span class="line">2017***</span><br><span class="line">01* </span><br><span class="line">02*</span><br><span class="line">03*</span><br></pre></td></tr></table></figure><p>所以用2017去搜索，自然会搜索到3个。</p><p>那么用<code>GET /_search?q=2017-01-01</code>去搜索呢</p><p>2017-01-01这个query string会用跟建立倒排索引一样的分词器去进行分词，所以搜索的条件会被分词成这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2017</span><br><span class="line">01</span><br><span class="line">01</span><br></pre></td></tr></table></figure><p>所以还是会搜索到3条。</p><p>接下来是<code>GET /_search?q=post_date:2017-01-01</code>，这里加了查询的字段了，这个字段的类型是date，es会用特别的方式进行处理，转换成时间去对这个字段进行搜索。</p><h2 id="测试分词器"><a href="#测试分词器" class="headerlink" title="测试分词器"></a>测试分词器</h2><p>给一段文本和指定分词器进行分词：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">GET /_analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"standard"</span>,</span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"Text to analyze"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokens"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"text"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">4</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"to"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">5</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">7</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"analyze"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">8</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">15</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="mapping详解"><a href="#mapping详解" class="headerlink" title="mapping详解"></a>mapping详解</h1><p>为了能够将时间域视为时间，数字域视为数字，字符串域视为全文或精确值字符串， Elasticsearch 需要知道每个域中数据的类型。这个信息包含在mapping中。</p><p>mapping就是index的type的元数据，每个type都有一个自己的mapping，决定了数据类型，建立倒排索引的行为，还有进行搜索的行为。</p><ol><li>往es里面直接插入数据，es会自动建立索引，同时建立type以及对应的mapping。</li><li>mapping中定义了每个field的数据类型。</li><li>不同的数据类型（比如说text和date），可能有的是exact value，有的是full text。</li><li>exact value：在建立倒排索引、分词的时候，是将整个值一起作为一个关键词建立到倒排索引中的；full text：会经历各种各样的处理、分词、normaliztion（时态转换，同义词转换，大小写转换），才会建立到倒排索引中。</li><li>同时呢，exact value和full text类型的field就决定了，在一个搜索过来的时候，对exact value field或者是full text field进行搜索的行为也是不一样的，会跟建立倒排索引的行为保持一致；比如说exact value搜索的时候，就是直接按照整个值进行匹配，full text query string，也会进行分词和normalization再去倒排索引中去搜索。</li><li>可以用es的dynamic mapping，让其自动建立mapping，包括自动设置数据类型；也可以提前手动创建index和type的mapping，自己对各个field进行设置，包括数据类型，包括索引行为、分词器，等等。</li></ol><h2 id="mapping数据类型"><a href="#mapping数据类型" class="headerlink" title="mapping数据类型"></a>mapping数据类型</h2><p>Elasticsearch支持如下简单域类型：</p><ul><li>字符串: string</li><li>整数 : byte, short, integer, long</li><li>浮点数: float, double</li><li>布尔型: boolean</li><li>日期: date</li></ul><p>dynamic mapping：当你索引一个包含新域的文档–之前未曾出现– Elasticsearch 会使用 动态映射 ，通过JSON中基本数据类型，尝试猜测域类型，使用如下规则：</p><p>true or false    –&gt;    boolean<br>123        –&gt;    long<br>123.45        –&gt;    double<br>2017-01-01    –&gt;    date<br>“hello world”    –&gt;    string/text        </p><blockquote><p>这意味着如果你通过引号( “123” )索引一个数字，它会被映射为 string 类型，而不是 long 。但是，如果这个域已经映射为 long ，那么 Elasticsearch 会尝试将这个字符串转化为 long ，如果无法转化，则抛出一个异常。</p></blockquote><h2 id="查看mapping"><a href="#查看mapping" class="headerlink" title="查看mapping"></a>查看mapping</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">GET website/_mapping/article</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"website"</span>: &#123;</span><br><span class="line">    <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">      <span class="attr">"article"</span>: &#123;</span><br><span class="line">        <span class="attr">"properties"</span>: &#123;</span><br><span class="line">          <span class="attr">"author_id"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"long"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"content"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">            <span class="attr">"fields"</span>: &#123;</span><br><span class="line">              <span class="attr">"keyword"</span>: &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">                <span class="attr">"ignore_above"</span>: <span class="number">256</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"post_date"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"date"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"title"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">            <span class="attr">"fields"</span>: &#123;</span><br><span class="line">              <span class="attr">"keyword"</span>: &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">                <span class="attr">"ignore_above"</span>: <span class="number">256</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义mapping"><a href="#自定义mapping" class="headerlink" title="自定义mapping"></a>自定义mapping</h2><p>mapping在建立以后，只能新增字段，不能修改字段类型。</p><p>先创建一个mapping：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">PUT /website</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"article"</span>: &#123;</span><br><span class="line">      <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"author_id"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"long"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"title"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"analyzer"</span>: <span class="string">"english"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"content"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"text"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"post_date"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"date"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"publisher_id"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"index"</span>: <span class="string">"not_analyzed"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>试着修改mapping，比如<code>author_id</code>，会得到一个错误：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">PUT /website</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"article"</span>: &#123;</span><br><span class="line">      <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"author_id"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"text"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"error"</span>: &#123;</span><br><span class="line">    <span class="attr">"root_cause"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"index_already_exists_exception"</span>,</span><br><span class="line">        <span class="attr">"reason"</span>: <span class="string">"index [website/8KNSiw4wRq-67EVN20ll3A] already exists"</span>,</span><br><span class="line">        <span class="attr">"index_uuid"</span>: <span class="string">"8KNSiw4wRq-67EVN20ll3A"</span>,</span><br><span class="line">        <span class="attr">"index"</span>: <span class="string">"website"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"index_already_exists_exception"</span>,</span><br><span class="line">    <span class="attr">"reason"</span>: <span class="string">"index [website/8KNSiw4wRq-67EVN20ll3A] already exists"</span>,</span><br><span class="line">    <span class="attr">"index_uuid"</span>: <span class="string">"8KNSiw4wRq-67EVN20ll3A"</span>,</span><br><span class="line">    <span class="attr">"index"</span>: <span class="string">"website"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="number">400</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是如果是给已经存在的mapping新增一个field，就没问题了：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PUT /website/_mapping/article</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"properties"</span> : &#123;</span><br><span class="line">    <span class="attr">"new_field"</span> : &#123;</span><br><span class="line">      <span class="attr">"type"</span> :    <span class="string">"string"</span>,</span><br><span class="line">      <span class="attr">"index"</span>:    <span class="string">"not_analyzed"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"acknowledged"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试mapping"><a href="#测试mapping" class="headerlink" title="测试mapping"></a>测试mapping</h2><p>你可以使用 analyze API 测试字符串域的映射，下面测试某一个mapping的字段分词情况：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET /website/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"field"</span>: <span class="string">"content"</span>,</span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"my-dogs"</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mapping复杂数据类型"><a href="#mapping复杂数据类型" class="headerlink" title="mapping复杂数据类型"></a>mapping复杂数据类型</h2><p>除了我们提到的简单标量数据类型， JSON 还有 null 值，数组，和对象，这些 Elasticsearch 都是支持的</p><h3 id="multivalue-field（多值域）"><a href="#multivalue-field（多值域）" class="headerlink" title="multivalue field（多值域）"></a>multivalue field（多值域）</h3><p>很有可能，我们希望 tag 域 包含多个标签。我们可以以数组的形式索引标签：</p><p><code>{ &quot;tag&quot;: [ &quot;search&quot;, &quot;nosql&quot; ]}</code></p><p>对于数组，没有特殊的映射需求。任何域都可以包含0、1或者多个值，就像全文域分析得到多个词条。</p><p>这暗示 数组中所有的值必须是相同数据类型的 。你不能将日期和字符串混在一起。如果你通过索引数组来创建新的域，Elasticsearch 会用数组中第一个值的数据类型作为这个域的 类型。</p><h3 id="empty-field（空域）"><a href="#empty-field（空域）" class="headerlink" title="empty field（空域）"></a>empty field（空域）</h3><p>当然，数组可以为空。 这相当于存在零值。 事实上，在 Lucene 中是不能存储 null 值的，所以我们认为存在 null 值的域为空域。</p><p>下面三种域被认为是空的，它们将不会被索引：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"null_value":               null,</span><br><span class="line">"empty_array":              [],</span><br><span class="line">"array_with_null_value":    [ null ]</span><br></pre></td></tr></table></figure><h3 id="object-field（多层级对象）"><a href="#object-field（多层级对象）" class="headerlink" title="object field（多层级对象）"></a>object field（多层级对象）</h3><p>我们讨论的最后一个 JSON 原生数据类是 对象 – 在其他语言中称为哈希，哈希 map，字典或者关联数组。</p><p>内部对象 经常用于 嵌入一个实体或对象到其它对象中。例如，与其在 tweet 文档中包含 user_name 和 user_id 域，我们也可以这样写：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">PUT /tweet/tweet/1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"tweet"</span>:            <span class="string">"Elasticsearch is very flexible"</span>,</span><br><span class="line">    <span class="attr">"user"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>:           <span class="string">"@johnsmith"</span>,</span><br><span class="line">        <span class="attr">"gender"</span>:       <span class="string">"male"</span>,</span><br><span class="line">        <span class="attr">"age"</span>:          <span class="number">26</span>,</span><br><span class="line">        <span class="attr">"name"</span>: &#123;</span><br><span class="line">            <span class="attr">"full"</span>:     <span class="string">"John Smith"</span>,</span><br><span class="line">            <span class="attr">"first"</span>:    <span class="string">"John"</span>,</span><br><span class="line">            <span class="attr">"last"</span>:     <span class="string">"Smith"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET /tweet/tweet/_mapping</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tweet"</span>: &#123;</span><br><span class="line">    <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">      <span class="attr">"tweet"</span>: &#123;</span><br><span class="line">        <span class="attr">"properties"</span>: &#123;</span><br><span class="line">          <span class="attr">"tweet"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">            <span class="attr">"fields"</span>: &#123;</span><br><span class="line">              <span class="attr">"keyword"</span>: &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">                <span class="attr">"ignore_above"</span>: <span class="number">256</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"user"</span>: &#123;</span><br><span class="line">            <span class="attr">"properties"</span>: &#123;</span><br><span class="line">              <span class="attr">"age"</span>: &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"long"</span></span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">"gender"</span>: &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">                <span class="attr">"fields"</span>: &#123;</span><br><span class="line">                  <span class="attr">"keyword"</span>: &#123;</span><br><span class="line">                    <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">                    <span class="attr">"ignore_above"</span>: <span class="number">256</span></span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">"id"</span>: &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">                <span class="attr">"fields"</span>: &#123;</span><br><span class="line">                  <span class="attr">"keyword"</span>: &#123;</span><br><span class="line">                    <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">                    <span class="attr">"ignore_above"</span>: <span class="number">256</span></span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">"name"</span>: &#123;</span><br><span class="line">                <span class="attr">"properties"</span>: &#123;</span><br><span class="line">                  <span class="attr">"first"</span>: &#123;</span><br><span class="line">                    <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">                    <span class="attr">"fields"</span>: &#123;</span><br><span class="line">                      <span class="attr">"keyword"</span>: &#123;</span><br><span class="line">                        <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">                        <span class="attr">"ignore_above"</span>: <span class="number">256</span></span><br><span class="line">                      &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;,</span><br><span class="line">                  <span class="attr">"full"</span>: &#123;</span><br><span class="line">                    <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">                    <span class="attr">"fields"</span>: &#123;</span><br><span class="line">                      <span class="attr">"keyword"</span>: &#123;</span><br><span class="line">                        <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">                        <span class="attr">"ignore_above"</span>: <span class="number">256</span></span><br><span class="line">                      &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;,</span><br><span class="line">                  <span class="attr">"last"</span>: &#123;</span><br><span class="line">                    <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">                    <span class="attr">"fields"</span>: &#123;</span><br><span class="line">                      <span class="attr">"keyword"</span>: &#123;</span><br><span class="line">                        <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">                        <span class="attr">"ignore_above"</span>: <span class="number">256</span></span><br><span class="line">                      &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内部对象如何索引"><a href="#内部对象如何索引" class="headerlink" title="内部对象如何索引"></a>内部对象如何索引</h3><p>Lucene 不理解内部对象。 Lucene 文档是由一组键值对列表组成的。为了能让 Elasticsearch 有效地索引内部类，它把我们的文档转化成这样：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"tweet"</span>:            [elasticsearch, flexible, very],</span><br><span class="line">    <span class="attr">"user.id"</span>:          [@johnsmith],</span><br><span class="line">    <span class="attr">"user.gender"</span>:      [male],</span><br><span class="line">    <span class="attr">"user.age"</span>:         [<span class="number">26</span>],</span><br><span class="line">    <span class="attr">"user.name.full"</span>:   [john, smith],</span><br><span class="line">    <span class="attr">"user.name.first"</span>:  [john],</span><br><span class="line">    <span class="attr">"user.name.last"</span>:   [smith]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此为龙果学院课程学习笔记，记录以后翻看&lt;/p&gt;
&lt;p&gt;前面讲了Document的增删改查和集群原理，接下来就是ES的重头戏了，搜索。&lt;/p&gt;
&lt;h1 id=&quot;search结果解析&quot;&gt;&lt;a href=&quot;#search结果解析&quot; class=&quot;headerlink&quot; title=&quot;_search结果解析&quot;&gt;&lt;/a&gt;_search结果解析&lt;/h1&gt;&lt;p&gt;当发出一个搜索请求的时候，会拿到很多结果，下面说一下搜索结果里的各种数据，都代表了什么含义。&lt;br&gt;
    
    </summary>
    
      <category term="ElasticSearch" scheme="http://www.saily.top/categories/ElasticSearch/"/>
    
    
      <category term="ElasticSearch" scheme="http://www.saily.top/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch04-Document、Index详解和操作以及并发问题</title>
    <link href="http://www.saily.top/2018/08/19/elasticSearch04/"/>
    <id>http://www.saily.top/2018/08/19/elasticSearch04/</id>
    <published>2018-08-19T09:40:30.000Z</published>
    <updated>2018-09-19T03:36:04.356Z</updated>
    
    <content type="html"><![CDATA[<p>此为龙果学院课程学习笔记，记录以后翻看</p><h1 id="Document元数据"><a href="#Document元数据" class="headerlink" title="Document元数据"></a>Document元数据</h1><h2 id="index元数据"><a href="#index元数据" class="headerlink" title="_index元数据"></a>_index元数据</h2><ol><li>代表一个document存放在哪个index中。</li><li>类似的数据放在一个索引，非类似的数据放不同索引：product index（包含了所有的商品），sales index（包含了所有的商品销售数据），inventory index（包含了所有库存相关的数据）。如果你把比如product，sales，human resource（employee），全都放在一个大的index里面，比如company index，就不合适。<a id="more"></a></li><li>index中包含了很多类似的document：类似是什么意思，其实指的就是这些document的fields很大一部分是相同的，比如你放了3个document，每个document的fields都完全不一样，这就不是类似了，就不太适合放到一个index里面去了。</li><li>索引名称必须是小写的，不能用下划线开头，不能包含逗号，例如：product，website，blog</li></ol><h2 id="type元数据"><a href="#type元数据" class="headerlink" title="_type元数据"></a>_type元数据</h2><ol><li>代表document属于index中的哪个类别（type）</li><li>一个索引通常会划分为多个type，逻辑上对index中有些许不同的几类数据进行分类：因为一批相同的数据，可能有很多相同的fields，但是还是可能会有一些轻微的不同，可能会有少数fields是不一样的，举个例子，比如商品，可能划分为电子商品，生鲜商品，日化商品，等等。</li><li>type名称可以是大写或者小写，但是同时不能用下划线开头，不能包含逗号</li></ol><h2 id="id元数据"><a href="#id元数据" class="headerlink" title="_id元数据"></a>_id元数据</h2><ol><li>代表document的唯一标识，与index和type一起，可以唯一标识和定位一个document</li><li>我们可以手动指定document的id（put /index/type/id），也可以不指定，由es自动为我们创建一个id</li></ol><h3 id="手动指定document-id"><a href="#手动指定document-id" class="headerlink" title="手动指定document id"></a>手动指定document id</h3><h4 id="根据应用情况看是否满足手动指定document-id的前提"><a href="#根据应用情况看是否满足手动指定document-id的前提" class="headerlink" title="根据应用情况看是否满足手动指定document id的前提"></a>根据应用情况看是否满足手动指定document id的前提</h4><p>一般来说，是从某些其他的系统中导入一些数据到es时，会采取这种方式，就是使用系统中已有数据的唯一标识，作为es中document的id。</p><blockquote><p>举个例子，我们现在在开发一个电商网站，做搜索功能，或者是OA系统的做员工检索功能。这个时候，数据首先会在网站系统或者IT系统内部的数据库中，会先有一份，此时就肯定会有一个数据库的primary key（自增长，UUID，或者是业务编号）。如果将数据导入到es中，此时就比较适合采用数据在数据库中已有的primary key。</p></blockquote><p>但是如果是在做一个系统，这个系统主要的数据存储就是es，也就是数据产生出来以后，可能就没有id，直接就存es。那么这个时候，可能就不太适合手动指定document id的形式了，因为你也不知道id应该是什么，此时可以采取下面的让es自动生成id的方式。</p><h4 id="put-index-type-id"><a href="#put-index-type-id" class="headerlink" title="put /index/type/id"></a>put /index/type/id</h4><p>手动指定ID的方式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT /test_index/test_type/2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"test_content"</span>: <span class="string">"my test"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自动生成document-id"><a href="#自动生成document-id" class="headerlink" title="自动生成document id"></a>自动生成document id</h3><h4 id="post-index-type"><a href="#post-index-type" class="headerlink" title="post /index/type"></a>post /index/type</h4><p>后面不加ID，ES会为我们自动生成ID</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /test_index/test_type</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"test_content"</span>: <span class="string">"my test"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"AVp4RN0bhjxldOOnBxaE"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"result"</span>: <span class="string">"created"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"created"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="GUID"><a href="#GUID" class="headerlink" title="GUID"></a>GUID</h4><p>自动生成的id，它的长度为20个字符，是URL安全的，基于base64编码。基于GUID的算法，分布式系统并行生成时不可能会发生冲突。</p><h2 id="source元数据"><a href="#source元数据" class="headerlink" title="_source元数据"></a>_source元数据</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">PUT /test_index/test_type/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"test_field1"</span>: <span class="string">"test field1"</span>,</span><br><span class="line">  <span class="attr">"test_field2"</span>: <span class="string">"test field2"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET /test_index/test_type/1</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"found"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"_source"</span>: &#123;</span><br><span class="line">    <span class="attr">"test_field1"</span>: <span class="string">"test field1"</span>,</span><br><span class="line">    <span class="attr">"test_field2"</span>: <span class="string">"test field2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>_source元数据：在创建一个document的时候，传入的json传在默认情况下，在get的时候，会原封不动的给我们返回回来。</p><p>如果要定制返回的结果，可以加<code>_srouce</code>参数，指定返回哪些字段，多个字段用逗号分隔。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET /test_index/test_type/1?_source=test_field1,test_field2</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"found"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"_source"</span>: &#123;</span><br><span class="line">    <span class="attr">"test_field2"</span>: <span class="string">"test field2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Document的创建、替换和删除"><a href="#Document的创建、替换和删除" class="headerlink" title="Document的创建、替换和删除"></a>Document的创建、替换和删除</h1><h2 id="document的全量替换"><a href="#document的全量替换" class="headerlink" title="document的全量替换"></a>document的全量替换</h2><ol><li>语法与创建文档是一样的，如果document id不存在，那么就是创建；如果document id已经存在，那么就是全量替换操作，替换document的json串内容。</li><li>其实document是不可变的，如果要修改document的内容，第一种方式就是全量替换，直接对document重新建立索引，替换里面所有的内容。</li><li>es会将老的document标记为deleted，然后新增我们给定的一个document，当我们创建越来越多的document的时候，es会在适当的时机在后台自动删除标记为deleted的document。</li></ol><h2 id="document的强制创建"><a href="#document的强制创建" class="headerlink" title="document的强制创建"></a>document的强制创建</h2><p>创建文档与全量替换的语法是一样的，有时我们只是想新建文档，不想替换文档，如果强制进行创建呢？</p><p><code>PUT /index/type/id?op_type=create，PUT /index/type/id/_create</code></p><p>但是强制创建一个已经存在的Document会得到一个冲突的错误。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"error"</span>: &#123;</span><br><span class="line">    <span class="attr">"root_cause"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"version_conflict_engine_exception"</span>,</span><br><span class="line">        <span class="attr">"reason"</span>: <span class="string">"[test_type][1]: version conflict, document already exists (current version [1])"</span>,</span><br><span class="line">        <span class="attr">"index_uuid"</span>: <span class="string">"arBg_MfmRWCMSKQHqGIrDw"</span>,</span><br><span class="line">        <span class="attr">"shard"</span>: <span class="string">"3"</span>,</span><br><span class="line">        <span class="attr">"index"</span>: <span class="string">"test_index1"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"version_conflict_engine_exception"</span>,</span><br><span class="line">    <span class="attr">"reason"</span>: <span class="string">"[test_type][1]: version conflict, document already exists (current version [1])"</span>,</span><br><span class="line">    <span class="attr">"index_uuid"</span>: <span class="string">"arBg_MfmRWCMSKQHqGIrDw"</span>,</span><br><span class="line">    <span class="attr">"shard"</span>: <span class="string">"3"</span>,</span><br><span class="line">    <span class="attr">"index"</span>: <span class="string">"test_index1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="number">409</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="document的删除"><a href="#document的删除" class="headerlink" title="document的删除"></a>document的删除</h2><p><code>DELETE /index/type/id</code></p><p>ES不会立即物理删除，只会将其标记为deleted，当数据越来越多的时候，在后台自动删除。</p><h1 id="Elasticsearch并发冲突问题"><a href="#Elasticsearch并发冲突问题" class="headerlink" title="Elasticsearch并发冲突问题"></a>Elasticsearch并发冲突问题</h1><p>多个线程去同时访问es中的一份数据，然后各自去修改之后更新到es，由于线程的先后顺序不同，可能会导致后续的修改覆盖掉之前的修改，显然一些场景下我们是不允许发生这种并发冲突的问题，例如电商库存的修改等</p><h2 id="悲观锁和乐观锁并发控制方案"><a href="#悲观锁和乐观锁并发控制方案" class="headerlink" title="悲观锁和乐观锁并发控制方案"></a>悲观锁和乐观锁并发控制方案</h2><p>数据库管理系统（DBMS）中的并发控制的任务是确保在多个事务同时存取数据库中同一数据时不破坏事务的隔离性和统一性以及数据库的统一性。</p><p>乐观并发控制(乐观锁)和悲观并发控制（悲观锁）是并发控制主要采用的技术手段。<br>不要把他们和数据中提供的锁机制（行锁、表锁、排他锁、共享锁）混为一谈。其实，在DBMS中，悲观锁正是利用数据库本身提供的锁机制来实现的。</p><h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><ul><li><p>如何理解悲观锁 </p><p>  它指的是对数据被外界（包括本系统当前的其他事务，以及来自外部系统的事务处理）修改持保守态度(悲观)，因此，在整个数据处理过程中，将数据处于锁定状态。<br>  在对任意记录进行修改前，先尝试为该记录加上排他锁（exclusive locking）。<br>  如果加锁失败，说明该记录正在被修改，那么当前查询可能要等待或者抛出异常。 具体响应方式由开发者根据实际需要决定。<br>  如果成功加锁，那么就可以对记录做修改，事务完成后就会解锁了。<br>  其间如果有其他对该记录做修改或加排他锁的操作，都会等待我们解锁或直接抛出异常。</p></li><li><p>优点与不足<br>  悲观锁的优点：方便，直接加锁，对应用程序来说透明，不需要额外的操作；<br>  悲观锁的缺点：并发能力很低，同一时间只能有一条线程操作数据。</p><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3></li><li><p>如何理解乐观锁<br>  它假设多用户并发的事务在处理时不会彼此互相影响，各事务能够在不产生锁的情况下处理各自影响的那部分数据。在提交数据更新之前，每个事务会先检查在该事务读取数据后，有没有其他事务又修改了该数据。如果其他事务有更新的话，正在提交的事务会进行回滚。</p></li><li>与悲观锁区别<br>  相对于悲观锁，在对数据库进行处理的时候，乐观锁并不会使用数据库提供的锁机制。一般的实现乐观锁的方式就是记录数据版本。<br>  <strong>数据版本</strong>是为数据增加的一个版本标识。当读取数据时，将版本标识的值一同读出，数据每更新一次，同时对版本标识进行更新。当我们提交更新的时候，判断数据库表对应记录的当前版本信息与第一次取出来的版本标识进行比对，如果数据库表当前版本号与第一次取出来的版本标识值相等，则予以更新，否则认为是过期数据。<br>  实现数据版本有两种方式，第一种是使用版本号，第二种是使用时间戳。</li><li>优点与不足<br>  乐观锁的优点：并发能力很高，不给数据加锁，可以进行大量线程并发操作；<br>  乐观锁的缺点：麻烦，每次更新的时候都要先比对版本号，然后可能需要重新加载数据，再次修改，在写；这个过程可能要重复好几次。</li></ul><h2 id="基于-version字段进行乐观锁并发控制"><a href="#基于-version字段进行乐观锁并发控制" class="headerlink" title="基于_version字段进行乐观锁并发控制"></a>基于_version字段进行乐观锁并发控制</h2><h3 id="version元数据"><a href="#version元数据" class="headerlink" title="_version元数据"></a>_version元数据</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PUT /test_index/test_type/6</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"test_field"</span>: <span class="string">"test test"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"6"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"result"</span>: <span class="string">"created"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"created"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一次创建一个document的时候，它的_version内部版本号就是1；以后，每次对这个document执行修改或者删除操作，都会对这个_version版本号自动加1；哪怕是删除，也会对这条数据的版本号加1</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"found"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"6"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="attr">"result"</span>: <span class="string">"deleted"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们会发现，在删除一个document之后，可以从一个侧面证明，它不是立即物理删除掉的，因为它的一些版本号等信息还是保留着的。先删除一条document，再重新创建这条document，其实会在delete version基础之上，再把version号加1。</p><blockquote><p>ES内部很多类似于副本集的同步请求，都是多线程异步的，也就意味着多个修改请求之间是乱序的，所以ES内部也是采用了乐观锁的方案，基于version版本号去进行并发控制。</p></blockquote><h2 id="并发控制方案"><a href="#并发控制方案" class="headerlink" title="并发控制方案"></a>并发控制方案</h2><h3 id="上机动手实战演练基于-version进行乐观锁并发控制"><a href="#上机动手实战演练基于-version进行乐观锁并发控制" class="headerlink" title="上机动手实战演练基于_version进行乐观锁并发控制"></a>上机动手实战演练基于_version进行乐观锁并发控制</h3><p>1、先模拟一条数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT /test_index/test_type/7</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"test_field"</span>: <span class="string">"test test"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、模拟两个客户端，都获取到了同一条数据（开2个kibana的网页）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET test_index/test_type/7</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"7"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"found"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"_source"</span>: &#123;</span><br><span class="line">    <span class="attr">"test_field"</span>: <span class="string">"test test"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、其中一个客户端先更新了数据</p><p>更新时带上了数据的版本号，确保ES中数据的版本号跟客户端的版本号是相同的才能修改。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PUT /test_index/test_type/7?version=1 </span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"test_field"</span>: <span class="string">"test client 1"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"7"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"result"</span>: <span class="string">"updated"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"created"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、另外一个客户端尝试基于version=1的数据去进行修改，也带上version版本号，进行乐观锁的并发控制</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">PUT /test_index/test_type/7?version=1 </span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"test_field"</span>: <span class="string">"test client 2"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"error"</span>: &#123;</span><br><span class="line">    <span class="attr">"root_cause"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"version_conflict_engine_exception"</span>,</span><br><span class="line">        <span class="attr">"reason"</span>: <span class="string">"[test_type][7]: version conflict, current version [2] is different than the one provided [1]"</span>,</span><br><span class="line">        <span class="attr">"index_uuid"</span>: <span class="string">"I8nYYk8URXmXpcx0SS7wyw"</span>,</span><br><span class="line">        <span class="attr">"shard"</span>: <span class="string">"3"</span>,</span><br><span class="line">        <span class="attr">"index"</span>: <span class="string">"test_index"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"version_conflict_engine_exception"</span>,</span><br><span class="line">    <span class="attr">"reason"</span>: <span class="string">"[test_type][7]: version conflict, current version [2] is different than the one provided [1]"</span>,</span><br><span class="line">    <span class="attr">"index_uuid"</span>: <span class="string">"I8nYYk8URXmXpcx0SS7wyw"</span>,</span><br><span class="line">    <span class="attr">"shard"</span>: <span class="string">"3"</span>,</span><br><span class="line">    <span class="attr">"index"</span>: <span class="string">"test_index"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="number">409</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>版本冲突，更新失败。</p><p>5、在乐观锁成功阻止并发问题之后，尝试正确的完成更新</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET /test_index/test_type/7</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"7"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"found"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"_source"</span>: &#123;</span><br><span class="line">    <span class="attr">"test_field"</span>: <span class="string">"test client 1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先去查询ES里当前数据的版本号，然后带上最新的版本号去修改数据，可能这个步骤会需要反复执行好几次才能成功，特别是在多线程并发更新同一条数据很频繁的情况下。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PUT /test_index/test_type/7?version=2 </span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"test_field"</span>: <span class="string">"test client 2"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"7"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">"result"</span>: <span class="string">"updated"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"created"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="上机动手实战演练基于external-version进行乐观锁并发控制"><a href="#上机动手实战演练基于external-version进行乐观锁并发控制" class="headerlink" title="上机动手实战演练基于external version进行乐观锁并发控制"></a>上机动手实战演练基于external version进行乐观锁并发控制</h3><p>ES提供了一个功能可以让我们不用它提供的内部_version版本号来进行并发控制，我们可以基于自己维护的一个本版好类进行并发控制。举个例子，假如你的数据在MYSQL里也有一份，然后在MYSQL里维护了一个版本号，无论是怎么生成的，这个时候进行乐观锁并发控制，可能并不是想要用es内部的_version来进行控制，而是用自己维护的那个version来进行控制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?version=1</span><br><span class="line">?version=1&amp;version_type=external</span><br></pre></td></tr></table></figure><blockquote><p>区别：只有当你提供的version与es中的_version一样的时候才能修改，否则就报错；当version_type=external的时候，只要你提供的version比es中的_version大，就能完成修改。</p></blockquote><p>1、先构造一条数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PUT /test_index/test_type/8</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"test_field"</span>: <span class="string">"test"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"8"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"result"</span>: <span class="string">"created"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"created"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、模拟两个客户端同时查询到这条数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET /test_index/test_type/8</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"8"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"found"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"_source"</span>: &#123;</span><br><span class="line">    <span class="attr">"test_field"</span>: <span class="string">"test"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、第一个客户端先进行修改，此时客户端在自己的数据库中获取到了这条数据的最新版本号，比如说是3</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PUT /test_index/test_type/8?version=3&amp;version_type=external</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"test_field"</span>: <span class="string">"test client 1"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"8"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">"result"</span>: <span class="string">"updated"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"created"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、模拟第二个客户端，同时拿到了自己数据库中维护的那个版本号，也是3，同时基于version=3发起了修改</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">PUT /test_index/test_type/8?version=3&amp;version_type=external</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"test_field"</span>: <span class="string">"test client 2"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"error"</span>: &#123;</span><br><span class="line">    <span class="attr">"root_cause"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"version_conflict_engine_exception"</span>,</span><br><span class="line">        <span class="attr">"reason"</span>: <span class="string">"[test_type][8]: version conflict, current version [3] is higher or equal to the one provided [3]"</span>,</span><br><span class="line">        <span class="attr">"index_uuid"</span>: <span class="string">"I8nYYk8URXmXpcx0SS7wyw"</span>,</span><br><span class="line">        <span class="attr">"shard"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"index"</span>: <span class="string">"test_index"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"version_conflict_engine_exception"</span>,</span><br><span class="line">    <span class="attr">"reason"</span>: <span class="string">"[test_type][8]: version conflict, current version [3] is higher or equal to the one provided [3]"</span>,</span><br><span class="line">    <span class="attr">"index_uuid"</span>: <span class="string">"I8nYYk8URXmXpcx0SS7wyw"</span>,</span><br><span class="line">    <span class="attr">"shard"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="attr">"index"</span>: <span class="string">"test_index"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="number">409</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一样的，也是并发冲突，只不过这次是基于我们自己提供的version来控制的，而且报错的提示是必须大于等于3。</p><p>5、在并发冲突以后，重新基于新的版本号发起更新</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PUT /test_index/test_type/8?version=6&amp;version_type=external</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"test_field"</span>: <span class="string">"test client 2"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"8"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">6</span>,</span><br><span class="line">  <span class="attr">"result"</span>: <span class="string">"updated"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"created"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="partial-update"><a href="#partial-update" class="headerlink" title="partial update"></a>partial update</h1><p>partial update是修改文档的另一种方式</p><p>之前的PUT操作对应到应用程序中，每次的执行流程是这样的：</p><ol><li>应用程序先发起一个get请求，获取到document，展示到前台界面，供用户查看和修改</li><li>用户在前台界面修改数据，发送到后台</li><li>后台代码，会将用户修改的数据在内存中进行执行，然后封装好修改后的全量数据</li><li>然后发送PUT请求，到es中，进行全量替换</li><li>es将老的document标记为deleted，然后重新创建一个新的document</li></ol><p>partial update</p><p>post /index/type/id/_update<br>{<br>   “doc”: {<br>      “要修改的少数几个field即可，不需要全量的数据”<br>   }<br>}</p><p>看起来，好像就比较方便了，每次就传递少数几个发生修改的field即可，不需要将全量的document数据发送过去</p><h2 id="partial-update实现原理以及其优点"><a href="#partial-update实现原理以及其优点" class="headerlink" title="partial update实现原理以及其优点"></a>partial update实现原理以及其优点</h2><p>partial update直接将数据更新到document中就完成了修改，不用事先先发起一个GET请求数据进行修改然后在将修改后的数据发回去。</p><p>es内部：partial update的执行和全量替换一致。</p><ol><li>内部先get获取document</li><li>将更新的field更新到document的json中</li><li>将老的document标记为deleted</li><li>创建新的document</li></ol><p>优点：</p><ol><li>所有查询，修改和写回操作均发生在同一个shard内，避免了不必要的网络数据传输带来的开销，大大提升了性能（减少了两次请求，一次GET请求，一次回写请求）</li><li>减少修改和查询中的时间间隔，有效减少并发冲突的情况</li><li>内置乐观锁并发控制</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /test_index/test_type/id/_update?retry_on_conflict=2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"doc"</span>: &#123;</span><br><span class="line">    <span class="attr">"num"</span>:<span class="number">32</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果更新失败，则获取最新的版本号再次进行更新，最多重试retry_on_conflict指定的次数</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /test_index/test_type/11/_update?version=3</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"doc"</span>: &#123;</span><br><span class="line">    <span class="attr">"num"</span>:<span class="number">32</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PUT /test_index/test_type/10</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"test_field1"</span>: <span class="string">"test1"</span>,</span><br><span class="line">  <span class="attr">"test_field2"</span>: <span class="string">"test2"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST /test_index/test_type/10/_update</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"doc"</span>: &#123;</span><br><span class="line">    <span class="attr">"test_field2"</span>: <span class="string">"updated test2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h1><h2 id="批量查询"><a href="#批量查询" class="headerlink" title="批量查询"></a>批量查询</h2><p>如果一条一条的查询100条数据，那么就要发送100次网络请求，这个开销还是很大的<br>如果进行批量查询的话，查询100条数据，就只要发送1次网络请求，网络请求的性能开销缩减100倍。</p><p>ES提供了批量查询的API，它的mget的语法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">GET /_mget</span><br><span class="line">&#123;</span><br><span class="line">   <span class="attr">"docs"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">"_index"</span> : <span class="string">"test_index"</span>,</span><br><span class="line">         <span class="attr">"_type"</span> :  <span class="string">"test_type"</span>,</span><br><span class="line">         <span class="attr">"_id"</span> :    <span class="number">1</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">"_index"</span> : <span class="string">"test_index"</span>,</span><br><span class="line">         <span class="attr">"_type"</span> :  <span class="string">"test_type"</span>,</span><br><span class="line">         <span class="attr">"_id"</span> :    <span class="number">2</span></span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"docs"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">      <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">      <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">      <span class="attr">"found"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">      <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">      <span class="attr">"_id"</span>: <span class="string">"2"</span>,</span><br><span class="line">      <span class="attr">"found"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、如果查询的document是一个index下的不同type种的话</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /test_index/_mget</span><br><span class="line">&#123;</span><br><span class="line">   <span class="attr">"docs"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">"_type"</span> :  <span class="string">"test_type"</span>,</span><br><span class="line">         <span class="attr">"_id"</span> :    <span class="number">1</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">"_type"</span> :  <span class="string">"test_type"</span>,</span><br><span class="line">         <span class="attr">"_id"</span> :    <span class="number">2</span></span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、如果查询的数据都在同一个index下的同一个type下，最简单了</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /test_index/test_type/_mget</span><br><span class="line">&#123;</span><br><span class="line">   <span class="attr">"ids"</span>: [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="批量增删改"><a href="#批量增删改" class="headerlink" title="批量增删改"></a>批量增删改</h2><p>ES对于批量增删改，是提供的bulk api。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST /_bulk</span><br><span class="line">&#123; <span class="attr">"delete"</span>: &#123; <span class="attr">"_index"</span>: <span class="string">"test_index"</span>, <span class="attr">"_type"</span>: <span class="string">"test_type"</span>, <span class="attr">"_id"</span>: <span class="string">"3"</span> &#125;&#125; </span><br><span class="line">&#123; <span class="attr">"create"</span>: &#123; <span class="attr">"_index"</span>: <span class="string">"test_index"</span>, <span class="attr">"_type"</span>: <span class="string">"test_type"</span>, <span class="attr">"_id"</span>: <span class="string">"12"</span> &#125;&#125;</span><br><span class="line">&#123; <span class="attr">"test_field"</span>: <span class="string">"test12"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>:  &#123; <span class="attr">"_index"</span>: <span class="string">"test_index"</span>, <span class="attr">"_type"</span>: <span class="string">"test_type"</span>, <span class="attr">"_id"</span>: <span class="string">"2"</span> &#125;&#125;</span><br><span class="line">&#123; <span class="attr">"test_field"</span>: <span class="string">"replaced test2"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"update"</span>: &#123; <span class="attr">"_index"</span>: <span class="string">"test_index"</span>, <span class="attr">"_type"</span>: <span class="string">"test_type"</span>, <span class="attr">"_id"</span>: <span class="string">"1"</span>, <span class="attr">"_retry_on_conflict"</span> : <span class="number">3</span>&#125; &#125;</span><br><span class="line">&#123; <span class="attr">"doc"</span> : &#123;<span class="attr">"test_field2"</span> : <span class="string">"bulk test1"</span>&#125; &#125;</span><br></pre></td></tr></table></figure><p>上面是一些例子，它的语法是每一个操作有两个json，语法如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"action"</span>: &#123;<span class="attr">"metadata"</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"data"</span>&#125;</span><br></pre></td></tr></table></figure><p>举例，比如你现在要创建一个文档，放bulk里面，看起来会是这样子的：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;"index": &#123;"_index": "test_index", "_type", "test_type", "_id": "1"&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"test_field1"</span>: <span class="string">"test1"</span>, <span class="attr">"test_field2"</span>: <span class="string">"test2"</span>&#125;</span><br></pre></td></tr></table></figure><p>bulk api提供了以下4种操作：</p><ol><li>delete：删除一个文档，只要1个json串就可以了</li><li>create：PUT /index/type/id/_create，强制创建</li><li>index：普通的put操作，可以是创建文档，也可以是全量替换文档</li><li>update：执行的partial update操作</li></ol><p>bulk api对json的语法，有严格的要求，每个json串不能换行，只能放一行，同时一个json串和一个json串之间，必须有一个换行。</p><p>bulk操作中，任意一个操作失败，是不会影响其他的操作的，但是在返回结果里，会告诉你异常日志</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST /test_index/_bulk</span><br><span class="line">&#123; <span class="attr">"delete"</span>: &#123; <span class="attr">"_type"</span>: <span class="string">"test_type"</span>, <span class="attr">"_id"</span>: <span class="string">"3"</span> &#125;&#125; </span><br><span class="line">&#123; <span class="attr">"create"</span>: &#123; <span class="attr">"_type"</span>: <span class="string">"test_type"</span>, <span class="attr">"_id"</span>: <span class="string">"12"</span> &#125;&#125;</span><br><span class="line">&#123; <span class="attr">"test_field"</span>:    <span class="string">"test12"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>:  &#123; <span class="attr">"_type"</span>: <span class="string">"test_type"</span> &#125;&#125;</span><br><span class="line">&#123; <span class="attr">"test_field"</span>:    <span class="string">"auto-generate id test"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>:  &#123; <span class="attr">"_type"</span>: <span class="string">"test_type"</span>, <span class="attr">"_id"</span>: <span class="string">"2"</span> &#125;&#125;</span><br><span class="line">&#123; <span class="attr">"test_field"</span>:    <span class="string">"replaced test2"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"update"</span>: &#123; <span class="attr">"_type"</span>: <span class="string">"test_type"</span>, <span class="attr">"_id"</span>: <span class="string">"1"</span>, <span class="attr">"_retry_on_conflict"</span> : <span class="number">3</span>&#125; &#125;</span><br><span class="line">&#123; <span class="attr">"doc"</span> : &#123;<span class="attr">"test_field2"</span> : <span class="string">"bulk test1"</span>&#125; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST /test_index/test_type/_bulk</span><br><span class="line">&#123; <span class="attr">"delete"</span>: &#123; <span class="attr">"_id"</span>: <span class="string">"3"</span> &#125;&#125; </span><br><span class="line">&#123; <span class="attr">"create"</span>: &#123; <span class="attr">"_id"</span>: <span class="string">"12"</span> &#125;&#125;</span><br><span class="line">&#123; <span class="attr">"test_field"</span>:    <span class="string">"test12"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>:  &#123; &#125;&#125;</span><br><span class="line">&#123; <span class="attr">"test_field"</span>: <span class="string">"auto-generate id test"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>:  &#123; <span class="attr">"_id"</span>: <span class="string">"2"</span> &#125;&#125;</span><br><span class="line">&#123; <span class="attr">"test_field"</span>: <span class="string">"replaced test2"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"update"</span>: &#123; <span class="attr">"_id"</span>: <span class="string">"1"</span>, <span class="attr">"_retry_on_conflict"</span> : <span class="number">3</span>&#125; &#125;</span><br><span class="line">&#123; <span class="attr">"doc"</span> : &#123;<span class="attr">"test_field2"</span> : <span class="string">"bulk test1"</span>&#125; &#125;</span><br></pre></td></tr></table></figure><h3 id="bulk-size最佳大小"><a href="#bulk-size最佳大小" class="headerlink" title="bulk size最佳大小"></a>bulk size最佳大小</h3><p>bulk request会加载到内存里，如果太大的话，性能反而会下降，因此需要反复尝试一个最佳的bulk size。一般从1000~5000条数据开始，尝试逐渐增加。另外，如果看大小的话，最好是在5~15MB之间。</p><h1 id="Document数据路由"><a href="#Document数据路由" class="headerlink" title="Document数据路由"></a>Document数据路由</h1><p>在ES中，一个index的数据会分散在多个分片(shard)中，所以当客户端创建Document的时候，需要决定这个Document放在ES的哪一个shard上，这个过程被称之为<strong>数据路由</strong>。</p><h2 id="路由算法"><a href="#路由算法" class="headerlink" title="路由算法"></a>路由算法</h2><p><code>shard = hash(routing) % number_of_primary_shards</code></p><p>举个例子，一个index有3个primary shard，P0，P1，P2。每次增删改查一个document的时候，都会带过来一个routing number，默认就是这个document的_id（可能是手动指定，也可能是自动生成）。所以routing = _id，假设_id=1，会将这个routing值，传入一个hash函数中，产出一个routing值的hash值，hash(routing) = 21。然后将hash函数产出的值对这个index的primary shard的数量求余数，21 % 3 = 0<br>就决定了，这个document就放在P0上。<strong>决定一个document在哪个shard上，最重要的一个值就是routing值，默认是_id，也可以手动指定，相同的routing值，每次过来，从hash函数中，产出的hash值一定是相同的</strong>。无论hash值是几，无论是什么数字，对<code>number_of_primary_shards</code>求余数，结果一定是在<code>0~number_of_primary_shards</code>-1之间这个范围内的，这里是0,1,2。</p><h2 id="id还是自定义routing值"><a href="#id还是自定义routing值" class="headerlink" title="_id还是自定义routing值"></a>_id还是自定义routing值</h2><p>默认的routing就是_id<br>也可以在发送请求的时候，手动指定一个routing值，比如<code>put /index/type/id?routing=user_id</code></p><p>手动指定routing value是很有用的，可以保证某一类document一定被路由到一个shard上去，那么在后续进行应用级别的负载均衡，以及提升批量读取的性能的时候，是很有帮助的。</p><blockquote><p>比如在实际的工作当中，如果大量的查询是基于某一个字段的查询，那么可以在添加数据的时候设置这个字段的ID为routing值，比如用户ID，这样在做查询和聚合的时候，ES只需要去一个shard里就能找到所有的数据，提升性能。</p></blockquote><h2 id="primary-shard数量不可变的谜底"><a href="#primary-shard数量不可变的谜底" class="headerlink" title="primary shard数量不可变的谜底"></a>primary shard数量不可变的谜底</h2><p>ES在创建index的时候设置了primary shard数量和replica shard数量，replica数量是可以修改的，但是primary shard的数量却不能修改。正是因为跟Document的路由公式有关，所以如果primary shard数量发生了变化，如果后面根据ID去查询一个数据，新的路由算法去计算分配，会发现根本找不到这个数据，间接导致数据丢失。</p><h1 id="Document增删改的内部原理"><a href="#Document增删改的内部原理" class="headerlink" title="Document增删改的内部原理"></a>Document增删改的内部原理</h1><p>客户端先选择一个节点发送请求，在一般的ES部署架构中，会有一个client节点，专门用来接收客户端的请求，它既不保存元数据，也不保存数据，只是协调请求转发和数据的聚合，分担master节点的压力。</p><p>节点对请求进行路由，将请求转发到路由以后的节点上，然后primary shard会在自己本地创建Document，建立索引，最后把响应结果返回给client。</p><p>所有的增删改操作，都只能由primary shard处理。</p><h1 id="写一致性原理"><a href="#写一致性原理" class="headerlink" title="写一致性原理"></a>写一致性原理</h1><p>我们在发送任何一个增删改操作的时候，比如说put /index/type/id，都可以带上一个consistency参数，指明我们想要的写一致性是什么？<br>put /index/type/id?consistency=quorum</p><ul><li>one：要求我们这个写操作，只要有一个primary shard是active活跃可用的，就可以执行</li><li>all：要求我们这个写操作，必须所有的primary shard和replica shard都是活跃的，才可以执行这个写操作</li><li>quorum：默认的值，要求所有的shard中，必须是大部分的shard都是活跃的，可用的，才可以执行这个写操作</li></ul><h2 id="quorum机制"><a href="#quorum机制" class="headerlink" title="quorum机制"></a>quorum机制</h2><p>写之前必须确保大多数shard都可用，那么大多数是多少？这里有一个算法：</p><blockquote><p>quroum=<code>int( (primary + number_of_replicas) / 2 ) + 1</code>，当<code>number_of_replicas&gt;1</code>时才生效</p></blockquote><p>举个例子，3个primary shard，<code>number_of_replicas</code>=1，总共有3 + 3 * 1 = 6个shard。</p><p><code>quorum = int( (3 + 1) / 2 ) + 1 = 3</code></p><p>所以，要求6个shard中至少有3个shard是active状态的，才可以执行这个写操作。</p><p>如果节点数量少于quorum数量，可能导致quorum不齐全，进而导致无法执行任何写操作。</p><p>比如3个primary shard，replica=1，要求至少3个shard是active，3个shard按照之前学习的shard&amp;replica机制，必须在不同的节点上(primary shard和replica shard不能放在一台机器上，同一个primary shard的replica shard也不能放在同一个机器上)，如果说只有1台机器的话，3个shard肯定都没法分配齐全，此时就可能会出现写操作无法执行的情况。</p><p>但是ES提供了一种特殊的处理场景，就是说当<code>number_of_replicas</code>&gt;1时才生效，因为假如说，你就一个primary shard，replica=1，此时就2个shard，套用公式算一下。</p><p>(1 + 1 / 2) + 1 = 2，要求必须有2个shard是活跃的，但是可能就1个node，此时就1个shard是活跃的，如果你不特殊处理的话，导致我们的单节点集群就无法工作。</p><p>quorum不齐全的时候，ES会等待，默认1分钟。等待期间，期望活跃的shard数量可以增加，最后实在不行，就会timeout。</p><p>我们其实可以在写操作的时候，加一个timeout参数，比如说put /index/type/id?timeout=30，这个就是自己去设定quorum不齐全的时候，es的timeout时长，可以缩短，也可以增长。</p><h1 id="ES查询原理"><a href="#ES查询原理" class="headerlink" title="ES查询原理"></a>ES查询原理</h1><p>对于读请求，coordinate node（协作节点）不一定会将请求转发到primary节点上去，因为replica也是可以服务读请求的，而且在转发的时候会采用轮询的负载均衡算法，让读请求均匀的转发到replica shard上。</p><p>如果Document正在建立索引的过程中，只在primary shard上存在，此时replica shard上没有，但是协调节点可能将请求转发到replica shard上，此时就会找不到这个Document。</p><h1 id="bulk-api原理"><a href="#bulk-api原理" class="headerlink" title="bulk api原理"></a>bulk api原理</h1><p>上面在学bulk api的时候，ES对json格式要求非常严格，格式紧凑，对换行也有要求。</p><p>1、bulk中的每个操作都可能要转发到不同的node的shard去执行</p><p>2、如果采用比较良好的json数组格式</p><p>允许任意的换行，整个可读性非常棒，读起来很爽，es拿到那种标准格式的json串以后，要按照下述流程去进行处理</p><ol><li>将json数组解析为JSONArray对象，这个时候，整个数据，就会在内存中出现一份一模一样的拷贝，一份数据是json文本，一份数据是JSONArray对象</li><li>解析json数组里的每个json，对每个请求中的document进行路由</li><li>为路由到同一个shard上的多个请求，创建一个请求数组</li><li>将这个请求数组序列化</li><li>将序列化后的请求数组发送到对应的节点上去</li></ol><p>3、耗费更多内存，更多的jvm gc开销</p><p>我们之前提到过bulk size最佳大小的那个问题，一般建议说在几千条，然后大小在10MB左右，所以可怕的事情来了。假设说现在100个bulk请求发送到了一个节点上去，然后每个请求是10MB，100个请求，就是1000MB = 1GB，然后每个请求的json都copy一份为jsonarray对象，此时内存中的占用就会翻倍，就会占用2GB的内存，甚至还不止。因为弄成jsonarray之后，还可能会多搞一些其他的数据结构，2GB+的内存占用。</p><p>占用更多的内存可能就会积压其他请求的内存使用量，比如说最重要的搜索请求，分析请求，等等，此时就可能会导致其他请求的性能急速下降。<br>另外的话，占用内存更多，就会导致java虚拟机的垃圾回收次数更多，跟频繁，每次要回收的垃圾对象更多，耗费的时间更多，导致es的java虚拟机停止工作线程的时间更多。</p><p>4、现在的奇特格式</p><p>{“action”: {“meta”}}\n<br>{“data”}\n<br>{“action”: {“meta”}}\n<br>{“data”}\n</p><ol><li>不用将其转换为json对象，不会出现内存中的相同数据的拷贝，直接按照换行符切割json</li><li>对每两个一组的json，读取meta，进行document路由</li><li>直接将对应的json发送到node上去</li></ol><p>5、最大的优势在于，不需要将json数组解析为一个JSONArray对象，形成一份大数据的拷贝，浪费内存空间，尽可能地保证性能</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此为龙果学院课程学习笔记，记录以后翻看&lt;/p&gt;
&lt;h1 id=&quot;Document元数据&quot;&gt;&lt;a href=&quot;#Document元数据&quot; class=&quot;headerlink&quot; title=&quot;Document元数据&quot;&gt;&lt;/a&gt;Document元数据&lt;/h1&gt;&lt;h2 id=&quot;index元数据&quot;&gt;&lt;a href=&quot;#index元数据&quot; class=&quot;headerlink&quot; title=&quot;_index元数据&quot;&gt;&lt;/a&gt;_index元数据&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;代表一个document存放在哪个index中。&lt;/li&gt;
&lt;li&gt;类似的数据放在一个索引，非类似的数据放不同索引：product index（包含了所有的商品），sales index（包含了所有的商品销售数据），inventory index（包含了所有库存相关的数据）。如果你把比如product，sales，human resource（employee），全都放在一个大的index里面，比如company index，就不合适。
    
    </summary>
    
      <category term="ElasticSearch" scheme="http://www.saily.top/categories/ElasticSearch/"/>
    
    
      <category term="ElasticSearch" scheme="http://www.saily.top/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>Effective Java 第三版-条款1_考虑使用静态工厂方法而非构造方法</title>
    <link href="http://www.saily.top/2018/08/13/effective-java-3rd-1/"/>
    <id>http://www.saily.top/2018/08/13/effective-java-3rd-1/</id>
    <published>2018-08-13T13:33:51.000Z</published>
    <updated>2019-05-23T14:56:47.499Z</updated>
    
    <content type="html"><![CDATA[<p>先尝试自己翻译，再和龙哥的译文进行对比。</p><h1 id="条款1-考虑使用静态工厂方法而非构造方法"><a href="#条款1-考虑使用静态工厂方法而非构造方法" class="headerlink" title="条款1: 考虑使用静态工厂方法而非构造方法"></a>条款1: 考虑使用静态工厂方法而非构造方法</h1><p>传统方式允许客户端获取一个类的实例，是提供一个公有的构造方法。有另外一种技术获取实例，它应该在每个程序员的工具箱里。类可以提供一个公有的静态工厂方法，就是一个简单的静态方法，它会返回这个类的实例。这里有一个来自<code>Boolean</code>(原生类型boolean的包装类)类的简单例子，这个方法将一个原生类型的布尔值转换成一个Boolean对象引用：<br><a id="more"></a></p><blockquote><p>对于一个类来说，若想让客户端能够获取到其实例，传统⽅式是提供⼀个公有的构造⽅法。 实际上，还有另外一种技术应该成为每个程序员⼯具箱的一部分。类可以提供⼀个公有的静态⼯厂方法，它仅仅是一个可以返回类实例的静态⽅法⽽已。如下这个简单的示例来⾃于 Boolean(即boolean装箱后的类型)。该方法会将⼀个boolean原⽣值转换为⼀个Boolean对象引用:</p></blockquote><blockquote><p>The traditional way for a class to allow a client to obtain an instance is to provide a public constructor. There is another technique that should be a part of every programmer’s toolkit. A class can provide a public static factory method, which is simply a static method that returns an instance of the class. Here’s a simple example from Boolean (the boxed primitive class for boolean). This method translates a boolean primitive value into a Boolean object reference:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">valueOf</span><span class="params">(<span class="keyword">boolean</span> b)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> b ? Boolean.TRUE : Boolean.FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意静态工厂方法和设计模式[Gamma95]里的<code>工厂方法模式</code>并不一样，这里描述的静态工厂方法跟设计模式没有关联。</p><blockquote><p>请注意，上面这个静态⼯厂⽅法与设计模式[Gamma95]中的⼯厂方法模式并不一样。本条款所介绍的静态⼯厂⽅法在设计模式一书中并没有直接的等价物。</p><p>Note that a static factory method is not the same as the Factory Method pattern from Design Patterns [Gamma95]. The static factory method described in this item has no direct equivalent in Design Patterns.</p></blockquote><p>一个类可以提供静态工厂方法给它的客户端以替代构造方法。用静态工厂方法替代构造方法既有好处，也有坏处。</p><blockquote><p>除了了公有构造方法外，类还可以向其客户端提供静态⼯厂方法。相⽐于公有构造方法来说，提供静态⼯厂⽅法有利也有弊。</p></blockquote><blockquote><p>A class can provide its clients with static factory methods instead of, or in addition to, public constructors. Providing a static factory method instead of a public constructor has both advantages and disadvantages.</p></blockquote><p><strong>静态工厂方法的一个好处是不像构造方法，它们有方法名字</strong>。如果是构造方法，它的参数并不能描述构造方法返回的实例，但是有一个好名字的静态工厂方法更好理解，也让客户端代码更有易读性。举个例子，构造方法<strong>BigInteger(int, int, Random)</strong>返回一个可能为质数的BigInteger，用静态工厂方法<strong>BigInteger.probablePrime</strong>(此方法在 Java 4中加入)可能会更好表达它的意思。</p><blockquote><p>静态⼯厂⽅法的一个好处在于，相⽐于构造方法来说，他们拥有名字。如果构造方法的参数本身没有描述出将要返回的对象，那么拥有恰当名字的静态⼯厂将会更加易于使用，所生成的客户端代码的可读性也更好。比如说，构造方法BigInteger(int, int, Random)会返回⼀一个可能为质数的BigInteger，不不过使⽤用静态⼯厂方法BigInteger.probablePrime的表述性会更更棒(该⽅法是在Java 4中被加⼊进来的)。</p><p>One advantage of static factory methods is that, unlike constructors, they have names. If the parameters to a constructor do not, in and of themselves, describe the object being returned, a static factory with a well-chosen name is easier to use and the resulting client code easier to read. For example, the constructor BigInteger(int, int, Random), which returns a BigInteger that is probably prime, would have been better expressed as a static factory method named BigInteger.probablePrime. (This method was added in Java 4.)</p></blockquote><p>一个类只能有一个相同签名的构造方法。程序员知道如何绕过这个限制，那就是提供2个构造方法，但是参数的顺序不一样。这是很糟糕的主意，用户永远不能记住哪个构造方法是哪个，然后会不小心调用到错误的构造方法。人们在读代码的时候如果不看类的文档也不会知道这些构造方法干了些什么。</p><blockquote><p>一个类只能拥有唯⼀一个具有给定签名的构造⽅法。程序员们已经知道如何绕过这个限制了， 那就是提供两个构造方法，这两个构造方法之间唯一的差别就是参数列列表中参数类型的顺序是不同的。这是一个⾮常差劲的想法。这种API的使用者永远都记不住哪个构造⽅法是哪个，最终陷⼊到调用了错误的构造⽅法的窘境。当⽤户阅读了使用这种构造⽅法的代码时，他们在不查阅类文档的情况下是不可能搞清楚代码到底在做什么事情。</p><p>A class can have only a single constructor with a given signature. Program- mers have been known to get around this restriction by providing two constructors whose parameter lists differ only in the order of their parameter types. This is a really bad idea. The user of such an API will never be able to remember which constructor is which and will end up calling the wrong one by mistake. People reading code that uses these constructors will not know what the code does without referring to the class documentation.</p></blockquote><p>因为它们有名字，静态工厂方法没有前面提到的限制。如果一个类需要多个相同签名的构造方法，用静态工厂方法替代构造方法，<del>并小心地给它们取名字以标记它们的不同之处</del>。</p><blockquote><p>由于拥有名字，因此静态⼯厂方法不会遇到上面所讨论的限制。当⼀个类需要多个拥有相同签名的构造方法时，只需使⽤静态⼯厂⽅法来代替构造方法，<font color="red">并精心选择好名字来明确他们之间的差别即可。</font></p><p>Because they have names, static factory methods don’t share the restriction discussed in the previous paragraph. In cases where a class seems to require multiple constructors with the same signature, replace the constructors with static factory methods <font color="red">and carefully chosen names to highlight their differences.</font></p></blockquote><p><strong>静态工厂方法的第二个好处是不像构造方法，它们不需要每次被调用的时候都创建一个新的对象。</strong>这允许不可变对象（条款17）用一个预设好的实例，<del>或者缓存一个已经创建好的实例</del>，这样可以反复的分发它们来避免创建不必要的重复对象。<strong>Boolean.valueOf(boolean)</strong>方法<del>说明</del>了这种技巧：它永远不创建对象。这种技巧跟享元模式比较相似，如果相同的对象经常被请求到，它可以大幅度地提升性能，特别是当创建对象开销很大的时候。</p><blockquote><p>静态⼯厂⽅法的第2个好处在于，相⽐比于构造⽅法来说，他们不必在每次调用时都创建⼀个新的对象。这样就可以让不变类使⽤用预先构造好的实例，<font color="red">或是在构造时将其缓存起来</font>，从⽽避免了创建不必要的重复对象的情况。Boolean.valueOf(boolean)⽅法就<strong>使用</strong>了这项技术: 它永远不会创建对象。该项技术类似于享元模式。如果经常需要请求同样的对象，那么这种做法将会极大改进性能，特别是在对象创建成本很高的情况下更是如此。</p><p>A second advantage of static factory methods is that, unlike constructors, they are not required to create a new object each time they’re invoked. This allows immutable classes (Item 17) to use preconstructed instances, <font color="red">or to cache instances as they’re constructed</font>, and dispense them repeatedly to avoid creating unnecessary duplicate objects. The Boolean.valueOf(boolean) method <strong>illustrates</strong> this technique: it never creates an object. This technique is similar to the Flyweight pattern [Gamma95]. It can greatly improve performance if equivalent objects are requested often, especially if they are expensive to create.</p></blockquote><p><del>静态工厂方法返回经常被请求的同一个对象的能力允许类在任何时刻都对这些实例维持严格的控制</del>。能做到这样的类被称为实例受控的类。<del>有很多理由去写实例受控的类</del>，实例受控允许一个类保证它是单例的（条款3）或者不可实例化（条款4）。而且，它能让一个不可变的值类（条款17）保证不会有2个相等的实例存在：有且只有当a == b时候，才会有a.equals(b)。这是享元模式的基础，枚举也提供了这种保证。</p><blockquote><p><font color="red">静态⼯厂⽅法可以在重复调⽤的情况下返回同一个对象的能力使得类可以在任何时候都能严格控制哪些实例可以存在</font>。采取这种做法的类叫做实例控制。<font color="red">编写实例控制类有几个原因</font>。 借助于实例控制，类可以确保它⾃身是一个单例或是不可实例化的。此外，还可以让不可变的值类确保不会存在两个相等的实例:当且仅当a == b时，a.equals(b)才为true。这是享元模式的基础。枚举类型提供了这种保证。</p><p><font color="red">The ability of static factory methods to return the same object from repeated invocations allows classes to maintain strict control over what instances exist at any time.</font> Classes that do this are said to be instance-controlled. <font color="red">There are several reasons to write instance-controlled classes.</font> Instance control allows a class to guar- antee that it is a singleton (Item 3) or noninstantiable (Item 4). Also, it allows an immutable value class (Item 17) to make the guarantee that no two equal instances exist: a.equals(b) if and only if a == b. This is the basis of the Flyweight pattern [Gamma95]. Enum types (Item 34) provide this guarantee.</p></blockquote><p><strong>静态工厂方法第三个好处是不像构造方法，它们可以返回它返回类型的任何子类的对象。</strong>这给你了很大的灵活性去选择返回对象的类型。</p><blockquote><p>静态⼯厂⽅法的第3个好处在于，相比于构造方法来说，他们可以返回所声明的返回类型的任何子类型的对象。这样，我们在选择所返回的对象类型时就拥有了更大的灵活性。</p><p>A third advantage of static factory methods is that, unlike constructors, they can return an object of any subtype of their return type. This gives you great flexibility in choosing the class of the returned object.</p></blockquote><p><del>灵活性的一种应用是一个API可以返回非公有类的对象。用这种方式隐藏类的实现提供了很紧凑的API。这种技术适用于基于接口的框架(interface-based frameworks 条款20)，接口为静态工厂方法提供了自然的返回类型。</del></p><blockquote><font color="red">这种灵活性的⼀个应⽤用场景就是API能够在无需将类声明为公有的情况下就可以返回对象。 以这种⽅式隐藏实现类使得API变得⾮常紧凑。这项技术也被应⽤用到了基于接口的框架中， 其中接口就为静态⼯厂⽅法提供了了⾃然⽽然的返回类型。<br><br>One application of this flexibility is that an API can return objects without making their classes public. Hiding implementation classes in this fashion leads to a very compact API. This technique lends itself to interface-based frameworks (Item 20), where interfaces provide natural return types for static factory methods.</font></blockquote><p>在Java 8之前，接口不能有静态方法。按照惯例，<code>Type</code>接口的静态工厂方法会被放进叫做<code>Types</code>的不可实例化的伴生类中(noninstantiable companion class)。例如，Java集合框架对它们自己的接口有45个实用的实现，提供不可变的集合，同步的集合等等。差不多所有的实现都是通过静态工厂方法导出到一个不可实例化的类中（java.util.Collections），所有返回对象的类都是非公有的。</p><blockquote><p>在Java 8之前，接口是不能拥有静态方法的。根据约定，针对名为Type的接口的静态⼯厂⽅法会被放到名为Types的不可实例例化的伴生类当中。⽐如说，Java集合框架有接⼝的45个辅助实现，提供了不可修改的集合、同步集合等等。⼏乎所有这些实现都是通过⼀个不可实例化的类(java.util.Collections)中的静态⼯厂⽅方法公开的。所返回对象的类型都是⾮公有的。</p><p>Prior to Java 8, interfaces couldn’t have static methods. By convention, static factory methods for an interface named Type were put in a noninstantiable companion class (Item 4) named Types. For example, the Java Collections Framework has forty-five utility implementations of its interfaces, providing unmodifiable collections, synchronized collections, and the like. Nearly all of these implemen- tations are exported via static factory methods in one noninstantiable class (java.util.Collections). The classes of the returned objects are all nonpublic.</p></blockquote><p><del>集合框架API比导出45个独立的公共类要小得多，每个类都有一个方便的实现</del>。减少的不仅仅是大量的API，还有概念的权重: 程序员为了使用API必须掌握的概念的数量和难度。<del>程序员知道返回的对象精确地具有其接口指定的API</del>，所以不需要阅读额外的实现类的类文档。此外，用这种静态工厂方法需要客户端通过接口引用返回的对象，而不是通过实现类引用，这通常是很好的实践（条款64）。</p><blockquote><p><font color="red">集合框架API要⽐它本来的样⼦小很多，它公开了45个独立的公有类，每个类都针对于⼀个便捷的实现</font>。这并不仅仅只是API的数量少了，更为重要的是概念上的数量少了:程序员使用API所需掌握的概念的数量和难度都降低了了。<font color="red">程序员知道所返回的对象是由其接口API所精确描述的</font>，因此⽆需再去阅读实现类的⽂档了。此外，使用这种静态工厂⽅法要求客户端引用接口而非实现类所返回的对象，这通常来说是⼀个很好的实践。</p><p><font color="red">The Collections Framework API is much smaller than it would have been had it exported forty-five separate public classes, one for each convenience implementation</font>. It is not just the bulk of the API that is reduced but the conceptual weight: the number and difficulty of the concepts that programmers must master in order to use the API. <font color="red">The programmer knows that the returned object has precisely the API specified by its interface</font>, so there is no need to read additional class documentation for the implementation class. Furthermore, using such a static factory method requires the client to refer to the returned object by interface rather than implementation class, which is generally good practice (Item 64).</p></blockquote><p>对Java8来说，接口不能包含静态方法的限制已经被移除了，所以没有理由为接口提供一个不可实例化的伴生类。许多这样的类中的公有静态成员变量应该放在接口中。但是，请注意，这些静态方法的一些实现代码还是有必要放在一个单独包级别的私有类中。这是因为Java8要求所有接口的静态成员都是公有的。Java 9允许私有的静态方法，但是静态变量和静态成员类仍然只能是公有的。</p><blockquote><p>Java 8已经取消了接口中不能包含静态⽅法的限制，这样一般来说，我们就没必要再为接⼝提供不可实例化的伴生类了。很多本应该位于这种类中的公有静态成员现在应该放到接⼝自身当中了。不过，值得注意的是，我们还是需要将这些静态⽅法的实现代码放到单独的包级别的私有类中。这是因为Java 8要求接口的所有静态成员都必须是公有的。Java 9允许私有的静态方法，不过静态字段与静态成员类依旧得是公有的。</p><p>As of Java 8, the restriction that interfaces cannot contain static methods was eliminated, so there is typically little reason to provide a noninstantiable companion class for an interface. Many public static members that would have been at home in such a class should instead be put in the interface itself. Note, however, that it may still be necessary to put the bulk of the implementation code behind these static methods in a separate package-private class. This is because Java 8 requires all static members of an interface to be public. Java 9 allows private static methods, but static fields and static member classes are still required to be public.</p></blockquote><p><strong>静态工厂的第四个好处是返回对象的类型作为输入参数的函数，它可以随调用的不同而变化。</strong>所声明返回类型的任何子类型都是被允许的。<del>返回对象的类型也可以随着版本的变化而变化。</del></p><blockquote><p><strong>静态⼯厂的第4个好处在于，作为输入参数的函数，返回对象所属的类会随着调⽤用的不同而不同</strong>。所声明的返回类型的任何子类型都是允许的。返回对象所属的类也会随着调⽤的不同而不不同。</p><p>A fourth advantage of static factories is that the class of the returned object can vary from call to call as a function of the input parameters. Any sub- type of the declared return type is permissible. The class of the returned object can also vary from release to release.</p></blockquote><p><strong>EnumSet</strong>类（条款36）没有公有的构造方法，只有静态工厂。在<strong>OpenJDK</strong>的实现里，他们会返回2个子类中的一个实例，这取决于枚举类型的长度：<del>如果它有64以下个元素，那么大多数枚举类型会返回<strong>RegularEnumSet</strong>的实例</del>，底层是用一个long实现的；如果枚举类型有超过65个元素，那么静态工厂方法会返回<strong>JumboEnumSet</strong>的实例，底层是用一个long数组实现的。</p><blockquote><p>EnumSet类(条款36)并没有公有构造⽅方法，只有静态工厂。在OpenJDK实现中，他们会返回两个子类的实例，到底返回哪⼀一个则取决于底层枚举类型的⼤小:<font color="red">如果拥有的元素数量小于等于64个(这也是⼤大多数枚举类型的情况)，那么静态⼯厂就会返回⼀个RegularEnumSet实例</font>，其底层是个long类型;如果枚举类型拥有的元素数量⼤于等于65个，那么⼯厂就会返回⼀个JumboEnumSet实例，其底层是个long类型的数组。</p><p>The EnumSet class (Item 36) has no public constructors, only static factories. In the OpenJDK implementation, they return an instance of one of two subclasses, depending on the size of the underlying enum type: <font color="red">if it has sixty-four or fewer elements, as most enum types do, the static factories return a RegularEnumSet instance</font>, which is backed by a single long; if the enum type has sixty-five or more elements, the factories return a JumboEnumSet instance, backed by a long array.</p></blockquote><p>这2个实现类对客户端来说是不可见的，<del>如果<strong>RegularEnumSet</strong>停止对小枚举类型提供高性能的优势</del>，它可以在未来的发布中被移除掉，且不会有什么副作用。同样地，在将来的发布中也可以添加第三种或者第四种<strong>EnumSet</strong>的实现，如果能带来性能上的提升。客户端也不需要关心从工厂获得的对象类型是什么；他们只需要知道那是<strong>EnumSet</strong>的某个子类。</p><blockquote><p>这两个实现类对于客户端来说是不可见的。如果RegularEnumSet对于小的枚举类型不再有性能上的优势，那么就可以在未来的版本中将其剔除而不会产⽣生任何副作用。与之类似，如果经过验证能够提供更好的性能，那么未来的版本中就可以增加第3种或是第4种EnumSet实现。客户端既不不知晓，也不不关⼼心他们从⼯厂中所得到的对象的真正类型是什么;他们只关 ⼼所得到的是EnumSet的某个⼦类。</p><p>The existence of these two implementation classes is invisible to clients. <font color="red">If RegularEnumSet ceased to offer performance advantages for small enum types</font>, it could be eliminated from a future release with no ill effects. Similarly, a future release could add a third or fourth implementation of EnumSet if it proved beneficial for performance. Clients neither know nor care about the class of the object they get back from the factory; they care only that it is some subclass of EnumSet.</p></blockquote><p><del><strong>静态工厂的第五个好处是当返回对象的类包含了需要的方法，这个类不需要存在。</strong></del>这样灵活的静态工厂方法是服务提供者框架（<em>service provider frameworks</em>）的基础，就像<strong>Java Database Connectivity API (JDBC)</strong>。<del>一个服务提供者框架是系统提供一个服务的实现</del>，系统让实现对客户端可用，对客户端实现进行解耦。</p><blockquote><p><font color="red">静态⼯厂的第5个好处在于，在使用包含了方法的类时，返回对象所属的类不必事先存在。</font> 这种灵活的静态工厂方法构成了服务提供者框架的基础，比如说Java Database Connectivity API(JDBC)。<font color="red">服务提供者框架是这样一种系统，提供者实现了某个服务，系统将其实现公开给客户端</font>，从⽽实现了客户端与实现之间的解耦。</p><p><font color="red">A fifth advantage of static factories is that the class of the returned object need not exist when the class containing the method is written.</font> Such flexible static factory methods form the basis of service provider frameworks, like the Java Database Connectivity API (JDBC). <font color="red">A service provider framework is a system in which providers implement a service, and the system makes the implementations available to clients</font> decoupling the clients from the implementations.</p></blockquote><p>服务提供者框架有三个基本的组件：一个服务接口，代表一个实现；一个提供者注册的API，提供用来注册实现；一个服务访问API，客户端用来获得一个服务的实例。客户端访问API可能会允许客户端指定一个特定的标准来选择一个实现。如果没有这样的标准，API会返回一个默认实现的实例，或者让客户端遍历所有可用的实现。服务访问API是灵活的静态工厂，构成了服务提供者框架的基础。</p><blockquote><p>服务提供者框架存在3个基本组件:服务接口(表示实现)、提供者注册API(提供者通过它来注册实现)以及服务访问API(客户端通过它来获取服务实例例)。客户端可以通过服务访问API来指定标准，从⽽而选择相应的实现。如果不存在这样的标准，那么API就会返回默认实现的实例，或是让客户端遍历所有可用的实现。服务访问API是一种灵活的静态⼯厂，它构成了服务提供者框架的基础。</p><p>There are three essential components in a service provider framework: a service interface, which represents an implementation; a provider registration API, which providers use to register implementations; and a service access API, which clients use to obtain instances of the service. The service access API may allow clients to specify criteria for choosing an implementation. In the absence of such criteria, the API returns an instance of a default implementation, or allows the client to cycle through all available implementations. The service access API is the flexible static factory that forms the basis of the service provider framework.</p></blockquote><p>服务提供者框架的第四个可选组件是服务提供者接口，它描述了生产服务接口实例的工厂对象。在没有服务提供者接口的情况下，实现必须以反射的方式实例化（条款65）。在JDBC中，<strong>Connection</strong>扮演了服务接口，DriverManager.registerDriver是提供者注册API，DriverManager.getConnection是服务访问API，Driver是服务提供者接口。</p><blockquote><p>服务提供者框架第4个可选的组件是服务提供者接口，它描述了了⽤于⽣产服务接口实例的⼯⼚对象。如果服务提供者接口不存在，那么实现就必须要通过反射的方式来实例化(条款 65)。对于JDBC来说，Connection就扮演着服务接⼝的⻆色， DriverManager.registerDriver是提供者注册API，DriverManager.getConnection是服务访问 API，而Driver则是服务提供者接口。</p><p>An optional fourth component of a service provider framework is a service provider interface, which describes a factory object that produce instances of the service interface. In the absence of a service provider interface, implementations must be instantiated reflectively (Item 65). In the case of JDBC, Connection plays the part of the service interface, DriverManager.registerDriver is the provider registration API, DriverManager.getConnection is the service access API, and Driver is the service provider interface.</p></blockquote><p>有许多服务提供者框架的变种。例如，服务访问API可以向客户端返回一个比服务提供者供应的更丰富的接口。这是<em>桥接模式</em>。依赖注入框架可以被认为是一个很强的服务提供者，从Java6开始，平台包含了一个<del>强大</del>的服务提供者框架，<strong>java.util.ServiceLoader</strong>，所以你不需要通常也不应该自己写一个（条款59）。JDBC不用ServiceLoader，因为它更早发布。</p><blockquote><p>服务提供者框架模式有很多变种。⽐如说，服务访问API可以向客户端返回比提供者所规定的更为宽泛的服务接口。这就是桥接模式[Gamma95]。依赖注⼊框架(条款5)可以看作是一种强大的服务提供者。从Java 6开始，平台包含了一个<font color="red">通⽤</font>的服务提供者框架，即 java.util.ServiceLoader。因此，你无需，通常来说也不应该再编写⾃己的了(条款59)。 JDBC并未使用ServiceLoader，因为前者出现的时间要更早⼀些。</p><p>There are many variants of the service provider framework pattern. For exam- ple, the service access API can return a richer service interface to clients than the one furnished by providers. This is the Bridge pattern [Gamma95]. Dependency injection frameworks (Item 5) can be viewed as powerful service providers. Since Java 6, the platform includes a <font color="red">general-purpose</font> service provider framework, java.util.ServiceLoader, so you needn’t, and generally shouldn’t, write your own (Item 59). JDBC doesn’t use ServiceLoader, as the former predates the latter.</p></blockquote><p>仅提供静态工厂方法的主要限制是，没有公有或受保护构造函数的类不能被子类化。例如，<del>子类化集合框架的实现类就很方便(翻译的什么鬼)</del>。可以说这是一种因祸得福的做法，因为它鼓励程序员用组合而不是继承（条款18），并且对于不可变类是必须的。</p><blockquote><p>只提供静态⼯厂方法的主要限制在于，没有公有或是受保护构造⽅法的类是⽆法被⼦子类化的。<br>⽐如说，<font color="red">我们⽆法子类化集合框架中的任何便捷实现类</font>。另一方面，这么做会⿎鼓励程序员们使⽤用组合⽽而⾮继承(条款18)，并且这对于不变类型来说也是需要的(条款17)。<br>The main limitation of providing only static factory methods is that classes without public or protected constructors cannot be subclassed. For example, <font color="red">it is impossible to subclass any of the convenience implementation classes in the Collections Framework</font>. Arguably this can be a blessing in disguise because it encourages programmers to use composition instead of inheritance (Item 18), and is required for immutable types (Item 17).</p></blockquote><p>静态工厂方法的第二个缺点是程序员很难找到它们。它们在API文档中不像构造函数那样清晰，因此很难弄清楚如何用提供的静态工厂方法实例化一个类而不是构造函数。<del>Javadoc工具某一天可能将注意力转换到静态工厂方法上</del>。与此同时，<del>你可以通过在类或接口的静态工厂方法的文档上引起注意(<font color="red">是多注意文档里的静态工厂方法</font>)</del>，以及遵守通用命名约定来减少这个问题。下面是一些静态工厂方法的常见名称，这个列表还远远不够详尽：</p><blockquote><p>静态⼯厂方法的第2个缺点在于，程序员们很难找到他们。他们并不像构造⽅法那样在API⽂档中有清楚的说明，这样对于既提供静态⼯厂⽅法，⼜提供构造方法的类来说，我们就很难知晓到底该⽤那种⽅式来实例化它。可能在未来的某⼀一天，Javadoc工具会<font color="red">重视</font>起静态⼯厂方法。与此同时，<font color="red">你可以多注意到类或接⼝文档中的静态⼯厂</font>并坚持使用常见的命名约定来减少此类问题的发生。如下是静态工⼚方法的一些常⻅见名字，这个列表只是部分，还不不完全:</p><p>A second shortcoming of static factory methods is that they are hard for programmers to find. They do not stand out in API documentation in the waythat constructors do, so it can be difficult to figure out how to instantiate a class that provides static factory methods instead of constructors. The Javadoc tool may someday draw attention to static factory methods. In the meantime, you can reduce this problem by <font color="red">drawing attention to static factories in class or interface documentation</font> and by adhering to common naming conventions. Here are some common names for static factory methods. This list is far from exhaustive:</p></blockquote><ul><li><p><strong>form</strong>–一个<em>类型转换方法</em>接受单个参数，并返回这个类型一个相应的实例，例如：</p><p>  <code>Date d = Date.from(instant);</code></p></li><li><p><strong>of</strong>–一个<em>聚合方法</em>接受多个参数，并返回一个组装他们的类型的实例，例如：</p><p>  <code>Set&lt;Rank&gt; faceCards = EnumSet.of(JACK, QUEEN, KING);</code></p></li><li><p><strong>valueOf</strong>–from和of的一种冗长的形式，例如：</p><p>  <code>BigInteger prime = BigInteger.valueOf(Integer.MAX_VALUE);</code></p></li><li><p><strong>instance或者getInstance</strong>–根据它的参数返回一个实例，但是他们不是相同的值，例如：</p><p>  <code>StackWalker luke = StackWalker.getInstance(options);</code></p></li><li><p><strong>create或者newInstance</strong>–跟instance或者getInstance是一样的，但是方法能保证每次返回的都是新的实例，例如：</p><p>  <code>Object newArray = Array.newInstance(classObject, arrayLen);</code></p></li><li><p><strong>getType</strong>–和getInstance一样，但是这个工厂方法是用在另外一个不同的类中。<strong>Type</strong>是工厂方法返回对象的类型。例如：</p><p>  <code>FileStore fs = Files.getFileStore(path);</code></p></li><li><p><strong>newType</strong>–和newInstance一样，但是这个工厂方法是用在另外一个不同的类中。<strong>Type</strong>是工厂方法返回对象的类型。例如：</p><p>  <code>BufferedReader br = Files.newBufferedReader(path);</code></p></li><li><p><strong>type</strong>–getType和newType的一种另外一种简介的形式，例如：</p><p>  <code>List&lt;Complaint&gt; litany = Collections.list(legacyLitany);</code></p></li></ul><p>总之，静态工厂方法和公有的构造方法都有各自的用途，理解它们的有点是值得的。通常静态工厂更好，所以避免在没有首先考虑静态工厂的情况下提供公有的构造方法。</p><blockquote><p>总结⼀一下，静态⼯厂方法与公有的构造方法都有各自的适用场景，我们需要理解他们各自的优点。通常，静态⼯厂是优先选择的，这样可以避免习惯性地在没有考虑静态⼯厂的情况下<br>就提供公有构造⽅方法的情况发⽣生。</p><p>In summary, static factory methods and public constructors both have their uses, and it pays to understand their relative merits. Often static factories are preferable, so avoid the reflex to provide public constructors without first consid- ering static factories.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先尝试自己翻译，再和龙哥的译文进行对比。&lt;/p&gt;
&lt;h1 id=&quot;条款1-考虑使用静态工厂方法而非构造方法&quot;&gt;&lt;a href=&quot;#条款1-考虑使用静态工厂方法而非构造方法&quot; class=&quot;headerlink&quot; title=&quot;条款1: 考虑使用静态工厂方法而非构造方法&quot;&gt;&lt;/a&gt;条款1: 考虑使用静态工厂方法而非构造方法&lt;/h1&gt;&lt;p&gt;传统方式允许客户端获取一个类的实例，是提供一个公有的构造方法。有另外一种技术获取实例，它应该在每个程序员的工具箱里。类可以提供一个公有的静态工厂方法，就是一个简单的静态方法，它会返回这个类的实例。这里有一个来自&lt;code&gt;Boolean&lt;/code&gt;(原生类型boolean的包装类)类的简单例子，这个方法将一个原生类型的布尔值转换成一个Boolean对象引用：&lt;br&gt;
    
    </summary>
    
      <category term="Effective Java" scheme="http://www.saily.top/categories/Effective-Java/"/>
    
    
      <category term="java" scheme="http://www.saily.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>centos7安装redis4.0.10并进行生产环境部署</title>
    <link href="http://www.saily.top/2018/07/19/redis-install/"/>
    <id>http://www.saily.top/2018/07/19/redis-install/</id>
    <published>2018-07-19T15:24:16.000Z</published>
    <updated>2018-09-15T15:27:07.463Z</updated>
    
    <content type="html"><![CDATA[<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>直奔主题，官网下载redis最新版本（2018年07月19日）</p><p><a href="http://download.redis.io/releases/redis-4.0.10.tar.gz" target="_blank" rel="noopener">http://download.redis.io/releases/redis-4.0.10.tar.gz</a></p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>安装tcl</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install tcl</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="安装单机版Reids"><a href="#安装单机版Reids" class="headerlink" title="安装单机版Reids"></a>安装单机版Reids</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/<span class="built_in">local</span>/redis &amp;&amp; <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/redis</span><br><span class="line">wget http://download.redis.io/releases/redis-4.0.10.tar.gz</span><br><span class="line">tar -zxvf redis-4.0.10.tar.gz</span><br><span class="line"><span class="built_in">cd</span> redis-4.0.10</span><br><span class="line">make &amp;&amp; make <span class="built_in">test</span> &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>最后一步可能需要等的有点久，安装完成以后就开始进行生产环境配置。</p><h1 id="Redis生产环境启动方案"><a href="#Redis生产环境启动方案" class="headerlink" title="Redis生产环境启动方案"></a>Redis生产环境启动方案</h1><ol><li>redis的<code>utils</code>目录下，有个<code>redis_init_script</code>脚本</li><li><p>将<code>redis_init_script</code>脚本拷贝到linux的<code>/etc/init.d</code>目录中，将<code>redis_init_script</code>重命名为<code>redis_6370</code>，<code>6370</code>是我们希望这个redis实例监听的端口号</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/<span class="built_in">local</span>/redis/redis-4.0.10/utils/redis_init_scrip /etc/init.d/redis_6370</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li>修改<code>redis_6370</code>脚本的第6行的REDISPORT，设置为相同的端口号（默认是6379）</li><li>创建两个目录：/etc/redis（存放redis的配置文件），/var/redis/6370（存放redis的持久化文件）</li><li><p>修改redis配置文件（默认在根目录下，redis.conf），拷贝到/etc/redis目录中，修改名称为6370.conf</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/<span class="built_in">local</span>/redis/redis-4.0.10/redis.conf /etc/redis/6370.conf</span><br></pre></td></tr></table></figure></li></ol><ol start="6"><li><p>修改redis.conf中的部分配置为生产环境</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 让redis以daemon进程运行</span></span><br><span class="line">daemonizeyes</span><br><span class="line"><span class="comment"># 设置redis的pid文件位置</span></span><br><span class="line">pidfile/var/run/redis_6370.pid </span><br><span class="line"><span class="comment"># 设置redis的监听端口号</span></span><br><span class="line">port6370</span><br><span class="line"><span class="comment"># 设置持久化文件的存储位置</span></span><br><span class="line">dir /var/redis/6370</span><br><span class="line"><span class="comment"># 打开数据持久化</span></span><br><span class="line">appendonly  yes </span><br><span class="line"><span class="comment"># 设置密码</span></span><br><span class="line">requirepass yourpass   </span><br><span class="line"><span class="comment"># 设置连接Redis的地址</span></span><br><span class="line"><span class="comment"># 如果提供给其他机器访问，请在此处设置IP为机器IP</span></span><br><span class="line"><span class="built_in">bind</span>  127.0.0.1</span><br></pre></td></tr></table></figure></li><li><p>启动redis</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/init.d/</span><br><span class="line">chmod 777 redis_6370</span><br><span class="line">./redis_6370 start</span><br></pre></td></tr></table></figure></li><li><p>确认redis进程是否启动</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep redis</span><br></pre></td></tr></table></figure></li><li><p>让redis跟随系统启动自动启动，在<code>/etc/init.d/redis_6370</code>脚本中，最上面，加入两行注释</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"># chkconfig:   2345 90 10</span><br><span class="line"># description:  Redis is a persistent key-value database</span><br></pre></td></tr></table></figure><p> 然后执行命令:</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig redis_6370 on</span><br></pre></td></tr></table></figure></li></ol><h1 id="redis-cli测试"><a href="#redis-cli测试" class="headerlink" title="redis-cli测试"></a>redis-cli测试</h1><h2 id="PING"><a href="#PING" class="headerlink" title="PING"></a>PING</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -p 6370 -a yourpass PING</span><br><span class="line">PONG</span><br></pre></td></tr></table></figure><h2 id="停机"><a href="#停机" class="headerlink" title="停机"></a>停机</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 127.0.0.1 -p 6370 SHUTDOWN</span><br></pre></td></tr></table></figure><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -p 6370 </span><br><span class="line">127.0.0.1:6370&gt; auth yourpass</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6370&gt; PING</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6370&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6370&gt; get k1</span><br><span class="line"><span class="string">"v1"</span></span><br></pre></td></tr></table></figure><p>是不是很简单明了？文章到此结束。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h1&gt;&lt;p&gt;直奔主题，官网下载redis最新版本（2018年07月19日）&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://download.redis.io/releases/redis-4.0.10.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://download.redis.io/releases/redis-4.0.10.tar.gz&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h1&gt;&lt;p&gt;安装tcl&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum install tcl&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="redis" scheme="http://www.saily.top/categories/redis/"/>
    
    
      <category term="redis" scheme="http://www.saily.top/tags/redis/"/>
    
  </entry>
  
</feed>
