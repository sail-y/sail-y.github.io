<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>帆的博客</title>
  <icon>https://www.gravatar.com/avatar/5e6c22ad69915102664d6eb06cca090f</icon>
  <subtitle>扬帆起航</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.saily.top/"/>
  <updated>2020-03-19T15:21:33.806Z</updated>
  <id>http://www.saily.top/</id>
  
  <author>
    <name>帆</name>
    <email>hyyangfan@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Eureka源码02-服务注册流程分析</title>
    <link href="http://www.saily.top/2020/03/18/springcloud/eureka02/"/>
    <id>http://www.saily.top/2020/03/18/springcloud/eureka02/</id>
    <published>2020-03-18T12:05:39.000Z</published>
    <updated>2020-03-19T15:21:33.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="eureka-client启动流程"><a href="#eureka-client启动流程" class="headerlink" title="eureka client启动流程"></a>eureka client启动流程</h1><p>上一篇文章，我们分析了eureka server的启动流程，这一篇来分析一下eureka client的启动流程。我们先要找到启动入口在哪里。在eureka-examples里，有一个ExampleEurekaClient的测试类。要执行这个类，首先需要复制一段代码，设置一些基础属性，这是从eureka-server的单元测试里复制过来的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This will be read by server internal discovery client. We need to salience it.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">injectEurekaConfiguration</span><span class="params">()</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">  String myHostName = InetAddress.getLocalHost().getHostName();</span><br><span class="line">  String myServiceUrl = <span class="string">"http://"</span> + myHostName + <span class="string">":8080/v2/"</span>;</span><br><span class="line"></span><br><span class="line">  System.setProperty(<span class="string">"eureka.region"</span>, <span class="string">"default"</span>);</span><br><span class="line">  System.setProperty(<span class="string">"eureka.name"</span>, <span class="string">"eureka"</span>);</span><br><span class="line">  System.setProperty(<span class="string">"eureka.vipAddress"</span>, <span class="string">"eureka.mydomain.net"</span>);</span><br><span class="line">  System.setProperty(<span class="string">"eureka.port"</span>, <span class="string">"8080"</span>);</span><br><span class="line">  System.setProperty(<span class="string">"eureka.preferSameZone"</span>, <span class="string">"false"</span>);</span><br><span class="line">  System.setProperty(<span class="string">"eureka.shouldUseDns"</span>, <span class="string">"false"</span>);</span><br><span class="line">  System.setProperty(<span class="string">"eureka.shouldFetchRegistry"</span>, <span class="string">"false"</span>);</span><br><span class="line">  System.setProperty(<span class="string">"eureka.serviceUrl.defaultZone"</span>, myServiceUrl);</span><br><span class="line">  System.setProperty(<span class="string">"eureka.serviceUrl.default.defaultZone"</span>, myServiceUrl);</span><br><span class="line">  System.setProperty(<span class="string">"eureka.awsAccessId"</span>, <span class="string">"fake_aws_access_id"</span>);</span><br><span class="line">  System.setProperty(<span class="string">"eureka.awsSecretKey"</span>, <span class="string">"fake_aws_secret_key"</span>);</span><br><span class="line">  System.setProperty(<span class="string">"eureka.numberRegistrySyncRetries"</span>, <span class="string">"0"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>在main方法的第一行调用一下上面的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">    injectEurekaConfiguration();</span><br><span class="line">    ExampleEurekaClient sampleClient = <span class="keyword">new</span> ExampleEurekaClient();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create the client</span></span><br><span class="line">    ApplicationInfoManager applicationInfoManager = initializeApplicationInfoManager(<span class="keyword">new</span> MyDataCenterInstanceConfig());</span><br><span class="line">    EurekaClient client = initializeEurekaClient(applicationInfoManager, <span class="keyword">new</span> DefaultEurekaClientConfig());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// use the client</span></span><br><span class="line">    sampleClient.sendRequestToServiceUsingEureka(client);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// shutdown the client</span></span><br><span class="line">    eurekaClient.shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看下上面这个方法，这段逻辑几乎和上一篇文章中介绍的eureka server启动流程中，初始化eureka client逻辑的是一样的。</p><ol><li>读取eureka-client.properties配置文件，形成服务实例配置，基于接口对外提供服务实例配置项的读取。（MyDataCenterInstanceConfig）</li><li>基于服务实例配置，构造服务实例（InstanceInfo）</li><li>基于eureka client配置和服务实例，构造服务实例管理器（ApplicationInfoManager）</li><li>读取eureka-client.properties配置文件，形成一个eureka client的配置，基于接口对外提供eureka client配置项读取（DefaultEurekaClientConfig）。</li><li>基于eureka client配置，和服务实例管理器构造了一个EurekaClient（DiscoveryClient），保存了一些配置，处理服务的注册和注册表的抓取，启动了几个线程池，启动了网络通信组件，启动了一些调度任务，注册了监控项。</li></ol><p>在DiscoveryClient的构造方法里，做了很多操作，具体可以看下图。</p><h2 id="画图总结"><a href="#画图总结" class="headerlink" title="画图总结"></a>画图总结</h2><p><img src="/img/spring-cloud/eureka client启动流程.jpg" alt="eureka client启动流程"></p><h1 id="eureka-client服务注册逻辑"><a href="#eureka-client服务注册逻辑" class="headerlink" title="eureka client服务注册逻辑"></a>eureka client服务注册逻辑</h1><p>上面的逻辑咱们理完了后，发现不知道服务注册是哪一个步骤完成的，实际上注册的逻辑，是在初始化调度任务那里，和心跳任务一起初始化的<code>InstanceInfoReplicator</code>任务里。<strong>这儿其实感觉比较奇怪，注册服务和实例信息复制，在我们常见的分布式系统里应该是不同的概念，比如redis、mongodb、elastic search里都有副本的概念（Replica），但是在eureka这里，这里面实际上却是注册服务的逻辑。</strong></p><ol><li><code>InstanceInfoReplicator</code>的start方法里，将自己作为一个线程放到一个调度线程池中去了，默认</li></ol><p>是延迟40秒执行。</p><ol start="2"><li><p>那么执行线程的时候，是执行run()方法。</p></li><li><p>在run方法里，刷新了一下服务实例的信息discoveryClient.refreshInstanceInfo();，里面其实是调用ApplicationInfoManager的一些方法刷新了服务实例的配置，看看配置有没有改变，如果改变了，就刷新一下；用健康检查器检查状态，将状态设置到了ApplicationInfoManager中，更新服务实例状态。</p></li><li><p>然后调用discoveryClient.register();进行服务注册。</p></li><li><p>服务注册的时候，是基于EurekaClient的register()方法去注册的，调用的是底层的eurekaTransport的registrationClient，将InstanceInfo服务实例的信息，通过http请求，调用eureka server对外暴露的一个restful接口，将InstanceInfo发送过去。注意：EurekaTransport在构造的下一行代码的时候，调用了<strong>scheduleServerEndpointTask</strong>（一个令人迷惑的方法名），其实这个方法里就初始化了专门用于注册的registrationClient。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">eurekaTransport = <span class="keyword">new</span> EurekaTransport();</span><br><span class="line"><span class="comment">// 其实是初始化eurekaTransport</span></span><br><span class="line">scheduleServerEndpointTask(eurekaTransport, args);</span><br><span class="line">......</span><br><span class="line">httpResponse = eurekaTransport.registrationClient.register(instanceInfo);</span><br></pre></td></tr></table></figure></li><li><p>然后实际上底层执行发送请求的逻辑，实在是非常难找，代码嵌套过多，最后在EurekaHttpClient的子类里，寻找和http库有关的类，我们找到了AbstractJersey2EurekaHttpClient，在这里的<code>register</code>方法，发现了实际发送注册请求的逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送请求，http://localhost:8080/v2/apps/ServiceA</span></span><br><span class="line"><span class="comment">// 发送的是post请求，服务实例的对象打成了一个json发送过去，包含了自己的主机，ip，端口号</span></span><br><span class="line"><span class="comment">// eureka server就知道这个ServiceA这个服务，有一个服务实例，比如是在172.16.21.33、dev-server、8080</span></span><br><span class="line">Builder resourceBuilder = jerseyClient.target(serviceUrl).path(urlPath).request();</span><br></pre></td></tr></table></figure></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>eureka client在服务注册的这块代码，可以也是看到有用到工厂模式、装饰器模式，但是也有很多<strong>槽点</strong>：</p><ol><li>服务注册，不应该放在<code>InstanceInfoReplicator</code>中，语意不明朗。</li><li>负责发送请求的HttpClient，类体系过于<strong>复杂</strong>，导致看代码的人根本找不到对应的client，最后是根据顶层接口(EurekaHttpClient)和项目依赖实际是使用jersey框架来进行restful接口暴露和调用，才找到真正发送服务注册请求的地方(AbstractJersey2EurekaHttpClient)。</li></ol><h1 id="eureka-server收到注册请求的处理"><a href="#eureka-server收到注册请求的处理" class="headerlink" title="eureka server收到注册请求的处理"></a>eureka server收到注册请求的处理</h1><p>上面分析到了，eureka client向eureka server发起了http请求进行注册，下面就看一下在eureka server中，是如何接收并处理注册请求的。</p><p>因为eureka是基于jersey开发，所以我们去找/v2/apps/{appId}这样的post请求路径处理类，这个请求是在eureka-core模块中<code>ApplicationsResource</code>的<code>getApplicationResource</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Path</span>(<span class="string">"&#123;appId&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ApplicationResource <span class="title">getApplicationResource</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  @PathParam(<span class="string">"version"</span>)</span> String version,</span></span><br><span class="line"><span class="function">  @<span class="title">PathParam</span><span class="params">(<span class="string">"appId"</span>)</span> String appId) </span>&#123;</span><br><span class="line">  CurrentRequestVersion.set(Version.toEnum(version));</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ApplicationResource(appId, serverConfig, registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟到ApplicationResource里去找处理post的方法，就找到了接收注册请求的逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@POST</span></span><br><span class="line"><span class="meta">@Consumes</span>(&#123;<span class="string">"application/json"</span>, <span class="string">"application/xml"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Response <span class="title">addInstance</span><span class="params">(InstanceInfo info,</span></span></span><br><span class="line"><span class="function"><span class="params">                            @HeaderParam(PeerEurekaNode.HEADER_REPLICATION)</span> String isReplication) </span>&#123;</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>接收的是InstanceInfo，代表了一个服务实例。</p><p>在单元测试里，有一个ApplicationResourceTest类，包含了许多功能的测试。接下来，在ApplicationResourceTest里，用断点的方式执行testGoodRegistration方法，对注册流程进行调试和源码分析。</p><p><img src="/img/spring-cloud/image-20200319222757757.png" alt="image-20200319222757757"></p><p>InstanceInfo主要包含2部分数据：</p><ol><li>主机名、ip地址、端口号、url地址</li><li>lease（租约）的信息：保持心跳的间隔时间，最近心跳的时间，服务注册的时间，服务启动的时间。</li></ol><p>register逻辑：</p><ol><li><p>检查了一些必要的参数</p></li><li><p>判断是否是在AWS数据中心，做额外的操作</p></li><li><p>调用registry.register(info, “true”.equals(isReplication));（PeerAwareInstanceRegistry）。向服务实例注册表里注册。</p></li><li><p>调用<a href="http://www.saily.top/2020/03/15/springcloud/eureka01/#%E5%A4%84%E7%90%86%E6%B3%A8%E5%86%8C%E7%9B%B8%E5%85%B3%E7%9A%84%E4%BA%8B%E6%83%85">PeerAwareInstanceRegistry</a>父类的register方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(InstanceInfo registrant, <span class="keyword">int</span> leaseDuration, <span class="keyword">boolean</span> isReplication)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    read.lock();</span><br><span class="line">    Map&lt;String, Lease&lt;InstanceInfo&gt;&gt; gMap = registry.get(registrant.getAppName());</span><br><span class="line">    REGISTER.increment(isReplication);</span><br><span class="line">    <span class="comment">// 如果是第一次注册，这个map肯定是null</span></span><br><span class="line">    <span class="comment">// 对Map进行初始化</span></span><br><span class="line">    <span class="keyword">if</span> (gMap == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">final</span> ConcurrentHashMap&lt;String, Lease&lt;InstanceInfo&gt;&gt; gNewMap = <span class="keyword">new</span> ConcurrentHashMap&lt;String, Lease&lt;InstanceInfo&gt;&gt;();</span><br><span class="line">      <span class="comment">// 一个服务会有多个实例，所以这样存</span></span><br><span class="line">      gMap = registry.putIfAbsent(registrant.getAppName(), gNewMap);</span><br><span class="line">      <span class="keyword">if</span> (gMap == <span class="keyword">null</span>) &#123;</span><br><span class="line">        gMap = gNewMap;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 第一次执行，这里肯定也是null</span></span><br><span class="line">    Lease&lt;InstanceInfo&gt; existingLease = gMap.get(registrant.getId());</span><br><span class="line">    ......省略部分代码</span><br><span class="line">    <span class="comment">// 如果是服务第一次注册，将服务实例信息放到map中</span></span><br><span class="line">    Lease&lt;InstanceInfo&gt; lease = <span class="keyword">new</span> Lease&lt;InstanceInfo&gt;(registrant, leaseDuration);</span><br><span class="line">    <span class="keyword">if</span> (existingLease != <span class="keyword">null</span>) &#123;</span><br><span class="line">      lease.setServiceUpTimestamp(existingLease.getServiceUpTimestamp());</span><br><span class="line">    &#125;</span><br><span class="line">    gMap.put(registrant.getId(), lease);</span><br></pre></td></tr></table></figure><p>这里的registry，他的数据结构里面就是保存的服务和实例信息：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"APP_A"</span>:&#123;</span><br><span class="line">    <span class="attr">"00000"</span>:Lease&lt;InstanceInfo&gt;,</span><br><span class="line">    <span class="attr">"00001"</span>:Lease&lt;InstanceInfo&gt;,</span><br><span class="line">    <span class="attr">"00002"</span>:Lease&lt;InstanceInfo&gt;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"APP_B"</span>:&#123;</span><br><span class="line">    <span class="attr">"10000"</span>:Lease&lt;InstanceInfo&gt;,</span><br><span class="line"> <span class="attr">"20001"</span>:Lease&lt;InstanceInfo&gt;,</span><br><span class="line">    <span class="attr">"30002"</span>:Lease&lt;InstanceInfo&gt;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p>将服务实例的服务名和实例ID访问一个队列中（recentRegisteredQueue）</p></li><li><p>再后面也是更新一些状态。</p></li></ol><p><strong>所以服务注册，最终数据就是服务实例信息放在了一个内存的注册表中：<code>ConcurrentHashMap&lt;String, Map&lt;String, Lease&lt;InstanceInfo&gt;&gt;&gt;</code>。</strong></p><p>注册这里包含了一个读写锁的应用，ReentrantReadWriteLock，在这里注册的时候，上的是读锁，多个服务实例，可以同时注册。灵活运用读写锁，可以控制多线程的并发，有些操作是可以并发执行的，有些操作的互斥的。</p><h2 id="画图总结-1"><a href="#画图总结-1" class="headerlink" title="画图总结"></a>画图总结</h2><p><img src="/img/spring-cloud/image-20200319232127915.png" alt="image-20200319232127915"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;eureka-client启动流程&quot;&gt;&lt;a href=&quot;#eureka-client启动流程&quot; class=&quot;headerlink&quot; title=&quot;eureka client启动流程&quot;&gt;&lt;/a&gt;eureka client启动流程&lt;/h1&gt;&lt;p&gt;上一篇文章，我们分析了eureka server的启动流程，这一篇来分析一下eureka client的启动流程。我们先要找到启动入口在哪里。在eureka-examples里，有一个ExampleEurekaClient的测试类。要执行这个类，首先需要复制一段代码，设置一些基础属性，这是从eureka-server的单元测试里复制过来的：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * This will be read by server internal discovery client. We need to salience it.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;injectEurekaConfiguration&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; UnknownHostException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  String myHostName = InetAddress.getLocalHost().getHostName();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  String myServiceUrl = &lt;span class=&quot;string&quot;&gt;&quot;http://&quot;&lt;/span&gt; + myHostName + &lt;span class=&quot;string&quot;&gt;&quot;:8080/v2/&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  System.setProperty(&lt;span class=&quot;string&quot;&gt;&quot;eureka.region&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;default&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  System.setProperty(&lt;span class=&quot;string&quot;&gt;&quot;eureka.name&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;eureka&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  System.setProperty(&lt;span class=&quot;string&quot;&gt;&quot;eureka.vipAddress&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;eureka.mydomain.net&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  System.setProperty(&lt;span class=&quot;string&quot;&gt;&quot;eureka.port&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;8080&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  System.setProperty(&lt;span class=&quot;string&quot;&gt;&quot;eureka.preferSameZone&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  System.setProperty(&lt;span class=&quot;string&quot;&gt;&quot;eureka.shouldUseDns&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  System.setProperty(&lt;span class=&quot;string&quot;&gt;&quot;eureka.shouldFetchRegistry&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  System.setProperty(&lt;span class=&quot;string&quot;&gt;&quot;eureka.serviceUrl.defaultZone&quot;&lt;/span&gt;, myServiceUrl);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  System.setProperty(&lt;span class=&quot;string&quot;&gt;&quot;eureka.serviceUrl.default.defaultZone&quot;&lt;/span&gt;, myServiceUrl);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  System.setProperty(&lt;span class=&quot;string&quot;&gt;&quot;eureka.awsAccessId&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;fake_aws_access_id&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  System.setProperty(&lt;span class=&quot;string&quot;&gt;&quot;eureka.awsSecretKey&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;fake_aws_secret_key&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  System.setProperty(&lt;span class=&quot;string&quot;&gt;&quot;eureka.numberRegistrySyncRetries&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="eureka" scheme="http://www.saily.top/categories/eureka/"/>
    
    
      <category term="spring-cloud" scheme="http://www.saily.top/tags/spring-cloud/"/>
    
      <category term="eureka" scheme="http://www.saily.top/tags/eureka/"/>
    
  </entry>
  
  <entry>
    <title>Eureka源码01-eureka启动流程</title>
    <link href="http://www.saily.top/2020/03/15/springcloud/eureka01/"/>
    <id>http://www.saily.top/2020/03/15/springcloud/eureka01/</id>
    <published>2020-03-15T09:05:39.000Z</published>
    <updated>2020-03-19T01:21:45.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何阅读一个开源框架的源码"><a href="#如何阅读一个开源框架的源码" class="headerlink" title="如何阅读一个开源框架的源码"></a>如何阅读一个开源框架的源码</h1><p>如果要阅读一个开源框架的源码，我们应该从什么地方入手。首先应该想到的是，从框架启动的入口入手，比如Eureka，肯定是从Eureka服务本身启动的入口开始。或者我们也可以从框架的单元测试开始看，因为单元测试都包含了框架的核心流程和功能。所以我们通过这2个入口，可以通过打断点执行的方式阅读代码的逻辑。下面我将开始学习Eureka的源码，我将基于<a href="https://github.com/Netflix/eureka.git" target="_blank" rel="noopener">https://github.com/Netflix/eureka.git</a> 的v1.7.2分支进行阅读，因为我目前所用的SpringCloud引入的就是这个版本。<br><a id="more"></a></p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>IDE选用idea2018版本进行阅读，为什么选2018版本，eureka的源码是基于gradle构建的，v1.7.2的分支是基于2.10的gradle版本，这个现在已经比较旧了，在JDK10以上的版本，无法运行，而dea2019已经开始用JDK11开始运行，具体情况可以看这篇文章，<a href="https://blog.csdn.net/jiajane/article/details/103014036" target="_blank" rel="noopener">https://blog.csdn.net/jiajane/article/details/103014036</a>，是类似的问题。经过一番倒腾我最终也没有能在2019版本上加载依赖，所以我还是选择了2018版本开始源码的阅读，使用上没有区别。</p><p>先看下Eureka的核心流程，核心功能包括：</p><ul><li>服务注册</li><li>服务发现</li><li>client向server发送心跳</li><li>client向server获取服务注册表</li><li>服务实例摘除</li><li>自我保护机制</li><li>通信</li></ul><p>下面将从源码找到eureka的启动类，并作为入口进行源码分析。</p><h1 id="启动流程分析"><a href="#启动流程分析" class="headerlink" title="启动流程分析"></a>启动流程分析</h1><p>eureka-server依赖了eureka-client和eureka-core2个模块，server又当服务器，又当作客户端，因为在集群模式下，他们也会相互注册。注册中心相关核心的代码都在eureka-core模块里，也能看出来eureka是基于jersey（类似spring mvc)开发的接口，和客户端http请求，在服务之间相互通信。</p><p><img src="/img/spring-cloud/image-20200315153312195.png" alt="image-20200315153312195"><img src="/img/spring-cloud/image-20200315153257597.png" alt="image-20200315153257597"></p><p>然后eureka-resources里，其实就是一些css、js和jsp文件。</p><p><img src="/img/spring-cloud/image-20200315153346879.png" alt="image-20200315153346879"></p><p>那么eureka-server本质上其实就是一个web应用，并且在eureka-server里发现还有一个web.xml文件，所以我们应该重点分析下<code>web.xml</code>文件，里面包含了一些listener和filter，这些类应该都是我们要重点看一下的源码，先猜一下这几个类都是干什么的。</p><ul><li>com.netflix.eureka.EurekaBootStrap（初始化逻辑？）</li><li>com.netflix.eureka.StatusFilter（状态管理？）</li><li>com.netflix.eureka.ServerRequestAuthFilter（授权认证相关？）</li><li>com.netflix.eureka.RateLimitingFilter（限流控制？）</li><li>com.netflix.eureka.GzipEncodingEnforcingFilter（压缩和编码相关？）</li><li>com.sun.jersey.spi.container.servlet.ServletContainer（jersey框架初始化加载类，类似Spring MVC的DispatcherServlet）</li></ul><p>文件下面的filter-mapping里默认没有开启限流的过滤器，Gzip也只过滤<code>/v2/apps</code>路径下的请求。</p><h2 id="EurekaBootStrap（启动类，重要）"><a href="#EurekaBootStrap（启动类，重要）" class="headerlink" title="EurekaBootStrap（启动类，重要）"></a>EurekaBootStrap（启动类，重要）</h2><p>这个类在eureka-core里，监听器要关注<code>contextInitialized</code>方法，这里就是eureka-server启动，初始化的入口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    initEurekaEnvironment();</span><br><span class="line">    initEurekaServerContext();</span><br><span class="line"></span><br><span class="line">    ServletContext sc = event.getServletContext();</span><br><span class="line">    sc.setAttribute(EurekaServerContext.class.getName(), serverContext);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">    logger.error(<span class="string">"Cannot bootstrap eureka server :"</span>, e);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Cannot bootstrap eureka server :"</span>, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="initEurekaEnvironment"><a href="#initEurekaEnvironment" class="headerlink" title="initEurekaEnvironment"></a>initEurekaEnvironment</h3><ol><li>在initEurekaEnvironment中，ConfigurationManager.getConfigInstance()初始化ConcurrentCompositeConfiguration实例，基于<strong>双检锁单例模式</strong>的配置管理器，管理eureka的所有配置，。</li><li>初始化dataCenter，数据中心的配置，如果没有配置的话，就给个默认的（default）。</li><li>初始化eureka.environment，默认是test环境。</li></ol><h3 id="initEurekaServerContext"><a href="#initEurekaServerContext" class="headerlink" title="initEurekaServerContext"></a>initEurekaServerContext</h3><h4 id="加载eureka-server-properties文件中的配置"><a href="#加载eureka-server-properties文件中的配置" class="headerlink" title="加载eureka-server.properties文件中的配置"></a>加载eureka-server.properties文件中的配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EurekaServerConfig eurekaServerConfig = <span class="keyword">new</span> DefaultEurekaServerConfig();</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String eurekaPropsFile = EUREKA_PROPS_FILE.get();</span><br></pre></td></tr></table></figure><p>DefaultEurekaServerConfig的init方法中，加载了一个properties文件，文件名默认叫eureka-server.properties（<code>EUREKA_PROPS_FILE</code>变量），通过ConfigurationManager加载到内存中，然后EurekaServerConfig的方法，再用configInstance获取对应的值。EurekaServerConfig是个接口，有很多get方法，包含了eureka server需要的所有配置，都可以通过这个接口获取。通过接口，对properties文件里的配置项进行了封装，增加了代码的可读性，不像我们自己可能做的有些项目里，读取配置文件都是去调用get某个key。</p><p>在DefaultEurekaServerConfig的方法中，也能看到大量的硬编码配置项和默认值。</p><h4 id="初始化ApplicationInfoManager"><a href="#初始化ApplicationInfoManager" class="headerlink" title="初始化ApplicationInfoManager"></a>初始化ApplicationInfoManager</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">EurekaInstanceConfig instanceConfig = isCloud(ConfigurationManager.getDeploymentContext())</span><br><span class="line">  ? <span class="keyword">new</span> CloudInstanceConfig()</span><br><span class="line">  : <span class="keyword">new</span> MyDataCenterInstanceConfig();</span><br><span class="line"></span><br><span class="line">applicationInfoManager = <span class="keyword">new</span> ApplicationInfoManager(</span><br><span class="line">  instanceConfig, <span class="keyword">new</span> EurekaConfigBasedInstanceInfoProvider(instanceConfig).get());</span><br></pre></td></tr></table></figure><p>查看ApplicationInfoManager的javadoc说明，这个类用来初始化服务注册和被其他服务发现的一些配置，其中配置通过EurekaInstanceConfig设置，从MyDataCenterInstanceConfig的父类的构造方法可以看到，其实也是读取的eureka-client.properties文件加载的。和<code>DefaultEurekaServerConfig</code>一样<code>EurekaInstanceConfig</code>也是提供了一些方法，实际是从配置文件读取，同时也提供了默认值。</p><p><code>new EurekaConfigBasedInstanceInfoProvider(instanceConfig).get()</code>方法返回了InstanceInfo。InstanceInfo是服务实例本身的信息，用<strong>构造器模式</strong><code>InstanceInfo.Builder.newBuilder()</code>构造了一个<code>InstanceInfo.Builder</code>实例，从instanceConfig里获取了大量配置，再加创建的几个类完成了构造。</p><p>最后，EurekaInstanceConfig和InstnaceInfo，构造了ApplicationInfoManager，作为服务实例的一个管理器。</p><h4 id="初始化eureka-server内部的一个eureka-client（用来跟其他的eureka-server节点注册和通信的）"><a href="#初始化eureka-server内部的一个eureka-client（用来跟其他的eureka-server节点注册和通信的）" class="headerlink" title="初始化eureka-server内部的一个eureka-client（用来跟其他的eureka-server节点注册和通信的）"></a>初始化eureka-server内部的一个eureka-client（用来跟其他的eureka-server节点注册和通信的）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EurekaClientConfig eurekaClientConfig = <span class="keyword">new</span> DefaultEurekaClientConfig();</span><br><span class="line">eurekaClient = <span class="keyword">new</span> DiscoveryClient(applicationInfoManager, eurekaClientConfig);</span><br></pre></td></tr></table></figure><p>DefaultEurekaClientConfig一样也是面向接口的配置项读取方式，也同样是读取了eureka-client.properties配置，不过它只读取了eureka开头的配置项，在DefaultEurekaTransportConfig里可看到，包含了很多client相关的配置项。<strong>EurekaClientConfig</strong>配置，和前面构建好的<strong>ApplicationInfoManager</strong>（包含了服务的实例信息、配置，作为服务实例管理的一个组件）构建了eurekaClient的子类DiscoveryClient。</p><p>DiscoveryClient我们可以看一下构造方法，初始化了很多东西，重点处理：</p><ol><li>是否需要拉取注册信息，shouldRegisterWithEureka</li><li>是否要注册自己，shouldRegisterWithEureka</li><li>初始化调度线程池，scheduler</li><li>初始化心跳线程池，heartbeatExecutor</li><li>初始化缓存刷新的线程池，cacheRefreshExecutor</li><li>new EurekaTransport()，支持底层eureka client和eureka server通信的一些初始化。</li><li>如果要抓取注册表，则抓取注册表表，fetchRegistryFromBackup();</li><li>初始化调度任务，initScheduledTasks(); 定时抓取注册表、心跳。初始化服务实例副本传播器（instanceInfoReplicator），服务实例状态变更监听器（statusChangeListener）。</li></ol><h4 id="处理注册相关的事情"><a href="#处理注册相关的事情" class="headerlink" title="处理注册相关的事情"></a>处理注册相关的事情</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">registry = <span class="keyword">new</span> PeerAwareInstanceRegistryImpl(</span><br><span class="line">        eurekaServerConfig,</span><br><span class="line">        eurekaClient.getEurekaClientConfig(),</span><br><span class="line">        serverCodecs,</span><br><span class="line">        eurekaClient</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>通过javadoc看下PeerAwareInstanceRegistryImpl是干什么用的：将所有操作复制到集群里对等的Eureka节点，以使它们保持同步。复制的主要操作是Registers,Renewals,Cancels,Expirations 和 Status Changes。</p><h4 id="处理peer节点相关的事情"><a href="#处理peer节点相关的事情" class="headerlink" title="处理peer节点相关的事情"></a>处理peer节点相关的事情</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PeerEurekaNodes peerEurekaNodes = getPeerEurekaNodes(</span><br><span class="line">        registry,</span><br><span class="line">        eurekaServerConfig,</span><br><span class="line">        eurekaClient.getEurekaClientConfig(),</span><br><span class="line">        serverCodecs,</span><br><span class="line">        applicationInfoManager</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>初始化Eureka集群的信息，PeerEurekaNode包含了每个节点自己分享给其他节点的信息。</p><h4 id="完成eureka-server上下文（context）的构建以及初始化"><a href="#完成eureka-server上下文（context）的构建以及初始化" class="headerlink" title="完成eureka-server上下文（context）的构建以及初始化"></a>完成eureka-server上下文（context）的构建以及初始化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">serverContext = <span class="keyword">new</span> DefaultEurekaServerContext(</span><br><span class="line">        eurekaServerConfig,</span><br><span class="line">        serverCodecs,</span><br><span class="line">        registry,</span><br><span class="line">        peerEurekaNodes,</span><br><span class="line">        applicationInfoManager</span><br><span class="line">);</span><br><span class="line">EurekaServerContextHolder.initialize(serverContext);</span><br></pre></td></tr></table></figure><p>serverContext.initialize方法中调用了peerEurekaNodes.start();，定时当前的eureka server同步集群里其他eureka server的一些信息。</p><p>registry.init(peerEurekaNodes);</p><p>用从集群获取的到的信息，初始化本实例的注册表。其实就是和集群之间的信息同步，这个研究这块的时候再细看。</p><h4 id="从相邻的eureka节点拷贝注册信息"><a href="#从相邻的eureka节点拷贝注册信息" class="headerlink" title="从相邻的eureka节点拷贝注册信息"></a>从相邻的eureka节点拷贝注册信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> registryCount = registry.syncUp();</span><br></pre></td></tr></table></figure><p>看syncUp的javadoc，从一个节点拷贝注册信息，如果失败就换个节点。细节后面再看。</p><h4 id="处理监控统计项"><a href="#处理监控统计项" class="headerlink" title="处理监控统计项"></a>处理监控统计项</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EurekaMonitors.registerAllStats();</span><br></pre></td></tr></table></figure><p>注册一些监控和统计。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>启动流程，到这里就结束了，我们总结一下，源码里用了不少设计模式和优秀的实现机制，例如基于双检锁的单例模式、构建器模式，面向接口的配置读取等，这都是我们值得去学习的。</p><p><img src="/img/spring-cloud/eureka server启动流程图.jpg" alt="eureka server启动流程图"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;如何阅读一个开源框架的源码&quot;&gt;&lt;a href=&quot;#如何阅读一个开源框架的源码&quot; class=&quot;headerlink&quot; title=&quot;如何阅读一个开源框架的源码&quot;&gt;&lt;/a&gt;如何阅读一个开源框架的源码&lt;/h1&gt;&lt;p&gt;如果要阅读一个开源框架的源码，我们应该从什么地方入手。首先应该想到的是，从框架启动的入口入手，比如Eureka，肯定是从Eureka服务本身启动的入口开始。或者我们也可以从框架的单元测试开始看，因为单元测试都包含了框架的核心流程和功能。所以我们通过这2个入口，可以通过打断点执行的方式阅读代码的逻辑。下面我将开始学习Eureka的源码，我将基于&lt;a href=&quot;https://github.com/Netflix/eureka.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/Netflix/eureka.git&lt;/a&gt; 的v1.7.2分支进行阅读，因为我目前所用的SpringCloud引入的就是这个版本。&lt;br&gt;
    
    </summary>
    
      <category term="eureka" scheme="http://www.saily.top/categories/eureka/"/>
    
    
      <category term="spring-cloud" scheme="http://www.saily.top/tags/spring-cloud/"/>
    
      <category term="eureka" scheme="http://www.saily.top/tags/eureka/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud微服务-5-SpringBoot整合Spring MVC</title>
    <link href="http://www.saily.top/2020/01/30/springcloud/microservices-5/"/>
    <id>http://www.saily.top/2020/01/30/springcloud/microservices-5/</id>
    <published>2020-01-30T13:50:39.000Z</published>
    <updated>2020-03-15T14:42:05.446Z</updated>
    
    <content type="html"><![CDATA[<p>本文涉及到的源码：<a href="https://github.com/sail-y/spring-cloud-lecture/tree/master/spring-lecture" target="_blank" rel="noopener">https://github.com/sail-y/spring-cloud-lecture/tree/master/spring-lecture</a></p><p>拖延中。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文涉及到的源码：&lt;a href=&quot;https://github.com/sail-y/spring-cloud-lecture/tree/master/spring-lecture&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://githu
      
    
    </summary>
    
      <category term="微服务" scheme="http://www.saily.top/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="微服务" scheme="http://www.saily.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Spring Cloud" scheme="http://www.saily.top/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud微服务-4-SpringBoot日志，JSP，WebSocket等</title>
    <link href="http://www.saily.top/2019/11/23/springcloud/microservices-4/"/>
    <id>http://www.saily.top/2019/11/23/springcloud/microservices-4/</id>
    <published>2019-11-23T14:50:39.000Z</published>
    <updated>2019-11-23T10:14:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot日志处理"><a href="#SpringBoot日志处理" class="headerlink" title="SpringBoot日志处理"></a>SpringBoot日志处理</h2><p>默认情况下，SpringBoot会引入spring-boot-starter-logging，也就是logback的日志实现。</p><p>在resources下新建<code>logback-spring.xml</code>可以自定义日志配置，这是约定的文件名字。</p><p>在spring-boot-starter-logging-2.1.4.RELEASE这个依赖中，在/org/springframework/boot/logging/logback/base.xml位置可以找到SpringBoot提供的一个默认配置，基于这个配置进行自定义</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/base.xml"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.test.springlecture"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"default"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.test.springlecture"</span> <span class="attr">level</span>=<span class="string">"INFO"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>可以指定不同的springProfile，可以做到当在开发环境的时候打印debug日志，在生产的时候则打印info。</p><p>也可以直接在application.yml里配置日志级别：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line"><span class="attr">    root:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><h2 id="SprintBoot整合JSP"><a href="#SprintBoot整合JSP" class="headerlink" title="SprintBoot整合JSP"></a>SprintBoot整合JSP</h2><p>现在用JSP的项目应该已经很少了，大部分都是前后端分离的项目。不过SpringBoot还是提供了对JSP的支持。</p><p>在SpringBoot中访问jsp，需要新增一个依赖，没有这个依赖，SpringBoot是无法编译jsp文件的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;org.apache.tomcat.embed:tomcat-embed-jasper&apos;</span><br></pre></td></tr></table></figure><p>以及路径配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  mvc:</span></span><br><span class="line"><span class="attr">    view:</span></span><br><span class="line"><span class="attr">      prefix:</span> <span class="string">/WEB-INF/jsp</span></span><br><span class="line"><span class="attr">      suffix:</span> <span class="string">.jsp</span></span><br></pre></td></tr></table></figure><h2 id="SpringBoot整合WebSocket"><a href="#SpringBoot整合WebSocket" class="headerlink" title="SpringBoot整合WebSocket"></a>SpringBoot整合WebSocket</h2><p>SpringBoot对WebSocket也提供了强有力的支持，这里简单介绍一下如何在SpringBoot里开发WebSocket接口，首先引入依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos;org.springframework.boot:spring-boot-starter-websocket&apos;,</span><br><span class="line">&apos;org.springframework.boot:spring-boot-starter-json&apos;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yangfan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/11/23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EchoService</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getMessage</span><span class="params">(String message)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yangfan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/11/23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultEchoService</span> <span class="keyword">implements</span> <span class="title">EchoService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String echoFormat;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultEchoService</span><span class="params">(String echoFormat)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.echoFormat = echoFormat != <span class="keyword">null</span> ? echoFormat : <span class="string">"%s"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="keyword">this</span>.echoFormat, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是用户的业务代码，下面是要实现TextWebSocketHandler，对WebSocket连接进行处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yangfan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/11/23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoWebSocketHandler</span> <span class="keyword">extends</span> <span class="title">TextWebSocketHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EchoService echoService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EchoWebSocketHandler</span><span class="params">(EchoService echoService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.echoService = echoService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterConnectionEstablished</span><span class="params">(WebSocketSession session)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"连接建立"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleTransportError</span><span class="params">(WebSocketSession session, Throwable exception)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        session.close(CloseStatus.SERVER_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleTextMessage</span><span class="params">(WebSocketSession session, TextMessage message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String echoMessage = echoService.getMessage(message.getPayload());</span><br><span class="line">        session.sendMessage(<span class="keyword">new</span> TextMessage(echoMessage));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后对所有的类进行配置，注意添加@EnableWebSocket注解和实现WebSocketConfigurer：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yangfan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/11/23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocket</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title">WebSocketConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerWebSocketHandlers</span><span class="params">(WebSocketHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addHandler(webSocketHandler(), <span class="string">"/echo"</span>).setAllowedOrigins(<span class="string">"*"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EchoService <span class="title">echoService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultEchoService(<span class="string">"You said \"%s\""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebSocketHandler <span class="title">webSocketHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EchoWebSocketHandler(echoService());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试页面</p><p><a href="http://www.websocket.org/echo.html" target="_blank" rel="noopener">http://www.websocket.org/echo.html</a></p><p><img src="/img/spring-cloud/sc04-1.png" alt="sc04-1"></p><h2 id="SpringBoot单元测试"><a href="#SpringBoot单元测试" class="headerlink" title="SpringBoot单元测试"></a>SpringBoot单元测试</h2><p>SpringBoot为单元测试提供了非常方便的集成，引入依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;org.springframework.boot:spring-boot-starter-test&apos;</span><br></pre></td></tr></table></figure><p>编写单元测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yangfan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/11/23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyControllerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WebApplicationContext webApplicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpMockMvc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetPerson</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/api/person"</span>)</span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON_UTF8)</span><br><span class="line">                .accept(MediaType.APPLICATION_JSON_UTF8))</span><br><span class="line">                .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">                .andDo(MockMvcResultHandlers.print());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">MockHttpServletRequest:</span><br><span class="line">      HTTP Method = GET</span><br><span class="line">      Request URI = /api/person</span><br><span class="line">       Parameters = &#123;&#125;</span><br><span class="line">          Headers = [Content-Type:&quot;application/json;charset=UTF-8&quot;, Accept:&quot;application/json;charset=UTF-8&quot;]</span><br><span class="line">             Body = null</span><br><span class="line">    Session Attrs = &#123;&#125;</span><br><span class="line"></span><br><span class="line">Handler:</span><br><span class="line">             Type = com.test.springlecture.controller.MyController</span><br><span class="line">           Method = public com.test.springlecture.domain.Person com.test.springlecture.controller.MyController.getPerson()</span><br><span class="line"></span><br><span class="line">Async:</span><br><span class="line">    Async started = false</span><br><span class="line">     Async result = null</span><br><span class="line"></span><br><span class="line">Resolved Exception:</span><br><span class="line">             Type = null</span><br><span class="line"></span><br><span class="line">ModelAndView:</span><br><span class="line">        View name = null</span><br><span class="line">             View = null</span><br><span class="line">            Model = null</span><br><span class="line"></span><br><span class="line">FlashMap:</span><br><span class="line">       Attributes = null</span><br><span class="line"></span><br><span class="line">MockHttpServletResponse:</span><br><span class="line">           Status = 200</span><br><span class="line">    Error message = null</span><br><span class="line">          Headers = [Content-Type:&quot;application/json;charset=UTF-8&quot;]</span><br><span class="line">     Content type = application/json;charset=UTF-8</span><br><span class="line">             Body = &#123;&quot;id&quot;:18,&quot;name&quot;:&quot;张三&quot;,&quot;birthday&quot;:&quot;2019-11-23T09:59:18.761+0000&quot;&#125;</span><br><span class="line">    Forwarded URL = null</span><br><span class="line">   Redirected URL = null</span><br><span class="line">          Cookies = []</span><br></pre></td></tr></table></figure><p>SpringBoot重要组件就介绍到这里，后面的文章会介绍Apache kafka的使用以及和SpringBoot应用的集成。</p><p>本文涉及到的源码：<a href="https://github.com/sail-y/spring-cloud-lecture/tree/master/spring-lecture" target="_blank" rel="noopener">https://github.com/sail-y/spring-cloud-lecture/tree/master/spring-lecture</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SpringBoot日志处理&quot;&gt;&lt;a href=&quot;#SpringBoot日志处理&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot日志处理&quot;&gt;&lt;/a&gt;SpringBoot日志处理&lt;/h2&gt;&lt;p&gt;默认情况下，SpringBoot会引入spring-boot-starter-logging，也就是logback的日志实现。&lt;/p&gt;
&lt;p&gt;在resources下新建&lt;code&gt;logback-spring.xml&lt;/code&gt;可以自定义日志配置，这是约定的文件名字。&lt;/p&gt;
&lt;p&gt;在spring-boot-starter-logging-2.1.4.RELEASE这个依赖中，在/org/springframework/boot/logging/logback/base.xml位置可以找到SpringBoot提供的一个默认配置，基于这个配置进行自定义&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;resource&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;org/springframework/boot/logging/logback/base.xml&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.test.springlecture&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;level&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;DEBUG&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;springProfile&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;default&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.test.springlecture&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;level&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;INFO&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;springProfile&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;Configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="微服务" scheme="http://www.saily.top/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="微服务" scheme="http://www.saily.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Spring Cloud" scheme="http://www.saily.top/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud微服务-3-SpringBoot源码初探</title>
    <link href="http://www.saily.top/2019/10/13/springcloud/microservices-3/"/>
    <id>http://www.saily.top/2019/10/13/springcloud/microservices-3/</id>
    <published>2019-10-13T14:50:39.000Z</published>
    <updated>2019-11-23T10:08:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringApplication"><a href="#SpringApplication" class="headerlink" title="SpringApplication"></a>SpringApplication</h1><p>Class that can be used to bootstrap and launch a Spring application from a Java main method. By default class will perform the following steps to bootstrap your application:</p><ul><li>Create an appropriate ApplicationContext instance (depending on your classpath)</li><li>Register a CommandLinePropertySource to expose command line arguments as Spring properties</li><li>Refresh the application context, loading all singleton beans</li><li>Trigger any CommandLineRunner beans</li></ul><a id="more"></a><p> SpringApplications can read beans from a variety of different sources. It is generally recommended that a single @Configuration class is used to bootstrap your application, however, you may also set sources from:</p><ul><li>The fully qualified class name to be loaded by AnnotatedBeanDefinitionReader</li><li>The location of an XML resource to be loaded by XmlBeanDefinitionReader, or a groovy script to be loaded by GroovyBeanDefinitionReader</li><li>The name of a package to be scanned by ClassPathBeanDefinitionScanner</li></ul><p>除了用@Configuration标记的类可以启动应用，还有上面介绍的3种方式可以启动应用。</p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>看看构造方法的说明：</p><blockquote><p>Create a new SpringApplication instance. The application context will load beans from the specified primary sources (see class-level documentation for details. The instance can be customized before calling run(String…).</p></blockquote><p>创建一个SpringApplication，应用上下文从指定的primary sources加载bean。</p><p>构造方法的实现里有一行this.webApplicationType=WebApplicationType.deduceFromClasspath();，这行决定了应用是用的什么web容器启动的，非web环境，Servlet容器，或者Reactive（Spring 5新增的）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">Assert.notNull(primarySources, <span class="string">"PrimarySources must not be null"</span>);</span><br><span class="line"><span class="keyword">this</span>.primarySources = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</span><br><span class="line"><span class="keyword">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line">setInitializers((Collection) getSpringFactoriesInstances(</span><br><span class="line">ApplicationContextInitializer.class));</span><br><span class="line">setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line"><span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再看下一行代码<code>setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));</code>里面的具体内容都干了些什么。</p><p>从getSpringFactoriesInstances方法代码里执行跟到SpringFactoriesLoader.loadSpringFactories这个方法中，有行很关键的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Enumeration&lt;URL&gt; urls = (classLoader != <span class="keyword">null</span> ?</span><br><span class="line">classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :</span><br><span class="line">ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The location to look for factories.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Can be present in multiple JAR files.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FACTORIES_RESOURCE_LOCATION = <span class="string">"META-INF/spring.factories"</span>;</span><br></pre></td></tr></table></figure><p>urls就包含了所有jar包里的spring.factories文件。</p><p>SpringFactoriesLoader是框架内部用来加载工厂的一种机制，它会读取META-INF/spring.factories这个文件的内容，这个文件存在于多个jar文件中（所有的spring.factories都会被读取并加载），随便看一个，比如spring-boot-autoconfigure-2.1.4.RELEASE.jar里的，定义了7种类型的类，Spring会去加载这个文件中定义的工厂信息配置文件，左边都是接口或者抽象类，右边都是具体的实现类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Initializers</span><br><span class="line">org.springframework.context.ApplicationContextInitializer=\</span><br><span class="line">org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer,\</span><br><span class="line">org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener</span><br><span class="line"></span><br><span class="line"># Application Listeners</span><br><span class="line">org.springframework.context.ApplicationListener=\</span><br><span class="line">org.springframework.boot.autoconfigure.BackgroundPreinitializer</span><br><span class="line"></span><br><span class="line"># Auto Configuration Import Listeners</span><br><span class="line">org.springframework.boot.autoconfigure.AutoConfigurationImportListener=\</span><br><span class="line">org.springframework.boot.autoconfigure.condition.ConditionEvaluationReportAutoConfigurationImportListener</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>在读取了这些文件内容以后，文件里的内容就会作为缓存把数据放入到<code>private static final Map&lt;ClassLoader, MultiValueMap&lt;String, String&gt;&gt; cache = new ConcurrentReferenceHashMap&lt;&gt;();</code>中。</p><p>接下来，就获取了key为<code>org.springframework.context.ApplicationContextInitializer</code>的类列表。</p><p>这里也对应了前面提到过的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setInitializers((Collection) getSpringFactoriesInstances(</span><br><span class="line">ApplicationContextInitializer.class));</span><br></pre></td></tr></table></figure></p><p>后面就是通过反射的方式来创建这些ApplicationContextInitializer工厂类的实例。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;T&gt; instances = createSpringFactoriesInstances(type, parameterTypes,</span><br><span class="line">classLoader, args, names);</span><br></pre></td></tr></table></figure></p><p>再下一行的<code>setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</code>也是一样的逻辑，只不过这次是从缓存里获取的class名称了。</p><p>到这里ApplicationContextInitializer和ApplicationListener都实例化完成。</p><p>再往下面看<code>this.mainApplicationClass = deduceMainApplicationClass();</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Class&lt;?&gt; deduceMainApplicationClass() &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">StackTraceElement[] stackTrace = <span class="keyword">new</span> RuntimeException().getStackTrace();</span><br><span class="line"><span class="keyword">for</span> (StackTraceElement stackTraceElement : stackTrace) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"main"</span>.equals(stackTraceElement.getMethodName())) &#123;</span><br><span class="line"><span class="keyword">return</span> Class.forName(stackTraceElement.getClassName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line"><span class="comment">// Swallow and continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>万万没想到，Spring Boot竟然是通过这种方式来找到main方法所在类的，直接new一个RuntimeException()，然后从堆栈里去找main方法所在的类。</p><p>SpringApplication对象构造完成后，接下来就调用了run()方法。</p><h2 id="run-方法-amp-ApplicationContext"><a href="#run-方法-amp-ApplicationContext" class="headerlink" title="run()方法&amp; ApplicationContext"></a>run()方法&amp; ApplicationContext</h2><p>运行Spring应用，创建并且刷新一个新的ApplicationContext，在run方法中执行了很多代码，下面一一进行分析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Run the Spring application, creating and refreshing a new</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ApplicationContext&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args the application arguments (usually passed from a Java main method)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a running &#123;<span class="doctag">@link</span> ApplicationContext&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">    StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">    stopWatch.start();</span><br><span class="line">    ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">    Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    configureHeadlessProperty();</span><br><span class="line">    SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">    listeners.starting();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(</span><br><span class="line">                args);</span><br><span class="line">        ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class="line">                applicationArguments);</span><br><span class="line">        configureIgnoreBeanInfo(environment);</span><br><span class="line">        Banner printedBanner = printBanner(environment);</span><br><span class="line">        context = createApplicationContext();</span><br><span class="line">        exceptionReporters = getSpringFactoriesInstances(</span><br><span class="line">                SpringBootExceptionReporter.class,</span><br><span class="line">                <span class="keyword">new</span> Class[] &#123; ConfigurableApplicationContext.class &#125;, context);</span><br><span class="line">        prepareContext(context, environment, listeners, applicationArguments,</span><br><span class="line">                printedBanner);</span><br><span class="line">        refreshContext(context);</span><br><span class="line">        afterRefresh(context, applicationArguments);</span><br><span class="line">        stopWatch.stop();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">            <span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass)</span><br><span class="line">                    .logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">        &#125;</span><br><span class="line">        listeners.started(context);</span><br><span class="line">        callRunners(context, applicationArguments);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        handleRunFailure(context, ex, exceptionReporters, listeners);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        listeners.running(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        handleRunFailure(context, ex, exceptionReporters, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先就声明了变量，ConfigurableApplicationContext context = null;</p><p><code>ApplicationContext</code>是Spring里非常重要的一个接口，看看它的注释。</p><p>是一个中心的接口，为一个应用提供了配置。当应用在运行的时候，它是只读的，但是如果实现支持的话，可以被重新加载。</p><p>提供的功能如下：</p><ul><li>提供了访问应用组件的bean工厂方法，继承自ListableBeanFactory</li><li>加载文件资源的能力，继承自 ResourceLoader接口</li><li>向注册的监听器发布事件的能力，继承自ApplicationEventPublisher接口</li><li>解析消息的能力，支持国际化，继承自MessageSource接口</li><li>继承父上下文的相关信息。子上下文有更高的优先级</li></ul><p>ConfigurableApplicationContext会被大多数应用上下文实现，比<code>ApplicationContext</code>又多补充了些功能。</p><p>再往下就是异常报告器，用于支持对SpringBootApplication启动错误的报告。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure><p>再往下的代码，就是将系统属性设置为无头模式，表示是没有界面的服务器程序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">configureHeadlessProperty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.setProperty(SYSTEM_PROPERTY_JAVA_AWT_HEADLESS, System.getProperty(</span><br><span class="line">            SYSTEM_PROPERTY_JAVA_AWT_HEADLESS, Boolean.toString(<span class="keyword">this</span>.headless)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这行代码，获取了非常重要的<code>SpringApplicationRunListener</code>，这个监听器提供了很多应用生命周期不同阶段的事件监听，例如启动，上下文加载后，停止等。而这里的<code>SpringApplicationRunListener</code>正是读取的<code>spring.factories</code>文件中定义的监听器。紧接着就触发了启动事件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">listeners.starting();</span><br></pre></td></tr></table></figure><p>在后续的几行代码也可以看到对listeners的environmentPrepared，contextPrepared，contextLoaded，started，running等方法的调用。</p><p>如下图，EventPublishingRunListener会去SimpleApplicationEventMulticaster发送真正的event事件，这是设计模式中的观察者模式在Spring应用中的体现。</p><p><img src="/img/spring-cloud/sc03-1.jpg" alt></p><p><img src="/img/spring-cloud/sc03-2.jpg" alt></p><p>ConfigurableEnvironment也是Spring中非常重要的一个组件，包含了2部分： profiles 和 properties，profile用来分组不同的属性，表示当前应用启动的环境，同一时刻只会有一个profile处于激活状态，例如dev,test,uat,prod等，property通常用${…}这种placeholder的方式被开发人员获取。</p><p>prepareEnvironment方法里面就会调用这2个方法，对property和profile进行配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">configurePropertySources(environment, args);</span><br><span class="line">configureProfiles(environment, args);</span><br></pre></td></tr></table></figure><p>然后就是banner的打印，默认打印的代码实现在SpringBootBanner里。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Banner printedBanner = printBanner(environment);</span><br></pre></td></tr></table></figure><p>创建应用上下文，会通过webApplicationType变量判断创建不同的上下文类型，然后准备、刷新上下文</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">context = createApplicationContext();</span><br><span class="line">prepareContext(context, environment, listeners, applicationArguments,</span><br><span class="line">printedBanner);</span><br><span class="line">refreshContext(context);</span><br><span class="line">afterRefresh(context, applicationArguments);</span><br></pre></td></tr></table></figure><p>在prepareContext方法里，有logStartupInfo和logStartupProfileInfo打印启动的日志，加载profile的日志。</p><p>refreshContext就调用了ApplicationContext的refresh方法，对上下文里的东西做了很多初始化。</p><p>最后，stopWatch.stop();记录了应用启动的耗时，并进行日志打印，到此，SpringBoot应用启动流程完成。</p><p>callRunners触发调用我们自定义的ApplicationRunner和CommandLineRunner，等于是应用启动完成之后的回调。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringApplication&quot;&gt;&lt;a href=&quot;#SpringApplication&quot; class=&quot;headerlink&quot; title=&quot;SpringApplication&quot;&gt;&lt;/a&gt;SpringApplication&lt;/h1&gt;&lt;p&gt;Class that can be used to bootstrap and launch a Spring application from a Java main method. By default class will perform the following steps to bootstrap your application:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create an appropriate ApplicationContext instance (depending on your classpath)&lt;/li&gt;
&lt;li&gt;Register a CommandLinePropertySource to expose command line arguments as Spring properties&lt;/li&gt;
&lt;li&gt;Refresh the application context, loading all singleton beans&lt;/li&gt;
&lt;li&gt;Trigger any CommandLineRunner beans&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="微服务" scheme="http://www.saily.top/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="微服务" scheme="http://www.saily.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Spring Cloud" scheme="http://www.saily.top/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud微服务-2-SpringBoot起步</title>
    <link href="http://www.saily.top/2019/04/12/springcloud/microservices-2/"/>
    <id>http://www.saily.top/2019/04/12/springcloud/microservices-2/</id>
    <published>2019-04-12T06:16:21.000Z</published>
    <updated>2019-05-24T08:37:03.739Z</updated>
    
    <content type="html"><![CDATA[<p>微服务学习笔记</p><h1 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h1><p><a href="https://spring.io/projects/spring-boot#learn" target="_blank" rel="noopener">https://spring.io/projects/spring-boot#learn</a></p><p>要创建一个Spring Boot项目，可以去<a href="https://start.spring.io/，一键创建。" target="_blank" rel="noopener">https://start.spring.io/，一键创建。</a></p><p><img src="/img/spring-cloud/sc02-1.png" alt></p><p>依赖中加入Web，然后点击<code>Generate Project</code>，就会下载一个压缩包。<br><a id="more"></a><br>解压后看看目录结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">spring-lecture tree</span><br><span class="line">.</span><br><span class="line">├── HELP.md</span><br><span class="line">├── build.gradle</span><br><span class="line">├── gradle</span><br><span class="line">│   └── wrapper</span><br><span class="line">│       ├── gradle-wrapper.jar</span><br><span class="line">│       └── gradle-wrapper.properties</span><br><span class="line">├── gradlew</span><br><span class="line">├── gradlew.bat</span><br><span class="line">├── settings.gradle</span><br><span class="line">└── src</span><br><span class="line">    ├── main</span><br><span class="line">    │   ├── java</span><br><span class="line">    │   │   └── com</span><br><span class="line">    │   │       └── test</span><br><span class="line">    │   │           └── springlecture</span><br><span class="line">    │   │               └── SpringLectureApplication.java</span><br><span class="line">    │   └── resources</span><br><span class="line">    │       ├── application.properties</span><br><span class="line">    │       ├── static</span><br><span class="line">    │       └── templates</span><br><span class="line">    └── test</span><br><span class="line">        └── java</span><br><span class="line">            └── com</span><br><span class="line">                └── test</span><br><span class="line">                    └── springlecture</span><br><span class="line">                        └── SpringLectureApplicationTests.java</span><br><span class="line"></span><br><span class="line">16 directories, 10 files</span><br></pre></td></tr></table></figure><p>在build.gradle中包含了依赖的配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">id <span class="string">'org.springframework.boot'</span> version <span class="string">'2.1.4.RELEASE'</span></span><br><span class="line">id <span class="string">'java'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply plugin: <span class="string">'io.spring.dependency-management'</span></span><br><span class="line"></span><br><span class="line">group = <span class="string">'com.test'</span></span><br><span class="line">version = <span class="string">'0.0.1-SNAPSHOT'</span></span><br><span class="line">sourceCompatibility = <span class="string">'1.8'</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">implementation <span class="string">'org.springframework.boot:spring-boot-starter-web'</span></span><br><span class="line">testImplementation <span class="string">'org.springframework.boot:spring-boot-starter-test'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到引入了spring-boot-starter-web的依赖，因为<code>io.spring.dependency-management</code>插件的关系，所以在配置文件里不需要写版本号，就像maven里的dependencyManagement一样。</p><p>源码地址：</p><p><a href="https://github.com/sail-y/spring-cloud-lecture" target="_blank" rel="noopener">https://github.com/sail-y/spring-cloud-lecture</a></p><p>执行命令<code>gradle bootRun</code>，就能启动，访问 <a href="http://127.0.0.1:9090/api/test" target="_blank" rel="noopener">http://127.0.0.1:9090/api/test</a></p><p>返回</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  id: 18,</span><br><span class="line">  name: "zhangsan",</span><br><span class="line">  birthday: "2019-04-10T12:15:53.666+0000"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>几乎所有的配置都可以在<code>application.properties</code>文件里完成，这里用<code>server.port</code>配置了一个端口号，Spring Boot也支持yml格式的配置文件。这也是我自己在项目中一直使用的格式。</p><h2 id="bootJar"><a href="#bootJar" class="headerlink" title="bootJar"></a>bootJar</h2><p>执行<code>gradle task</code>，可以看到Spring Boot插件为我们提供了几个任务，其中一个是bootRun，可以直接启动应用。bootJar，可以把应用打包成一个<strong>fat jar</strong>。用<code>java -jar spring-lecture-0.0.1-SNAPSHOT.jar</code>就可以启动应用，这跟普通的jar包不一样。</p><p>现在解压这个jar包来看看里面的内容，跟传统的jar或者war包不一样，解压后并没有看到我们自己的代码编译后的文件在哪里，在根目录下的org里的class文件却并不是我们自己写的，下面分析一下解压后的目录结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar -xvf spring-lecture-<span class="number">0.0</span>.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> libs (master✔)ls</span><br><span class="line">BOOT-INF  META-INF  org </span><br><span class="line">➜  libs (master✔)tree BOOT-INF -d</span><br><span class="line">BOOT-INF</span><br><span class="line">├── classes</span><br><span class="line">│   ├── com</span><br><span class="line">│   │   └── <span class="built_in">test</span></span><br><span class="line">│   │       └── springlecture</span><br><span class="line">│   │           ├── controller</span><br><span class="line">│   │           └── domain</span><br><span class="line">│   ├── static</span><br><span class="line">│   └── templates</span><br><span class="line">└── lib</span><br><span class="line"></span><br><span class="line">9 directories</span><br></pre></td></tr></table></figure><p><code>BOOT-INF</code>里包含了我们自己项目里编译后的配置文件和class文件，以及<code>lib</code>里包含的项目依赖的三方jar。</p><p>接下来看META-INF</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  libs (master✔)cat META-INF/MANIFEST.MF </span><br><span class="line">Manifest-Version: <span class="number">1.0</span></span><br><span class="line">Start-Class: com.test.springlecture.SpringLectureApplication</span><br><span class="line">Spring-Boot-Classes: BOOT-INF/classes/</span><br><span class="line">Spring-Boot-Lib: BOOT-INF/lib/</span><br><span class="line">Spring-Boot-Version: <span class="number">2.1</span>.4.RELEASE</span><br><span class="line">Main-Class: org.springframework.boot.loader.JarLauncher</span><br></pre></td></tr></table></figure><p>Main-Class是打包的jar包含main方法的启动类，Start-Class是Spring Boot自定义的属性。</p><p><strong>注意Main-Class最后有一个回车换行，这个是必须的，不然无法使用。</strong></p><p>接下来看另外一个文件夹<code>org</code>，这里面的类是Spring Boot打包插件在打jar包的时候自动放进去的，Spring Boot这些类功能很巧妙的解决了fat jar是如何打包出来的，以及BOOT-INF下面的类和jar包是如何被加载的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">org</span><br><span class="line">└── springframework</span><br><span class="line">    └── boot</span><br><span class="line">        └── loader</span><br><span class="line">            ├── ExecutableArchiveLauncher.class</span><br><span class="line">            ├── JarLauncher.class</span><br><span class="line">            ├── LaunchedURLClassLoader$UseFastConnectionExceptionsEnumeration.class</span><br><span class="line">            ├── LaunchedURLClassLoader.class</span><br><span class="line">            ├── Launcher.class</span><br><span class="line">            ├── MainMethodRunner.class</span><br><span class="line">            ├── PropertiesLauncher$<span class="number">1</span>.class</span><br><span class="line">            ├── PropertiesLauncher$ArchiveEntryFilter.class</span><br><span class="line">            ├── PropertiesLauncher$PrefixMatchingArchiveFilter.class</span><br><span class="line">            ├── PropertiesLauncher.class</span><br><span class="line">            ├── WarLauncher.class</span><br><span class="line">            ├── archive</span><br><span class="line">            ├── data</span><br><span class="line">            ├── jar</span><br><span class="line">            └── util</span><br><span class="line"></span><br><span class="line"><span class="number">7</span> directories, <span class="number">50</span> files</span><br></pre></td></tr></table></figure><p>这都是SpringBoot提供的类，发现没有？org.springframework.boot.loader.JarLauncher就在这里。这样的文件结构，和这些类都是什么意思呢？</p><p>如果我们要查看org.springframework.boot.loader.JarLauncher的源码，需要引入以下依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation &apos;org.springframework.boot:spring-boot-loader&apos;</span><br></pre></td></tr></table></figure><p>这是插件的一个依赖，在实际开发中，我们并不需要引入这个依赖，现在我们可以查看这个类的源码。</p><p><img src="/img/spring-cloud/sc02-2.png" alt></p><p>javadoc解释了，Launcher假设依赖包在/BOOT-INF/lib文件夹中，应用的class文件在/BOOT-INF/classes中。</p><p><code>ExecutableArchiveLauncher</code>的子类除了<code>JarLauncher</code>，还有一个<code>WarLauncher</code>。从名字就能看出来，是分别用于启动Jar包和War包的启动类。</p><p>main方法：</p><p><code>new JarLauncher().launch(args);</code></p><p>launch方法doc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Launch the application. This method is the initial entry point that should be</span></span><br><span class="line"><span class="comment"> * called by a subclass &#123;<span class="doctag">@code</span> public static void main(String[] args)&#125; method.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args the incoming arguments</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception if the application fails to launch</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">launch</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">JarFile.registerUrlProtocolHandler();</span><br><span class="line">ClassLoader classLoader = createClassLoader(getClassPathArchives());</span><br><span class="line">launch(args, getMainClass(), classLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里构建了一个类加载器。</p><blockquote><p>它会找到类当前路径所在的jar包，得到一个archive对象。因为jar包的标准是只能加载根目录下的class文件，无法加载jar包里面的jar包，所以spring boot自己实现了类加载器来加载我们应用的第三方依赖和classes文件。</p></blockquote><blockquote><p><code>JarLauncher.isNestedArchive</code>就包含了这部分的判断逻辑。处理了BOOT-INF/classes/的目录和以BOOT-INF/lib/开头的文件，此方法在getClassPathArchives内部被调用。</p></blockquote><p><code>ClassLoader classLoader = createClassLoader(getClassPathArchives());</code>则是为了加载这2个目录下的class和jar包，最后代码跟踪到<code>new LaunchedURLClassLoader(urls, getClass().getClassLoader());</code>。LaunchedURLClassLoader就是Spring Boot提供的全新的类加载器了。</p><blockquote><p>URLClassLoader是ClassLoader的子类，它用于从指向 JAR 文件和目录的 URL 的搜索路径加载类和资源。也就是说，通过URLClassLoader就可以加载指定jar中的class到内存中。</p></blockquote><p>再来关注<code>launch(args, getMainClass(), classLoader);</code>这行代码，getMainClass()从Manifest文件里读取了<code>Start-Class</code>，也就是我们自己的应用的启动类。</p><p>然后是<code>launch</code>方法的调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Thread.currentThread().setContextClassLoader(classLoader);</span><br><span class="line">createMainMethodRunner(mainClass, args, classLoader).run();</span><br></pre></td></tr></table></figure><p>把SpringBoot提供的类加载器，设置成线程上下文类加载器。</p><p>createMainMethodRunner创建main方法的执行器。这里有关键代码，我们的启动类是如何被加载和启动的。</p><p>MainMethodRunner.run</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Class&lt;?&gt; mainClass = Thread.currentThread().getContextClassLoader()</span><br><span class="line">.loadClass(<span class="keyword">this</span>.mainClassName);</span><br><span class="line">Method mainMethod = mainClass.getDeclaredMethod(<span class="string">"main"</span>, String[].class);</span><br><span class="line">mainMethod.invoke(<span class="keyword">null</span>, <span class="keyword">new</span> Object[] &#123; <span class="keyword">this</span>.args &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获得之前设置的类加载器，进行类加载，然后用反射的方式调用main方法。</p><p><code>mainMethod.invoke(null, new Object[] { this.args });</code>这行代码反射，前面是null，是因为main方法是静态的，所以不需要传对象进去。</p><p>以上就解释了jar包里的文件夹结构，以及加载启动类的流程。</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>增加一行代码打印SpringLectureApplication这个类的类加载器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringLectureApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(SpringLectureApplication.class.getClassLoader());</span><br><span class="line">SpringApplication.run(SpringLectureApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>试想一下，用java -jar启动，和在IDE里右键启动，打印出来的内容会是一样的吗？</p><p>右键启动输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sun.misc.Launcher$AppClassLoader@58644d46</span><br></pre></td></tr></table></figure><p>jar包启动输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.loader.LaunchedURLClassLoader@17a7cec2</span><br></pre></td></tr></table></figure><h2 id="JDWP远程调试"><a href="#JDWP远程调试" class="headerlink" title="JDWP远程调试"></a>JDWP远程调试</h2><p>Java Debug Wire Protocol，Java调试协议</p><p>我们可以用远程的方式去调试一个正在运行的应用，比如打断点什么的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ java -agentlib:jdwp=<span class="built_in">help</span></span><br><span class="line">               Java Debugger JDWP Agent Library</span><br><span class="line">               --------------------------------</span><br><span class="line"></span><br><span class="line">  (see http://java.sun.com/products/jpda <span class="keyword">for</span> more information)</span><br><span class="line"></span><br><span class="line">jdwp usage: java -agentlib:jdwp=[<span class="built_in">help</span>]|[&lt;option&gt;=&lt;value&gt;, ...]</span><br><span class="line">Option Name and Value            Description                       Default</span><br><span class="line">---------------------            -----------                       -------</span><br><span class="line"><span class="built_in">suspend</span>=y|n                      <span class="built_in">wait</span> on startup?                  y</span><br><span class="line">transport=&lt;name&gt;                 transport spec                    none</span><br><span class="line">address=&lt;listen/attach address&gt;  transport spec                    <span class="string">""</span></span><br><span class="line">server=y|n                       listen <span class="keyword">for</span> debugger?              n</span><br><span class="line">launch=&lt;<span class="built_in">command</span> line&gt;            run debugger on event             none</span><br><span class="line">onthrow=&lt;exception name&gt;         debug on throw                    none</span><br><span class="line">onuncaught=y|n                   debug on any uncaught?            n</span><br><span class="line">timeout=&lt;timeout value&gt;          <span class="keyword">for</span> listen/attach <span class="keyword">in</span> milliseconds n</span><br><span class="line">mutf8=y|n                        output modified utf-8             n</span><br><span class="line">quiet=y|n                        control over terminal messages    n</span><br><span class="line"></span><br><span class="line">Obsolete Options</span><br><span class="line">----------------</span><br><span class="line">strict=y|n</span><br><span class="line">stdalloc=y|n</span><br><span class="line"></span><br><span class="line">Examples</span><br><span class="line">--------</span><br><span class="line">  - Using sockets connect to a debugger at a specific address:</span><br><span class="line">    java -agentlib:jdwp=transport=dt_socket,address=localhost:8000 ...</span><br><span class="line">  - Using sockets listen <span class="keyword">for</span> a debugger to attach:</span><br><span class="line">    java -agentlib:jdwp=transport=dt_socket,server=y,<span class="built_in">suspend</span>=y ...</span><br><span class="line"></span><br><span class="line">Notes</span><br><span class="line">-----</span><br><span class="line">  - A timeout value of 0 (the default) is no timeout.</span><br><span class="line"></span><br><span class="line">Warnings</span><br><span class="line">--------</span><br><span class="line">  - The older -Xrunjdwp interface can still be used, but will be removed <span class="keyword">in</span></span><br><span class="line">    a future release, <span class="keyword">for</span> example:</span><br><span class="line">        java -Xdebug -Xrunjdwp:[<span class="built_in">help</span>]|[&lt;option&gt;=&lt;value&gt;, ...]</span><br></pre></td></tr></table></figure><p>有一些参数，示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  spring-lecture (master) ✗)java -agentlib:jdwp=transport=dt_socket,server=y,<span class="built_in">suspend</span>=y,address=5050 -jar build/libs/spring-lectListening <span class="keyword">for</span> transport dt_socket at address: 5050</span><br></pre></td></tr></table></figure><p>调试器的服务端已经启动，等待调试器连接，现在我们去用idea的调试器去调试。</p><p>选择Remote类型，选择Attach to remote JVM，设置端口为5050，可以看到idea自动为我们生产了参数：<code>-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5050</code>。</p><p><img src="/img/spring-cloud/sc02-3.png" alt></p><p>这样的话，点击debug按钮，IDEA就能走到我们断点的地方。</p><p>这样就可以在启动的时候用debug的方式去跟踪SpringBoot启动的流程。</p><p>通过这个图就可以看到，这里是archives对象里包含的就是应用里依赖的所有第三方jar包。</p><p><img src="/img/spring-cloud/sc02-4.png" alt></p><p>在获取到jar的url以后，会创建一个LaunchedURLClassLoader，用于加载这些jar包，同时这里也指定了父加载器。</p><p><img src="/img/spring-cloud/sc02-5.png" alt><br><img src="/img/spring-cloud/sc02-6.png" alt></p><p>继续往下走，就能验证上一节说的读取Start-Class具体的类名。</p><p><img src="/img/spring-cloud/sc02-7.png" alt></p><p>在设置上下文类加载器之前，它的值是AppClassLoader</p><p><img src="/img/spring-cloud/sc02-8.png" alt></p><p>再往下，就是根据找到的MainClass创建一个MainMethodRunner，通过之前设置的线程上下文类加载获取之前设置的类加载器，来加载MainClass，然后用反射的方式执行。</p><p><img src="/img/spring-cloud/sc02-9.png" alt></p><h2 id="SpringBotApplication"><a href="#SpringBotApplication" class="headerlink" title="@SpringBotApplication"></a>@SpringBotApplication</h2><p>接下来回到源代码上，SpringLectureApplication上面的@SpringBootApplication，标识了一个SpringBoot应用，他会自动扫描这个类，以及这个类以下的子包。</p><p>如果不加这个注解，会怎么样？试试看，会得到一个错误missing ServletWebServerFactory bean，没有这个注解，SpringBoot是无法启动的，除了SpringBootApplication注解，各种注解在SpringBoot项目中扮演着很重要的角色。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.ApplicationContextException: Unable to start web server; nested exception is org.springframework.context.ApplicationContextException: Unable to start ServletWebServerApplicationContext due to missing ServletWebServerFactory bean.</span><br></pre></td></tr></table></figure><p>现在是SpringApplication的静态方法启动的应用，实际上我们可以手动一步一步的启动。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(SpringLectureApplication.class.getClassLoader());</span><br><span class="line"><span class="comment">//SpringApplication.run(SpringLectureApplication.class, args);</span></span><br><span class="line"></span><br><span class="line">SpringApplication springApplication = <span class="keyword">new</span> SpringApplication(SpringLectureApplication.class);</span><br><span class="line">springApplication.setBannerMode(Banner.Mode.OFF);</span><br><span class="line">springApplication.run(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实对于使用者来讲，SpringBoot和传统的Spring MVC应用差别并不是很大，都是通过注解的方式来写Controller，Controller里面持有service变量，再层层调用。那么SpringBoot的便利之处就在于配置变少了，约定优于配置。</p><p>看一下<code>SpringBootApplication</code>注解的源码，相当于同时声明了3个注解@SpringBootConfiguration，@EnableAutoConfiguration，@ComponentScan。@SpringBootConfiguration里面又包含了@Configuration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123;</span><br><span class="line"><span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class="line"><span class="meta">@Filter</span>(type = FilterType.CUSTOM,</span><br><span class="line">classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br></pre></td></tr></table></figure><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Indicates that a class declares one or more @Bean methods and may be processed by the Spring container to generate bean definitions and service requests for those beans at runtime, for example:</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> MyBean <span class="title">myBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// instantiate, configure and return bean ...</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Via AnnotationConfigApplicationContext</span><br><span class="line"><span class="meta">@Configuration</span> classes are typically bootstrapped using either AnnotationConfigApplicationContext or its web-capable variant, AnnotationConfigWebApplicationContext. A simple example with the former follows:</span><br><span class="line">   AnnotationConfigApplicationContext ctx = <span class="keyword">new</span> AnnotationConfigApplicationContext();</span><br><span class="line">   ctx.register(AppConfig.class);</span><br><span class="line">   ctx.refresh();</span><br><span class="line">   MyBean myBean = ctx.getBean(MyBean.class);</span><br><span class="line">   <span class="comment">// use myBean ...</span></span><br></pre></td></tr></table></figure><p>@Configuration是通过AnnotationConfigApplicationContext或者AnnotationConfigWebApplicationContext启动的，通过AnnotationConfigApplicationContext将AppConfig注册到上下文中，就能从上下文获取MyBean的实例了。</p><p>JDK源码里的文档，详细介绍了@Configuration注解相关的另外内容，其中包括：</p><ul><li>@ComponentScan </li><li>@Autowired Environment env</li><li>@PropertySource</li><li>@Import</li><li>@Profile</li><li>@ImportResource</li><li>@Lazy </li><li>@RunWith</li><li>@ContextConfiguration</li><li>等等</li></ul><h3 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h3><p>Enable auto-configuration of the Spring Application Context, attempting to guess and configure beans that you are likely to need. Auto-configuration classes are usually applied based on your classpath and what beans you have defined</p><p>it will be used when scanning for @Entity classes. It is generally recommended that you place @EnableAutoConfiguration (if you’re not using @SpringBootApplication) in a root package so that all sub-packages and classes can be searched.</p><p>Auto-configuration classes are regular Spring Configuration beans. They are located using the SpringFactoriesLoader mechanism (keyed against this class). Generally auto-configuration beans are @Conditional beans (most often using @ConditionalOnClass and @ConditionalOnMissingBean annotations).</p><p>自动装配，注解扫描当前包及以下的@Configuration类，所以建议放在到根目录下。自动装配的bean通常用@Conditional一类的注解修饰。</p><h3 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h3><p>配置扫描@Configuration组件的目录。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;微服务学习笔记&lt;/p&gt;
&lt;h1 id=&quot;Spring-Boot&quot;&gt;&lt;a href=&quot;#Spring-Boot&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot&quot;&gt;&lt;/a&gt;Spring Boot&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-boot#learn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://spring.io/projects/spring-boot#learn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;要创建一个Spring Boot项目，可以去&lt;a href=&quot;https://start.spring.io/，一键创建。&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://start.spring.io/，一键创建。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/spring-cloud/sc02-1.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;依赖中加入Web，然后点击&lt;code&gt;Generate Project&lt;/code&gt;，就会下载一个压缩包。&lt;br&gt;
    
    </summary>
    
      <category term="微服务" scheme="http://www.saily.top/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="微服务" scheme="http://www.saily.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Spring Cloud" scheme="http://www.saily.top/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud微服务-1-什么是微服务</title>
    <link href="http://www.saily.top/2019/04/10/springcloud/microservices-1/"/>
    <id>http://www.saily.top/2019/04/10/springcloud/microservices-1/</id>
    <published>2019-04-10T10:56:58.000Z</published>
    <updated>2019-08-01T10:10:13.191Z</updated>
    
    <content type="html"><![CDATA[<p>微服务学习笔记</p><h1 id="什么是微服务"><a href="#什么是微服务" class="headerlink" title="什么是微服务"></a>什么是微服务</h1><p><a href="https://martinfowler.com/articles/microservices.html" target="_blank" rel="noopener">https://martinfowler.com/articles/microservices.html</a></p><blockquote><p>“Microservices” - yet another new term on the crowded streets of software architecture. Although our natural inclination is to pass such things by with a contemptuous glance, this bit of terminology describes a style of software systems that we are finding more and more appealing. We’ve seen many projects use this style in the last few years, and results so far have been positive, so much so that for many of our colleagues this is becoming the default style for building enterprise applications. Sadly, however, there’s not much information that outlines what the microservice style is and how to do it.</p></blockquote><a id="more"></a><p>单体应用 -&gt; 微服务应用</p><p><a href="https://time.geekbang.org/column/article/13882" target="_blank" rel="noopener">从0开始学微服务-胡忠想</a></p><h2 id="单体架构存在的缺点"><a href="#单体架构存在的缺点" class="headerlink" title="单体架构存在的缺点"></a>单体架构存在的缺点</h2><ul><li>复杂性逐渐变高</li><li>技术债务逐渐上升</li><li>部署速度逐渐变慢</li><li>阻碍技术创新</li><li>无法按需伸缩</li></ul><h2 id="什么是微服务-1"><a href="#什么是微服务-1" class="headerlink" title="什么是微服务"></a>什么是微服务</h2><ul><li>Martin Fowler：简而言之，微服务架构风格这种开发方法，是以开发一组小型服务的方式来开发一个独立的应用系统。<strong>其中每个小型服务都运行在自己的进程中，并经常采用HTTP资源API这样轻量的机制来相互通信。</strong>这些服务围绕这些功能进行构建，并能通过全自动的部署机制来进行独立部署。<strong>这些微服务可以使用不同的语言来编写，并且可以使用不同的数据存储技术。</strong>对这些微服务我们仅做最低限度的集中管理。</li><li>微服务架构是一种架构模式，它提倡将单一应用程序划分成一组小的服务，服务之间相互协调、相互配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务于服务间采用轻量级的通信机制互相沟通（通常是基于HTTP的RESTful API）。每个服务都围绕着具体的业务进行构建，并且能够独立地被部署到生产环境、类生产环境等。另外，应尽量避免统一的、集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具对其进行构建。</li><li>微服务是一种架构风格，一个大型复杂软件应用由一个或多个微服务组成。系统中的各个微服务可被独立部署，各个微服务之间是松耦合的。每个微服务仅关注完成一件任务并很好地完成该任务。在所有情况下，每个任务代表着一个小的业务能力。</li></ul><h2 id="微服务是一种架构风格"><a href="#微服务是一种架构风格" class="headerlink" title="微服务是一种架构风格"></a>微服务是一种架构风格</h2><ul><li>服务组件化（Componentization via Services）</li><li>服务围绕业务（Organized around Business Capabilities）</li><li>产品开发模式（Products not Projects）</li><li>轻量级通信机制（Smart endpoints and dumb pipes）</li><li>去中心化治理（Decentralized Governance）</li><li>去中心化数据设计（Decentralized Data Management）</li><li>故障处理设计（Design for failure）</li><li>演进式设计（Evolutionary Design）</li><li>基础设施自动化（Infrastructure Automation）</li></ul><h2 id="微服务的优点和挑战"><a href="#微服务的优点和挑战" class="headerlink" title="微服务的优点和挑战"></a>微服务的优点和挑战</h2><ul><li>开发简单</li><li>技术栈灵活</li><li>服务独立</li><li>按需扩展</li></ul><hr><ul><li>运维复杂</li><li>数据一致性问题</li><li>集成测试复杂</li><li>重复代码</li><li>监控困难</li></ul><h3 id="微服务具备的特性"><a href="#微服务具备的特性" class="headerlink" title="微服务具备的特性"></a>微服务具备的特性</h3><ul><li>每个微服务可独立运行在自己的进程里</li><li>一系列独立运行的微服务共同构建起了整个系统</li><li>每个服务为独立的业务开发，一个微服务一般完成某个特定的功能，比如：订单管理，用户管理等</li><li>微服务之间通过一些轻量的通信机制进行通信，例如通过REST API或者RPC的方式进行调用</li></ul><h3 id="微服务的优点"><a href="#微服务的优点" class="headerlink" title="微服务的优点"></a>微服务的优点</h3><ul><li>易于开发和维护</li><li>启动较快</li><li>局部修改容易部署</li><li>技术栈不受限</li><li>按需伸缩</li><li>DevOps</li></ul><h3 id="微服务带来的挑战"><a href="#微服务带来的挑战" class="headerlink" title="微服务带来的挑战"></a>微服务带来的挑战</h3><ul><li>运维要求较高</li><li>分布式的复杂性</li><li>接口调整成本高</li><li>重复劳动</li></ul><h3 id="微服务的设计原则"><a href="#微服务的设计原则" class="headerlink" title="微服务的设计原则"></a>微服务的设计原则</h3><ul><li>单一职责原则</li><li>服务自治原则</li><li>轻量级通信原则</li><li>接口明确原则</li></ul><h1 id="SOA"><a href="#SOA" class="headerlink" title="SOA"></a>SOA</h1><p>很多人会把SOA和微服务搞混，甚至理解为同一个东西。实际上SOA已经面世20多年了，和微服务是不一样的，接下来去维基百科看看SOA到底是什么。</p><p><a href="https://en.wikipedia.org/wiki/Service-oriented_architecture" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Service-oriented_architecture</a></p><p>学技术，一定要去阅读原版的英文资料。</p><blockquote><p><strong>Service-oriented architecture (SOA)</strong> is a style of software design where services are provided to the other components by application components, through a communication protocol over a network. The basic principles of service-oriented architecture are independent of vendors, products and technologies.[1] A service is a discrete unit of functionality that can be accessed remotely and acted upon and updated independently, such as retrieving a credit card statement online.</p></blockquote><blockquote><p>A service has four properties according to one of many definitions of SOA:[2]</p></blockquote><blockquote><ol><li>It logically represents a business activity with a specified outcome.        </li><li>It is self-contained.        </li><li>It is a black box for its consumers.</li><li>It may consist of other underlying services.[3]</li></ol><p>Different services can be used in conjunction to provide the functionality of a large software application,[5] a principle SOA shares with modular programming. Service-oriented architecture integrates distributed, separately-maintained and -deployed software components. It is enabled by technologies and standards that facilitate components’ communication and cooperation over a network, especially over an IP network.</p></blockquote><p>SOA是一种软件设计风格，SOA包含了一些服务，服务是通过应用组件的形式，通过网络上的一些通信协议像向其他应用提供服务。不同的服务可以联合起来构成一个大型的应用，SOA遵循模块化编程，它的这种架构集成了分布式的，独自维护的，独自部署的软件组件。也是通过网络来通信的。</p><p>好像看起来SOA的和微服务的概念也没什么太大差别？</p><blockquote><p>In SOA, services use protocols that describe how they pass and parse messages using description metadata. This metadata describes both the functional characteristics of the service and quality-of-service characteristics. Service-oriented architecture aims to allow users to combine large chunks of functionality to form applications which are built purely from existing services and combining them in an ad hoc manner. A service presents a simple interface to the requester that abstracts away the underlying complexity acting as a black box. Further users can also access these independent services without any knowledge of their internal implementation.[6]</p></blockquote><p>在SOA里，服务是用元数据描述的服务的功能特性和质量特性。有没有想起wsdl实现的webservice？</p><p>SOA里有3个角色</p><ul><li>Service provider</li><li>Service broker, service registry or service repository</li><li>Service requester/consumer</li></ul><p>SOA可以借助webservice实现，通过标准的internet协议，通过网络来访问这些功能。比如SOAP，Jini，CORBA，Rest</p><p>有很多技术都可以实现SOA，比如</p><ul><li>Web services based on WSDL and SOAP</li><li>Messaging, e.g., with ActiveMQ, JMS, RabbitMQ</li><li>RESTful HTTP, with Representational state transfer (REST) constituting its own constraints-based architectural style</li><li>OPC-UA</li><li>WCF (Microsoft’s implementation of Web services, forming a part of WCF)</li><li>Apache Thrift</li><li>SORCER</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>SOA已经被Web Service合并了，然而Web Service只是实现SOA的一种方式。在缺乏本地或二进制的数据传递调用的情况下，远程调用和效率都会变慢。XML是比较慢的，JSON相比XML会好一些。</p><p>有状态的服务不利于管理。</p><p>SOA主要的挑战是元数据的管理，服务于服务之间的通信会生成大量的消息。</p><p>难以测试。</p><h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2><p>微服务是现代化的SOA架构，用于构建分布式的软件系统。在微服务架构中的服务都是一些进程，它们之间是通过网络来进行通信去完成一个目标。这些服务使用技术不可知的协议，在服务内部去封装语言和框架。微服务是一种SOA的一种新的实现方式，从2014年开始变得流行起来（在引入DevOps后）。它强调的是持续的部署和其他敏捷的实现。</p><p>微服务没有统一的定义，但是有以下特征和原则</p><ul><li>fine-grained interfaces (to independently deployable services),</li><li>business-driven development (e.g. domain-driven design),</li><li>IDEAL cloud application architectures,</li><li>polyglot programming and persistence,</li><li>lightweight container deployment,</li><li>decentralized continuous delivery, and</li><li>DevOps with holistic service monitoring.</li></ul><h1 id="SOA和微服务的差异性"><a href="#SOA和微服务的差异性" class="headerlink" title="SOA和微服务的差异性"></a>SOA和微服务的差异性</h1><h2 id="文章1"><a href="#文章1" class="headerlink" title="文章1"></a>文章1</h2><p><a href="https://www.ibm.com/blogs/cloud-computing/2018/09/06/soa-versus-microservices/" target="_blank" rel="noopener">https://www.ibm.com/blogs/cloud-computing/2018/09/06/soa-versus-microservices/</a></p><blockquote><p>The main distinction comes down to scope. To put it simply, service-oriented architecture (SOA) has an enterprise scope, while the microservices architecture has an application scope.</p></blockquote><p>SOA着重点在企业范围，微服务着重点在应用范围。</p><p><img src="https://www.ibm.com/blogs/cloud-computing/wp-content/uploads/2018/08/SOA_microservices.png" alt></p><p>从这个图可以看出来，SOA的范围更大，他关注的是应用与应用之间的关系。而微服务是应用内部的关联。</p><h2 id="文章2"><a href="#文章2" class="headerlink" title="文章2"></a>文章2</h2><p><a href="https://dzone.com/articles/microservices-vs-soa-is-there-any-difference-at-al" target="_blank" rel="noopener">https://dzone.com/articles/microservices-vs-soa-is-there-any-difference-at-al</a></p><blockquote><p>Service Oriented Architecture is less about how to modularize an application, and more about how to compose an application by integration of distributed, separately-maintained and deployed software components. It is enabled by technologies and standards that make it easier for components to communicate and cooperate over a network, especially an IP network.</p></blockquote><p><img src="/img/spring-cloud/sc01-1.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;微服务学习笔记&lt;/p&gt;
&lt;h1 id=&quot;什么是微服务&quot;&gt;&lt;a href=&quot;#什么是微服务&quot; class=&quot;headerlink&quot; title=&quot;什么是微服务&quot;&gt;&lt;/a&gt;什么是微服务&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://martinfowler.com/articles/microservices.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://martinfowler.com/articles/microservices.html&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Microservices” - yet another new term on the crowded streets of software architecture. Although our natural inclination is to pass such things by with a contemptuous glance, this bit of terminology describes a style of software systems that we are finding more and more appealing. We’ve seen many projects use this style in the last few years, and results so far have been positive, so much so that for many of our colleagues this is becoming the default style for building enterprise applications. Sadly, however, there’s not much information that outlines what the microservice style is and how to do it.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="微服务" scheme="http://www.saily.top/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="微服务" scheme="http://www.saily.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Spring Cloud" scheme="http://www.saily.top/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud基于用户和ip的灰度发布方案</title>
    <link href="http://www.saily.top/2019/02/28/springcloud/spring-cloud-nepxion-gray/"/>
    <id>http://www.saily.top/2019/02/28/springcloud/spring-cloud-nepxion-gray/</id>
    <published>2019-02-28T03:32:01.000Z</published>
    <updated>2019-02-28T03:52:48.649Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于用户和ip的灰度发布方案"><a href="#基于用户和ip的灰度发布方案" class="headerlink" title="基于用户和ip的灰度发布方案"></a>基于用户和ip的灰度发布方案</h1><p>为了能够更好的解决系统新版本上线无法验证的风险，我们通常需要在升级的时候进行灰度发布，下面调研了一个上线灰度发布的流程。</p><p>下面先看一张图，然后再用一段文字描述整个发布的逻辑。</p><p><img src="/img/spring-cloud/灰度流量V2.jpg" alt></p><a id="more"></a><p>在正常情况下，用户的流量是可以随意打到A，A1，A2服务上的，A到B的流量，也是可以随意打的。<br>当灰度发布的开关打开以后，如图上所示，例如A3,B2,C4的链路为灰度路由的配置。此时将切断正常用户对A3,B2,C4的服务实例的访问，并且正常流量到A1以后，也不会再打到B2上。<br>当指定的测试账号访问系统的时候，所有的测试流量都会打到A3,B2,C4的链路服务实例上，第一步流量到A3以后，也不会将A调用B的流量打到B1的服务实例上。<br>当测试将这一组验证完毕后，即可将对配置进行修改，进而发布下一组。<br>当所有的实例都发布完成后，再将灰度发布开关关闭，此时，发布完成。<br>所有的这些操作，都可以在Apollo配置中心一键完成。</p><p>链路配置格式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"sevice-demo-a"</span>: <span class="string">"172.16.101.90:5000"</span>,</span><br><span class="line">    <span class="attr">"sevice-demo-b"</span>: <span class="string">"172.16.101.90:5020"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p>本方案基于Nepxion Discovery开发</p><blockquote><p>Nepxion Discovery is an enhancement for Spring Cloud Discovery on Eureka + Consul + Zookeeper + Nacos with Nacos + Apollo config for gray release, router and isolation 灰度发布、服务隔离、服务路由、服务权重、黑/白名单过滤 <a href="http://www.nepxion.com" target="_blank" rel="noopener">http://www.nepxion.com</a></p></blockquote><p>要了解灰度发布的原理，首先需要知道SpringCloud是基于Ribbon实现负载均衡算法的，以及是如何从注册中心拉取的服务列表。</p><p>灰度路由除了可以根据请求头来路由请求，也可以跟服务实例本身的版本号来决定路由。下面给出一个逻辑图，以及两个个源码解析的UML图。</p><p><img src="/img/spring-cloud/版本和IP路由逻辑.jpg" alt="版本和IP路由逻辑"></p><p><img src="/img/spring-cloud/版本号过滤服务列表逻辑.jpg" alt="版本号过滤服务列表逻辑"></p><p><img src="/img/spring-cloud/根据请求头执行负载均衡规则（权重逻辑）.jpg" alt="根据请求头执行负载均衡规则（权重逻辑）"></p><p>nepxion本来就提供了良好的服务过滤扩展，所以我的代码就是核心的一个过滤策略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 本策略实现了当灰度开关开启，对服务实例的ip进行过滤</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yangfan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/01/02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Log</span>4j2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GrayIpDiscoveryEnabledStrategy</span> <span class="keyword">implements</span> <span class="title">DiscoveryEnabledStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String IS_GRAY_USER = <span class="string">"isGrayUser"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVICE_IP = <span class="string">"serviceIp"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String GRAY_SWITCH = <span class="string">"graySwitch"</span>;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ServiceStrategyContextHolder serviceStrategyContextHolder;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; serviceIpMap;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> graySwitch;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;apollo.plugin.namespace&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String namespace;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Config config = ConfigService.getConfig(namespace);</span><br><span class="line">        serviceIpMap = toMap(config.getProperty(SERVICE_IP, <span class="string">"&#123;&#125;"</span>));</span><br><span class="line">        graySwitch = config.getBooleanProperty(SWITCH, Boolean.FALSE);</span><br><span class="line"></span><br><span class="line">        config.addChangeListener(changeEvent -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// ip配置发生变化</span></span><br><span class="line">            <span class="keyword">if</span> (changeEvent.isChanged(SERVICE_IP)) &#123;</span><br><span class="line">                <span class="keyword">final</span> String newValue = changeEvent.getChange(SERVICE_IP).getNewValue();</span><br><span class="line">                <span class="keyword">final</span> String oldValue = changeEvent.getChange(SERVICE_IP).getOldValue();</span><br><span class="line">                log.info(<span class="string">"service ip map changed, oldValue is &#123;&#125;, newValue is &#123;&#125;"</span>, () -&gt; oldValue, () -&gt; newValue);</span><br><span class="line">                serviceIpMap = toMap(newValue);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 开关发生变化</span></span><br><span class="line">            <span class="keyword">if</span> (changeEvent.isChanged(GRAY_SWITCH)) &#123;</span><br><span class="line">                <span class="keyword">final</span> String newValue = changeEvent.getChange(GRAY_SWITCH).getNewValue();</span><br><span class="line">                <span class="keyword">final</span> String oldValue = changeEvent.getChange(GRAY_SWITCH).getOldValue();</span><br><span class="line">                log.info(<span class="string">"graySwitch changed, oldValue is &#123;&#125;, newValue is &#123;&#125;"</span>, () -&gt; oldValue, () -&gt; newValue);</span><br><span class="line">                graySwitch = Boolean.valueOf(changeEvent.getChange(GRAY_SWITCH).getNewValue());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;, Sets.newHashSet(SERVICE_IP, GRAY_SWITCH));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(Server server, Map&lt;String, String&gt; metadata)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ip过滤</span></span><br><span class="line">        <span class="keyword">boolean</span> enabled = applyIpFilter(server, metadata);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!enabled) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当灰度开关打开后，正在灰度的region不能被正常流量访问到</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> server</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metadata</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">applyIpFilter</span><span class="params">(Server server, Map&lt;String, String&gt; metadata)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!graySwitch) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String appName = server.getMetaInfo().getAppName();</span><br><span class="line">        String ip = server.getHostPort();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ip匹配，灰度请求，灰度实例可访问</span></span><br><span class="line">        <span class="keyword">final</span> String ipHost = serviceIpMap.get(appName);</span><br><span class="line">        <span class="keyword">if</span> (ipHost != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> ipMatch = ip.equals(ipHost);</span><br><span class="line"></span><br><span class="line">            ServletRequestAttributes restAttributes = serviceStrategyContextHolder.getRestAttributes();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 非http请求</span></span><br><span class="line">            <span class="keyword">if</span> (restAttributes == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// ip和灰度实例匹配，不予访问</span></span><br><span class="line">                log.info(<span class="string">"The ServletRequestAttributes object is null, ignore to do gray ip filter for service=&#123;&#125;"</span>, appName);</span><br><span class="line">                <span class="keyword">return</span> !ipMatch;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> String isGrayUser = restAttributes.getRequest().getHeader(IS_GRAY_USER);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 无法识别是否是灰度用户</span></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isEmpty(isGrayUser)) &#123;</span><br><span class="line">                <span class="comment">// ip和灰度实例匹配，不予访问</span></span><br><span class="line">                log.info(<span class="string">"The isGrayUser header is null, ignore to do gray ip filter for service=&#123;&#125;"</span>, appName);</span><br><span class="line">                <span class="keyword">return</span> !ipMatch;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 灰度用户</span></span><br><span class="line">            <span class="keyword">if</span> (Boolean.valueOf(isGrayUser)) &#123;</span><br><span class="line">                <span class="comment">// ip和灰度实例匹配，通过访问</span></span><br><span class="line">                <span class="keyword">if</span> (ipMatch) &#123;</span><br><span class="line">                    log.info(<span class="string">"found gray user request, service &#123;&#125; route to ip &#123;&#125;"</span>, appName, ipHost);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> ipMatch;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">// 非灰度用户</span></span><br><span class="line">                <span class="comment">// ip和灰度实例匹配，不予访问</span></span><br><span class="line">                <span class="keyword">return</span> !ipMatch;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">toMap</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        JavaType javaType = getParametricTypeJavaType(String.class, String.class);</span><br><span class="line">        <span class="keyword">return</span> objectMapper.readValue(str, javaType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> JavaType <span class="title">getParametricTypeJavaType</span><span class="params">(Class... clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> objectMapper.getTypeFactory().constructParametricType(HashMap.class, clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nepxion discovery框架的作者是个很用心的作者，我在开发的时候也遇到了一些问题，作者都耐心的和我一起分析，一一帮我解决了，推荐大家去Star，去学习。</p><p><a href="https://github.com/Nepxion/Discovery" target="_blank" rel="noopener">https://github.com/Nepxion/Discovery</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基于用户和ip的灰度发布方案&quot;&gt;&lt;a href=&quot;#基于用户和ip的灰度发布方案&quot; class=&quot;headerlink&quot; title=&quot;基于用户和ip的灰度发布方案&quot;&gt;&lt;/a&gt;基于用户和ip的灰度发布方案&lt;/h1&gt;&lt;p&gt;为了能够更好的解决系统新版本上线无法验证的风险，我们通常需要在升级的时候进行灰度发布，下面调研了一个上线灰度发布的流程。&lt;/p&gt;
&lt;p&gt;下面先看一张图，然后再用一段文字描述整个发布的逻辑。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/spring-cloud/灰度流量V2.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="spring boot/cloud" scheme="http://www.saily.top/categories/spring-boot-cloud/"/>
    
    
      <category term="spring-cloud" scheme="http://www.saily.top/tags/spring-cloud/"/>
    
      <category term="微服务" scheme="http://www.saily.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="灰度发布" scheme="http://www.saily.top/tags/%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Security OAuth2 定制错误消息</title>
    <link href="http://www.saily.top/2019/01/09/java/spring-security-oauth2-custom-exception-response/"/>
    <id>http://www.saily.top/2019/01/09/java/spring-security-oauth2-custom-exception-response/</id>
    <published>2019-01-09T12:32:49.000Z</published>
    <updated>2019-01-12T15:46:31.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近在搭建一个Spring Cloud的项目，在搭建途中，遇到了一些问题，这里记录一下。<br>在搭建AuthorizationServer的时候，就遇到了问题，我的授权模式是用的password模式，然后是集成了JWT生成access_token。</p><p>基本上我是参照这个项目搭建的，<a href="https://gitee.com/log4j/pig" target="_blank" rel="noopener">https://gitee.com/log4j/pig</a> 。不过因为只是参考，所以我还做了一些改动，而且我们Spring Cloud的版本也不一样，我是F版的。</p><a id="more"></a><h2 id="问题1-oauth-token-401问题"><a href="#问题1-oauth-token-401问题" class="headerlink" title="问题1 /oauth/token 401问题"></a>问题1 /oauth/token 401问题</h2><p>在AuthorizationServer搭建完成以后，启动访问/oauth/token接口获取access_token。传入用户名和密码，然后一直得到一个401错误，日志也没有，我最开始还以为是Spring Security把这个接口给拦截了，后来DEBUG了一下源码，发现在BasicAuthenticationFilter.doFilterInternal()里有这么一句判断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String header = request.getHeader(<span class="string">"Authorization"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (header == <span class="keyword">null</span> || !header.toLowerCase().startsWith(<span class="string">"basic "</span>)) &#123;</span><br><span class="line">chain.doFilter(request, response);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是如果你的header里面没有Authorization(BasicAuthenticationFilter.doFilterInternal)，或者Authorization不是以basic 开头的，直接就返回401了。虽然我忘记了传这个参数，但是日志里没有任何提示，这个错误真是让我好一顿找才给解决。</p><p>这里面是<code>client_id:client_secret</code>的base64编码。到这还没完，因为Spring Cloud F版会有那个PasswordEncoder，所以他在校验secret的时候会和服务器配置的时候会进行加密，如果存储的密钥不是相应的加密方式，他也会报错，这个错误在网上都搜得到了。</p><p><a href="http://springcloud.cn/view/13" target="_blank" rel="noopener">Spring Security 4.x -&gt; 5.x 踩坑记录</a></p><p>DaoAuthenticationProvider.additionalAuthenticationChecks()方法里，就是检查密码的地方。</p><h2 id="问题2-Unsupported-grant-type-password"><a href="#问题2-Unsupported-grant-type-password" class="headerlink" title="问题2 Unsupported grant type: password"></a>问题2 Unsupported grant type: password</h2><p>接着我又开始遇到这个错误，搜了一下说是AuthenticationManager无法注入。</p><p>在AuthorizationServerEndpointsConfigurer.getDefaultTokenGranters里面，如果AuthenticationManager类的实例的话，那么就不支持password的授权模式，也就是ResourceOwnerPasswordTokenGranter。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;TokenGranter&gt; <span class="title">getDefaultTokenGranters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ClientDetailsService clientDetails = clientDetailsService();</span><br><span class="line">AuthorizationServerTokenServices tokenServices = tokenServices();</span><br><span class="line">AuthorizationCodeServices authorizationCodeServices = authorizationCodeServices();</span><br><span class="line">OAuth2RequestFactory requestFactory = requestFactory();</span><br><span class="line"></span><br><span class="line">List&lt;TokenGranter&gt; tokenGranters = <span class="keyword">new</span> ArrayList&lt;TokenGranter&gt;();</span><br><span class="line">tokenGranters.add(<span class="keyword">new</span> AuthorizationCodeTokenGranter(tokenServices, authorizationCodeServices, clientDetails,</span><br><span class="line">requestFactory));</span><br><span class="line">tokenGranters.add(<span class="keyword">new</span> RefreshTokenGranter(tokenServices, clientDetails, requestFactory));</span><br><span class="line">ImplicitTokenGranter implicit = <span class="keyword">new</span> ImplicitTokenGranter(tokenServices, clientDetails, requestFactory);</span><br><span class="line">tokenGranters.add(implicit);</span><br><span class="line">tokenGranters.add(<span class="keyword">new</span> ClientCredentialsTokenGranter(tokenServices, clientDetails, requestFactory));</span><br><span class="line"><span class="keyword">if</span> (authenticationManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">tokenGranters.add(<span class="keyword">new</span> ResourceOwnerPasswordTokenGranter(authenticationManager, tokenServices,</span><br><span class="line">clientDetails, requestFactory));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tokenGranters;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://springcloud.cn/view/13" target="_blank" rel="noopener">Spring Security 4.x -&gt; 5.x 踩坑记录</a>的也提到了这个问题，不过我这里遇到了更奇怪的现象，在WebSecurityConfigurerAdapter加上下面的配置后，并没有解决我的问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(name = BeanIds.AUTHENTICATION_MANAGER)</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AuthenticationManager <span class="title">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.authenticationManagerBean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果我发现在我的项目中，AuthorizationServerConfig竟然比WebSecurityConfigurer先加载，所以在<code>public void configure(AuthorizationServerEndpointsConfigurer endpoints)</code>注入并设置endpoints.authenticationManager(authenticationManager)的时候，放的是一个null进去。</p><p>我还觉得蛮奇怪的，下面的代码也会注入一个null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br></pre></td></tr></table></figure><p>然后我把这个参数改到构造方法里面去启动，结果就告诉我循环依赖，后来想了想，可能是因为Spring在处理循环依赖的时候，把一些注入类自动处理成null了。</p><p>在我解决了循环依赖以后，我就能登录成功了。</p><h2 id="问题3-如何定制BadCredentialsException-UserNameNotFound的异常消息"><a href="#问题3-如何定制BadCredentialsException-UserNameNotFound的异常消息" class="headerlink" title="问题3 如何定制BadCredentialsException,UserNameNotFound的异常消息"></a>问题3 如何定制BadCredentialsException,UserNameNotFound的异常消息</h2><p>接下来就是输入错误密码的时候得到的错误了，如果用户名或者密码错误了，Spring Security会返回一个</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"error"</span>: <span class="string">"invalid_grant"</span>,</span><br><span class="line"><span class="attr">"error_ description"</span>: <span class="string">"坏的凭证"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个错误信息太不友好了，我们一般给客户端返回的消息都是统一标准的格式，比如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"code"</span>:<span class="string">"401"</span>,</span><br><span class="line"><span class="attr">"msg"</span>:<span class="string">"用户名或密码错误"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样另类的消息格式是绝对不允许的。所以我就想定制化这个消息格式，是相信Spring Security肯定提供了相应的机制来供我们实现这个消息的定制，我先是在网上搜了很久，都没有找到解决方案，只是找到了一些哥们跟我有同样的问题，但是却没有人给出解决方案。</p><p>比如这个stackoverflow.com上的这个<a href="https://stackoverflow.com/questions/38109842/how-to-change-the-badcredentialsexception-usernamenotfound-exception-messages-in" target="_blank" rel="noopener">哥们</a>。</p><p>没办法了，找不到方案就自己想办法吧，我就从抛出异常的地方开始一行一行的debug，接着发现这个异常被TokenEndpoint类里的一个ExceptionHandler给拦截然后输出的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler</span>(OAuth2Exception.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;OAuth2Exception&gt; <span class="title">handleException</span><span class="params">(OAuth2Exception e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">logger.warn(<span class="string">"Handling error: "</span> + e.getClass().getSimpleName() + <span class="string">", "</span> + e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> getExceptionTranslator().translate(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么这个getExceptionTranslator到底是个什么东西，最后翻了一下到底是在哪里设置的这个属性，最终发现是AuthorizationServerEndpointsConfigurer的一个字段，是不是很眼熟？</p><p>和设置AuthenticationManager的是同一个类，所以定制一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomWebResponseExceptionTranslator</span> <span class="keyword">implements</span> <span class="title">WebResponseExceptionTranslator</span>&lt;<span class="title">OAuth2Exception</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">translate</span><span class="params">(Exception e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(RestResp.error(CommonErrorCode.AUTHORIZED_ERROR), HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在AuthorizationServerConfig里加上配置，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    endpoints</span><br><span class="line">            <span class="comment">//......其他配置</span></span><br><span class="line">            .exceptionTranslator(customWebResponseExceptionTranslator)</span><br><span class="line">            .authenticationManager(authenticationManager);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后得到了我们想要的输出结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"401"</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"用户名或密码错误"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题4-invalid-token-错误消息定制"><a href="#问题4-invalid-token-错误消息定制" class="headerlink" title="问题4 invalid_token 错误消息定制"></a>问题4 invalid_token 错误消息定制</h2><p>如果传入的token是错误的，那么会得到这样格式的一个错误消息：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"error"</span>: <span class="string">"invalid_token"</span>,</span><br><span class="line">  <span class="attr">"error_description"</span>: <span class="string">"Cannot convert access token to JSON"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上有可能是这个token在redis里没有等好几种错误</p><p>DefaultTokenServices.loadAuthentication(String accessTokenValue)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (accessToken == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> InvalidTokenException(<span class="string">"Invalid access token: "</span> + accessTokenValue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (accessToken.isExpired()) &#123;</span><br><span class="line">tokenStore.removeAccessToken(accessToken);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> InvalidTokenException(<span class="string">"Access token expired: "</span> + accessTokenValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">OAuth2Authentication result = tokenStore.readAuthentication(accessToken);</span><br><span class="line"><span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// in case of race condition</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> InvalidTokenException(<span class="string">"Invalid access token: "</span> + accessTokenValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想要定制化这个错误消息，需要制定一个AuthExceptionEntryPoint.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Log</span>4j2</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthExceptionEntryPoint</span> <span class="keyword">implements</span> <span class="title">AuthenticationEntryPoint</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commence</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        log.info(<span class="string">"Token失效，禁止访问 &#123;&#125;"</span>, request.getRequestURI());</span><br><span class="line">        response.setCharacterEncoding(StandardCharsets.UTF_8.displayName());</span><br><span class="line">        response.setContentType(MediaType.APPLICATION_JSON_UTF8_VALUE);</span><br><span class="line">        RestResp result = RestResp.error(CommonErrorCode.UNAUTHORIZED, <span class="string">"Token错误"</span>);</span><br><span class="line">        response.setStatus(HttpStatus.SC_OK);</span><br><span class="line">        PrintWriter printWriter = response.getWriter();</span><br><span class="line">        printWriter.append(objectMapper.writeValueAsString(result));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后ResourceServerConfiguration里增加配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ResourceServerSecurityConfigurer resources)</span> </span>&#123;</span><br><span class="line">    resources.expressionHandler(expressionHandler);</span><br><span class="line">    resources.authenticationEntryPoint(authExceptionEntryPoint);</span><br><span class="line">    resources.accessDeniedHandler(iuMiaoAccessDeniedHandler);</span><br><span class="line">    resources.tokenStore(redisTokenStore());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就能得到自定义的错误。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"10000401"</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"未授权: Token错误"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;最近在搭建一个Spring Cloud的项目，在搭建途中，遇到了一些问题，这里记录一下。&lt;br&gt;在搭建AuthorizationServer的时候，就遇到了问题，我的授权模式是用的password模式，然后是集成了JWT生成access_token。&lt;/p&gt;
&lt;p&gt;基本上我是参照这个项目搭建的，&lt;a href=&quot;https://gitee.com/log4j/pig&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://gitee.com/log4j/pig&lt;/a&gt; 。不过因为只是参考，所以我还做了一些改动，而且我们Spring Cloud的版本也不一样，我是F版的。&lt;/p&gt;
    
    </summary>
    
      <category term="spring" scheme="http://www.saily.top/categories/spring/"/>
    
    
      <category term="spring security" scheme="http://www.saily.top/tags/spring-security/"/>
    
  </entry>
  
  <entry>
    <title>Sleuth在异步线程中丢失traceId的解决方案</title>
    <link href="http://www.saily.top/2018/12/29/springcloud/sleuth-lost-traceId/"/>
    <id>http://www.saily.top/2018/12/29/springcloud/sleuth-lost-traceId/</id>
    <published>2018-12-29T01:55:21.000Z</published>
    <updated>2018-12-29T03:07:13.714Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>今天同事说在Hystrix的执行方法里打印日志的时候，Sleuth的traceId丢失了，产生了新的traceId，我第一反应是难道是因为Hystrix采用的是线程隔离模式，所以导致sleuth在线程切换的时候丢失了traceId吗？但是我记得Sleuth是针对是Hystrix处理过的，具体的处理的类就是<code>SleuthHystrixConcurrencyStrategy</code>。Spring Cloud Sleuth专门对Hystrix处理过线程切换上下文传递的问题。<br><a id="more"></a></p><p>所以我猜测可能是同事的业务代码里使用了线程池。经确认后确实有线程池代码，原因同样是线程上下文切换丢失了traceId。那么接下来就去找一找解决方案吧。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>在Spring的官方文档中，我们找到了关于异步通讯的部分。</p><p><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-sleuth/1.3.4.RELEASE/single/spring-cloud-sleuth.html#_asynchronous_communication" target="_blank" rel="noopener">https://cloud.spring.io/spring-cloud-static/spring-cloud-sleuth/1.3.4.RELEASE/single/spring-cloud-sleuth.html#_asynchronous_communication</a></p><p>我也贴一下原文：</p><blockquote><h2 id="Executor-ExecutorService-and-ScheduledExecutorService"><a href="#Executor-ExecutorService-and-ScheduledExecutorService" class="headerlink" title="Executor, ExecutorService and ScheduledExecutorService"></a>Executor, ExecutorService and ScheduledExecutorService</h2></blockquote><blockquote><p>We’re providing LazyTraceExecutor, TraceableExecutorService and TraceableScheduledExecutorService. Those implementations are creating Spans each time a new task is submitted, invoked or scheduled.</p></blockquote><blockquote><p>Here you can see an example of how to pass tracing information with TraceableExecutorService when working with CompletableFuture:</p></blockquote><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;Long&gt; completableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line"><span class="comment">// perform some logic</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1_000_000L</span>;</span><br><span class="line">&#125;, <span class="keyword">new</span> TraceableExecutorService(executorService,</span><br><span class="line"><span class="comment">// 'calculateTax' explicitly names the span - this param is optional</span></span><br><span class="line">tracer, traceKeys, spanNamer, <span class="string">"calculateTax"</span>));</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>Important</strong></p><p>Sleuth doesn’t work with parallelStream() out of the box. If you want to have the tracing information propagated through the stream you have to use the approach with supplyAsync(…) as presented above.</p></blockquote><p>大概意思就是Sleuth提供了一个<code>TraceableExecutorService</code>包装我们自己的ExecutorService，我们手动传入traceId等参数。并且在提交新的任务的时候，<code>TraceableExecutorService</code>会为我们创建新的Span，但是traceId是一致的。</p><p>所以大家在用Sleuth的时候，如果代码里有用到线程池、或者Spring Boot提供的@Async注解的时候，大家需要注意一下traceId丢失的问题，这样会导致链路无法追踪。</p><p>下面分别贴出两种情况的解决方案代码。</p><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> BeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TraceableExecutorService traceableExecutorService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    traceableExecutorService = <span class="keyword">new</span> TraceableExecutorService(beanFactory, ThreadUtil.newExecutor());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">getR</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    traceableExecutorService.execute(() -&gt; someMethod());</span><br></pre></td></tr></table></figure><p>效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[demo,96d8ba3676199532,96d8ba3676199532] [ix-RedisGroup-1]</span><br><span class="line">[demo,96d8ba3676199532,d5538e854c35b369] [ix-redisGroup-1] </span><br><span class="line">[demo,96d8ba3676199532,96d8ba3676199532] [nio-5000-exec-3]</span><br></pre></td></tr></table></figure><p>第一行是Hystrix执行的时候打印的，第二行是异步线程执行的时候打印的，第三行是同步执行的时候打印的。</p><h2 id="Async注解"><a href="#Async注解" class="headerlink" title="@Async注解"></a>@Async注解</h2><p>用<code>TraceableExecutorService</code>包装线程池。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomExecutorConfig</span> <span class="keyword">extends</span> <span class="title">AsyncConfigurerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span> BeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Executor <span class="title">getAsyncExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line"><span class="comment">// CUSTOMIZE HERE</span></span><br><span class="line">executor.setCorePoolSize(<span class="number">7</span>);</span><br><span class="line">executor.setMaxPoolSize(<span class="number">42</span>);</span><br><span class="line">executor.setQueueCapacity(<span class="number">11</span>);</span><br><span class="line">executor.setThreadNamePrefix(<span class="string">"MyExecutor-"</span>);</span><br><span class="line"><span class="comment">// DON'T FORGET TO INITIALIZE</span></span><br><span class="line">executor.initialize();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> LazyTraceExecutor(<span class="keyword">this</span>.beanFactory, executor);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>赶紧查查代码里有没有这个问题吧</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;今天同事说在Hystrix的执行方法里打印日志的时候，Sleuth的traceId丢失了，产生了新的traceId，我第一反应是难道是因为Hystrix采用的是线程隔离模式，所以导致sleuth在线程切换的时候丢失了traceId吗？但是我记得Sleuth是针对是Hystrix处理过的，具体的处理的类就是&lt;code&gt;SleuthHystrixConcurrencyStrategy&lt;/code&gt;。Spring Cloud Sleuth专门对Hystrix处理过线程切换上下文传递的问题。&lt;br&gt;
    
    </summary>
    
      <category term="spring" scheme="http://www.saily.top/categories/spring/"/>
    
    
      <category term="spring" scheme="http://www.saily.top/tags/spring/"/>
    
      <category term="sleuth" scheme="http://www.saily.top/tags/sleuth/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Zuul中修改URI</title>
    <link href="http://www.saily.top/2018/12/11/springcloud/zuul-change-uri/"/>
    <id>http://www.saily.top/2018/12/11/springcloud/zuul-change-uri/</id>
    <published>2018-12-11T09:14:01.000Z</published>
    <updated>2018-12-17T10:14:56.625Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zuul-修改URI"><a href="#Zuul-修改URI" class="headerlink" title="Zuul 修改URI"></a>Zuul 修改URI</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近项目中有一个需求，因为系统要进行重构，所以在重构期间网关需要判断URL请求的是老系统还是新系统。如果请求的是老系统那么就需要根据URL和参数在网关层对进行转换，也就是要修改成新系统的URL，并转发到新系统上去。如果请求的是新系统，那么则不做处理，进行相应的鉴权操作。</p><a id="more"></a><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>在网上搜索了一番以后，发现zuul提供了一种方式，就是自定义一个Pre类型的Filter，然后写入这行代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.set(FilterConstants.REQUEST_URI_KEY, yourUri);</span><br></pre></td></tr></table></figure><p>经过我的测试，他确实可以修改URI，但是并不满足我的需求。</p><p>客户端请求的是/a/helloA，我在这里修改成/b/helloB，我会得到一个404错误。经过分析发现，它已经确定了/a/**开头对应的服务，然后在a服务里去找/b/helloB这个路径，所以得到的是一个404。我的需求是修改成b服务下的/helloB请求。</p><p>所以我必须在zuul解析/a/** -&gt;&gt; a服务之前就将路径修改了，经过一番探索，以及zuul自带的filter里的源码，我发现<code>PreDecorationFilter</code>里有这样一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line"><span class="keyword">final</span> String requestURI = <span class="keyword">this</span>.urlPathHelper.getPathWithinApplication(ctx.getRequest());</span><br><span class="line">Route route = <span class="keyword">this</span>.routeLocator.getMatchingRoute(requestURI);</span><br><span class="line"><span class="keyword">if</span> (route != <span class="keyword">null</span>) &#123;</span><br><span class="line">String location = route.getLocation();</span><br><span class="line"><span class="keyword">if</span> (location != <span class="keyword">null</span>) &#123;</span><br><span class="line">ctx.put(REQUEST_URI_KEY, route.getPath());</span><br><span class="line">ctx.put(PROXY_KEY, route.getId());</span><br><span class="line">.....</span><br></pre></td></tr></table></figure><p>这不就是获取URI，然后routeLocator获取匹配的Route的代码吗？</p><p>那我们跟进<code>this.urlPathHelper.getPathWithinApplication(ctx.getRequest());</code>，看看它是怎么获取URI的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPathWithinApplication</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">String contextPath = getContextPath(request);</span><br><span class="line">String requestUri = getRequestUri(request);</span><br><span class="line">String path = getRemainingPath(requestUri, contextPath, <span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">if</span> (path != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// Normal case: URI contains context path.</span></span><br><span class="line"><span class="keyword">return</span> (StringUtils.hasText(path) ? path : <span class="string">"/"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> requestUri;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getRequestUri</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">String uri = (String) request.getAttribute(WebUtils.INCLUDE_REQUEST_URI_ATTRIBUTE);</span><br><span class="line"><span class="keyword">if</span> (uri == <span class="keyword">null</span>) &#123;</span><br><span class="line">uri = request.getRequestURI();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> decodeAndCleanUriString(request, uri);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现Spring是这样来获取URI的：<code>request.getAttribute(WebUtils.INCLUDE_REQUEST_URI_ATTRIBUTE);</code></p><p>既然这样，那我们就可以自由发挥一下了。</p><h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><p>我的思路就是在执行<code>PreDecorationFilter</code>之前，将request的attribute中的<code>WebUtils.INCLUDE_REQUEST_URI_ATTRIBUTE</code>先设置一下。首先<code>PreDecorationFilter</code>的order是5，自定义的过滤得在它前面执行，接下来自定义一个过滤器吧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceName2APIFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FilterConstants.PRE_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FilterConstants.PRE_DECORATION_FILTER_ORDER - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = ctx.getRequest();</span><br><span class="line">        <span class="keyword">final</span> String uri = request.getRequestURI();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> uri.contains(<span class="string">"/helloB"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        <span class="keyword">final</span> HttpServletRequest request = ctx.getRequest();</span><br><span class="line">        <span class="comment">// 转发回到helloA</span></span><br><span class="line">        <span class="comment">// 将替换掉的url set进去,在对应的转发请求的url就会使用这个url</span></span><br><span class="line"></span><br><span class="line">        request.setAttribute(WebUtils.INCLUDE_REQUEST_URI_ATTRIBUTE, <span class="string">"/a/helloA"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记得标记@Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServiceName2APIFilter <span class="title">serviceName2APIFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ServiceName2APIFilter();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我测试了一下，成功了，需求解决。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Zuul-修改URI&quot;&gt;&lt;a href=&quot;#Zuul-修改URI&quot; class=&quot;headerlink&quot; title=&quot;Zuul 修改URI&quot;&gt;&lt;/a&gt;Zuul 修改URI&lt;/h1&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;最近项目中有一个需求，因为系统要进行重构，所以在重构期间网关需要判断URL请求的是老系统还是新系统。如果请求的是老系统那么就需要根据URL和参数在网关层对进行转换，也就是要修改成新系统的URL，并转发到新系统上去。如果请求的是新系统，那么则不做处理，进行相应的鉴权操作。&lt;/p&gt;
    
    </summary>
    
      <category term="spring" scheme="http://www.saily.top/categories/spring/"/>
    
    
      <category term="zuul" scheme="http://www.saily.top/tags/zuul/"/>
    
  </entry>
  
  <entry>
    <title>深入理解JVM01-类加载</title>
    <link href="http://www.saily.top/2018/12/02/jvm/understandjvm-1/"/>
    <id>http://www.saily.top/2018/12/02/jvm/understandjvm-1/</id>
    <published>2018-12-02T07:55:41.000Z</published>
    <updated>2019-03-26T12:14:25.580Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h1><p>在Java代码中，类型的加载、连接与初始化过程都是在程序运行期间完成的。</p><ol><li>类加载常见的行为是将磁盘上的class文件加载到内存中</li><li>连接将是类与类之间的关系处理好</li><li>初始化对一些静态的变量进行赋值</li></ol><a id="more"></a><p>这提供了更大的灵活性，增加了更多的可能性。</p><h2 id="类加载深入剖析"><a href="#类加载深入剖析" class="headerlink" title="类加载深入剖析"></a>类加载深入剖析</h2><p>加载类的工具，叫做类加载器</p><h3 id="Java虚拟机的生命周期"><a href="#Java虚拟机的生命周期" class="headerlink" title="Java虚拟机的生命周期"></a>Java虚拟机的生命周期</h3><p>在如下几种情况，Java虚拟机将结束生命周期</p><ul><li>执行了System.exit()方法</li><li>程序正常执行结束</li><li>程序在执行过程中遇到了异常或错误而异常终止</li><li>由于操作系统出现错误而导致Java虚拟机进程终止</li></ul><h2 id="类的加载、连续、与初始化"><a href="#类的加载、连续、与初始化" class="headerlink" title="类的加载、连续、与初始化"></a>类的加载、连续、与初始化</h2><ul><li>加载：查找并加载类的二进制数据</li><li><p>连接</p><ul><li>验证：确保被加载的类的正确性</li><li>准备：为类的静态变量分配内存，并将其初始化为默认值</li><li>解析：把类中的符号引用转换为直接引用</li></ul></li><li>初始化：为类的静态变量赋予正确的初始值。</li></ul><h2 id="类的使用和卸载"><a href="#类的使用和卸载" class="headerlink" title="类的使用和卸载"></a>类的使用和卸载</h2><ul><li>使用</li><li>卸载</li></ul><p>Java对类的使用方式可以分为两种，主动使用和被动使用。所有的Java虚拟机实现必须在每个类或接口被Java程序<strong>首次主动使用</strong>时才初始化他们，这也意味着被动使用不会初始化他们。</p><p>主动使用一共有其七种情况：</p><ol><li>创建类的实例</li><li>访问某个类或接口的静态变量，或者对该静态变量赋值（getstatic,putstatic）</li><li>调用类的静态方法（invokestatic）</li><li>反射（如Class.forName(“com.test.Test”)）</li><li>初始化一个类的子类</li><li>Java虚拟机启动时被标明为启动类的类（Java Test）</li><li>JDK1.7开始提供的动态语言支持：java.lang.invoke.MethodHandle实例的解析结果<code>REF_getStatic</code>，<code>REF_putStatic</code>，<code>REF_invokeStatic</code>句柄对应的类没有初始化，则初始化</li></ol><p>除了以上其中情况，其他使用Java类的方式都被看做是对类的被动使用，都不会导致类的初始化。</p><h2 id="类的加载"><a href="#类的加载" class="headerlink" title="类的加载"></a>类的加载</h2><p>类的加载指的是将类的.class文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在内存中创建一个java.lang.Class对象（规范未说明Class对象位于哪里，HotSpot虚拟机将其放在了方法区中）用来封装类在方法区内的数据结构（JDK8以后没有方法区了，叫做MetaSpace）</p><p>加载.class文件的几种方式：</p><ol><li>从本地系统中直接加载</li><li>通过网络下载.class文件</li><li>从zip,jar等归档文件中加载.class文件</li><li>从专有数据库中提取.class文件</li><li>将Java源文件动态编译为.class文件</li></ol><h3 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h3><p>下面给一个类加载的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * -XX:+TraceClassLoading，用于追踪类的加载信息并打印出来</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yangfan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/12/03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="comment">// MyTest1就是启动类，会先加载</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里MyChild1里面的静态代码块并不会执行</span></span><br><span class="line">        <span class="comment">// 因为没有主动使用MyChild1</span></span><br><span class="line">        <span class="comment">// 虽然MyChild1没有初始化，但是它被加载了，在加了-XX:+TraceClassLoading参数后可以看到</span></span><br><span class="line">        System.out.println(MyChild1.str);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对于静态字段来说，只有直接定义了该字段的类才会被初始化</span></span><br><span class="line">        <span class="comment">// 当一个类在初始化时，要求其父类全部都已经初始化完毕</span></span><br><span class="line"><span class="comment">//        System.out.println(MyChild1.st2);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyParent1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String str = <span class="string">"hello world"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"MyParent1 static block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyChild1</span> <span class="keyword">extends</span> <span class="title">MyParent1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String st2 = <span class="string">"welcome"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"MyChild1 static block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里用到了一个JVM参数，其实我们大多数时候，可能只是调整一下堆大小，其他的参数用得比较少，其实这个参数是有规律可循的。</p><p><code>-XX:+&lt;option&gt;</code>，表示开启option选项<br><code>-XX:-&lt;option&gt;</code>，表示关闭option选项<br><code>-XX:&lt;option&gt;=value</code>，表示将option选项的值设置为value</p><h3 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用javap反编译后</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * classes javap -c com.sail.jvm.classloader.MyTest2</span></span><br><span class="line"><span class="comment"> * Compiled from "MyTest2.java"</span></span><br><span class="line"><span class="comment"> * public class com.sail.jvm.classloader.MyTest2 &#123;</span></span><br><span class="line"><span class="comment"> *   public com.sail.jvm.classloader.MyTest2();</span></span><br><span class="line"><span class="comment"> *     Code:</span></span><br><span class="line"><span class="comment"> *        0: aload_0</span></span><br><span class="line"><span class="comment"> *        1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span></span><br><span class="line"><span class="comment"> *        4: return</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   public static void main(java.lang.String[]);</span></span><br><span class="line"><span class="comment"> *     Code:</span></span><br><span class="line"><span class="comment"> *        0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line"><span class="comment"> *        3: ldc           #4                  // String hello world</span></span><br><span class="line"><span class="comment"> *        5: invokevirtual #5                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line"><span class="comment"> *        8: return</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 助记符：</span></span><br><span class="line"><span class="comment"> * ldc表示将int，float或是String类型的常量值从常量池推送至栈顶</span></span><br><span class="line"><span class="comment"> * bipush表示将单字节(-128 ~ 127)的常量值推送至栈顶</span></span><br><span class="line"><span class="comment"> * sipush表示将一个短整型常量值(-32768 ~ 32767)推送至栈顶</span></span><br><span class="line"><span class="comment"> * iconst_1表示将int类型1推送至栈顶(iconst_m1 ~ iconst_5)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yangfan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/12/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(MyParent2.str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyParent2</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在编译阶段，这个常量会存入到调用这个常量的方法所在的类的常量池中，</span></span><br><span class="line"><span class="comment">     * 本质上调用类并没有直接引用到定义常量的类，因此并不会触发定义常量的类的初始化</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 即str会被放置到MyTest2的常量池中，之后MyTest2与MyParent2就没有任何关系了，</span></span><br><span class="line"><span class="comment">     * 甚至，我们可以将MyParent2的class删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String str = <span class="string">"hello world"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">short</span> s = <span class="number">127</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> m = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"MyParent2 static block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这些助记符在rt.jar里都能找到，比如iconst就在com.sun.org.apache.bcel.internal.generic.ICONST里。</p><h3 id="例3"><a href="#例3" class="headerlink" title="例3"></a>例3</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当一个常量的值并非编译期间可以确定的，那么其值就不会被放到调用类的常量池中，</span></span><br><span class="line"><span class="comment"> * 这时程序在运行时，会导致主动使用这个常量所在的类，显然会导致这个类被初始化。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yangfan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/03/26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(MyParent3.str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyParent3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String str = UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"MyParent3 static code"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例4"><a href="#例4" class="headerlink" title="例4"></a>例4</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对于数组实例来说，其类型是由JVM在运行期动态生成的，表示为class [Lcom.sail.jvm.classloader.MyParent4</span></span><br><span class="line"><span class="comment"> * 这种形式。动态生成的类型，其父类型就是Object。</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 对于数组来说，JavaDoc经常将构成数组的元素称为Component，实际上就是将数组降低一个未读后的类型。</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 助记符：</span></span><br><span class="line"><span class="comment"> * anewarray：表示创建一个引用类型的（如类、接口、数组）数组，并将其引用值亚茹栈顶</span></span><br><span class="line"><span class="comment"> * newarray：表示创建一个指定的原始类型（如int、float、char等）的数组，并将其引用值压入栈顶</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yangfan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/03/26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 首次主动使用</span></span><br><span class="line"><span class="comment">//        MyParent4 myParent4 = new MyParent4();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不会输出，并没有使用</span></span><br><span class="line">        MyParent4[] myParent4s = <span class="keyword">new</span> MyParent4[<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// class [Lcom.sail.jvm.classloader.MyParent4;</span></span><br><span class="line">        System.out.println(myParent4s.getClass());</span><br><span class="line"></span><br><span class="line">        MyParent4[][] myParent4s1 = <span class="keyword">new</span> MyParent4[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// class [[Lcom.sail.jvm.classloader.MyParent4;</span></span><br><span class="line">        System.out.println(myParent4s1.getClass());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// class java.lang.Object</span></span><br><span class="line">        System.out.println(myParent4s.getClass().getSuperclass());</span><br><span class="line">        <span class="comment">// class java.lang.Object</span></span><br><span class="line">        System.out.println(myParent4s1.getClass().getSuperclass());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"======="</span>);</span><br><span class="line">        <span class="keyword">int</span>[] ints = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// class [I</span></span><br><span class="line">        System.out.println(ints.getClass());</span><br><span class="line">        <span class="comment">// class java.lang.Object</span></span><br><span class="line">        System.out.println(ints.getClass().getSuperclass());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] chars = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1</span>];</span><br><span class="line">        System.out.println(chars.getClass());</span><br><span class="line">        <span class="keyword">boolean</span>[] booleans = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">1</span>];</span><br><span class="line">        System.out.println(booleans.getClass());</span><br><span class="line">        <span class="keyword">short</span>[] shorts = <span class="keyword">new</span> <span class="keyword">short</span>[<span class="number">1</span>];</span><br><span class="line">        System.out.println(shorts.getClass());</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1</span>];</span><br><span class="line">        System.out.println(bytes.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyParent4</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 会输出</span></span><br><span class="line">        System.out.println(<span class="string">"MyParent4 static block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public class com.sail.jvm.classloader.MyTest4 &#123;</span></span><br><span class="line"><span class="comment">  public com.sail.jvm.classloader.MyTest4();</span></span><br><span class="line"><span class="comment">    Code:</span></span><br><span class="line"><span class="comment">       0: aload_0</span></span><br><span class="line"><span class="comment">       1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span></span><br><span class="line"><span class="comment">       4: return</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  public static void main(java.lang.String[]);</span></span><br><span class="line"><span class="comment">    Code:</span></span><br><span class="line"><span class="comment">       0: iconst_1</span></span><br><span class="line"><span class="comment">       1: anewarray     #2                  // class com/sail/jvm/classloader/MyParent4</span></span><br><span class="line"><span class="comment">       4: astore_1</span></span><br><span class="line"><span class="comment">       5: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line"><span class="comment">       8: aload_1</span></span><br><span class="line"><span class="comment">       9: invokevirtual #4                  // Method java/lang/Object.getClass:()Ljava/lang/Class;</span></span><br><span class="line"><span class="comment">      12: invokevirtual #5                  // Method java/io/PrintStream.println:(Ljava/lang/Object;)V</span></span><br><span class="line"><span class="comment">      15: iconst_1</span></span><br><span class="line"><span class="comment">      16: iconst_1</span></span><br><span class="line"><span class="comment">      17: multianewarray #6,  2             // class "[[Lcom/sail/jvm/classloader/MyParent4;"</span></span><br><span class="line"><span class="comment">      21: astore_2</span></span><br><span class="line"><span class="comment">      22: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line"><span class="comment">      25: aload_2</span></span><br><span class="line"><span class="comment">      26: invokevirtual #4                  // Method java/lang/Object.getClass:()Ljava/lang/Class;</span></span><br><span class="line"><span class="comment">      29: invokevirtual #5                  // Method java/io/PrintStream.println:(Ljava/lang/Object;)V</span></span><br><span class="line"><span class="comment">      32: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line"><span class="comment">      35: aload_1</span></span><br><span class="line"><span class="comment">      36: invokevirtual #4                  // Method java/lang/Object.getClass:()Ljava/lang/Class;</span></span><br><span class="line"><span class="comment">      39: invokevirtual #7                  // Method java/lang/Class.getSuperclass:()Ljava/lang/Class;</span></span><br><span class="line"><span class="comment">      42: invokevirtual #5                  // Method java/io/PrintStream.println:(Ljava/lang/Object;)V</span></span><br><span class="line"><span class="comment">      45: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line"><span class="comment">      48: aload_2</span></span><br><span class="line"><span class="comment">      49: invokevirtual #4                  // Method java/lang/Object.getClass:()Ljava/lang/Class;</span></span><br><span class="line"><span class="comment">      52: invokevirtual #7                  // Method java/lang/Class.getSuperclass:()Ljava/lang/Class;</span></span><br><span class="line"><span class="comment">      55: invokevirtual #5                  // Method java/io/PrintStream.println:(Ljava/lang/Object;)V</span></span><br><span class="line"><span class="comment">      58: iconst_1</span></span><br><span class="line"><span class="comment">      59: newarray       int</span></span><br><span class="line"><span class="comment">      61: astore_3</span></span><br><span class="line"><span class="comment">      62: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line"><span class="comment">      65: aload_3</span></span><br><span class="line"><span class="comment">      66: invokevirtual #4                  // Method java/lang/Object.getClass:()Ljava/lang/Class;</span></span><br><span class="line"><span class="comment">      69: invokevirtual #5                  // Method java/io/PrintStream.println:(Ljava/lang/Object;)V</span></span><br><span class="line"><span class="comment">      72: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line"><span class="comment">      75: aload_3</span></span><br><span class="line"><span class="comment">      76: invokevirtual #4                  // Method java/lang/Object.getClass:()Ljava/lang/Class;</span></span><br><span class="line"><span class="comment">      79: invokevirtual #7                  // Method java/lang/Class.getSuperclass:()Ljava/lang/Class;</span></span><br><span class="line"><span class="comment">      82: invokevirtual #5                  // Method java/io/PrintStream.println:(Ljava/lang/Object;)V</span></span><br><span class="line"><span class="comment">      85: return</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="例5"><a href="#例5" class="headerlink" title="例5"></a>例5</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当一个接口在初始化时，并不要求其父接口都完成了初始化</span></span><br><span class="line"><span class="comment"> * 只有在真正使用到父接口的时候（如引用接口中定义的常量时），才会初始化</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yangfan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/03/26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 删除MyParent5.class文件后再运行</span></span><br><span class="line">        <span class="comment">// 把MyChild5.class删了，也没有问题</span></span><br><span class="line">        System.out.println(MyChild5.b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyParent5</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyChild5</span> <span class="keyword">extends</span> <span class="title">MyParent5</span> </span>&#123;</span><br><span class="line"><span class="comment">//    int b = 6;</span></span><br><span class="line">    <span class="comment">// 此时要求MyParent5.class必须存在</span></span><br><span class="line">    <span class="keyword">int</span> b = <span class="keyword">new</span> Random().nextInt(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例6"><a href="#例6" class="headerlink" title="例6"></a>例6</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yangfan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/03/26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Singleton singleton = Singleton.getInstance();</span><br><span class="line">        System.out.println(<span class="string">"counter:1 "</span> + Singleton.counter1);</span><br><span class="line">        System.out.println(<span class="string">"counter:2 "</span> + Singleton.counter2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> counter1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在这里输出1</span></span><br><span class="line"><span class="comment">//    public static int counter2 = 0;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        counter1++;</span><br><span class="line">        counter2++; <span class="comment">// 准备阶段的重要意义（分配内存，给默认值）</span></span><br><span class="line"></span><br><span class="line">        System.out.println(counter1);</span><br><span class="line">        System.out.println(counter2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在这里输出0</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> counter2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;类加载&quot;&gt;&lt;a href=&quot;#类加载&quot; class=&quot;headerlink&quot; title=&quot;类加载&quot;&gt;&lt;/a&gt;类加载&lt;/h1&gt;&lt;p&gt;在Java代码中，类型的加载、连接与初始化过程都是在程序运行期间完成的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;类加载常见的行为是将磁盘上的class文件加载到内存中&lt;/li&gt;
&lt;li&gt;连接将是类与类之间的关系处理好&lt;/li&gt;
&lt;li&gt;初始化对一些静态的变量进行赋值&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="JVM" scheme="http://www.saily.top/categories/JVM/"/>
    
    
      <category term="java" scheme="http://www.saily.top/tags/java/"/>
    
      <category term="JVM" scheme="http://www.saily.top/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch08-内核原理</title>
    <link href="http://www.saily.top/2018/09/28/elasticsearch/elasticSearch08/"/>
    <id>http://www.saily.top/2018/09/28/elasticsearch/elasticSearch08/</id>
    <published>2018-09-28T07:12:35.000Z</published>
    <updated>2018-09-27T09:56:23.896Z</updated>
    
    <content type="html"><![CDATA[<h1 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h1><p>如何使文本被搜索到是搜索引擎很重要的一部分，倒排索引是很适合搜索的。</p><p>因为它的结构：</p><ol><li>包含这个关键词的document list</li><li>包含这个关键词的所有document的数量：IDFinverse document frequency. </li><li>这个关键词在每个document中出现的次数：TFterm frequency. <a id="more"></a></li><li>这个关键词在这个document中的次序</li><li>每个document的长度：length norm</li><li>包含这个关键词的所有document的平均长度</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Term  | Doc 1 | Doc 2 | Doc 3 | ...</span><br><span class="line">------------------------------------</span><br><span class="line">brown |   X   |       |  X    | ...</span><br><span class="line">fox   |   X   |   X   |  X    | ...</span><br><span class="line">quick |   X   |   X   |       | ...</span><br><span class="line">the   |   X   |       |  X    | ...</span><br></pre></td></tr></table></figure><p>倒排索引是不可变的，它的好处如下：</p><ul><li>不需要锁，提升并发能力，避免锁的问题</li><li>数据不变，一直保存在os cache中，只要cache内存足够</li><li>filter cache一直驻留在内存，因为数据不变</li><li>可以压缩，节省cpu和io开销</li></ul><p>当然，一个不变的索引也有不好的地方。主要事实是它是不可变的! 你不能修改它。如果你需要让一个新的文档 可被搜索，你需要重建整个索引。这要么对一个索引所能包含的数据量造成了很大的限制，要么对索引可被更新的频率造成了很大的限制。</p><h1 id="文档写入原理"><a href="#文档写入原理" class="headerlink" title="文档写入原理"></a>文档写入原理</h1><p>文档在写入的时候，ES的流程如下：</p><ol><li>新文档写入buffer</li><li>commit point</li><li>buffer中的数据写入新的index segment</li><li>等待在os cache中的index segment被fsync强制刷到磁盘上</li><li>新的index sgement被打开，供search使用</li><li>buffer被清空</li></ol><p><img src="https://www.elastic.co/guide/cn/elasticsearch/guide/current/images/elas_1102.png" alt></p><p><strong>删除和更新</strong></p><p>每次commit point时，会有一个.del文件，标记了哪些segment中的哪些document被标记为deleted了。<br>搜索的时候，会依次查询所有的segment，从旧的到新的，比如被修改过的document，在旧的segment中，会标记为deleted，在新的segment中会有其新的数据。</p><h1 id="优化写入流程"><a href="#优化写入流程" class="headerlink" title="优化写入流程"></a>优化写入流程</h1><p>现有流程的问题，每次都必须等待fsync将segment刷入磁盘，才能将segment打开供search使用，这样的话从一个document写入，到它可以被搜索，可能会超过1分钟！这就不是近实时的搜索了！主要瓶颈在于fsync实际发生磁盘IO写数据进磁盘，是很耗时的。</p><p>写入流程被改进如下：</p><ol><li>数据写入buffer</li><li>每隔一定时间，buffer中的数据被写入segment文件，但是先写入os cache</li><li>只要segment写入os cache，那就直接打开供search使用，不立即执行commit</li></ol><p><img src="https://www.elastic.co/guide/cn/elasticsearch/guide/current/images/elas_1105.png" alt></p><p>数据写入os cache，并被打开供搜索的过程，叫做refresh，默认是每隔1秒refresh一次。也就是说，每隔一秒就会将buffer中的数据写入一个新的index segment file，先写入os cache中。所以es是近实时的，数据写入到可以被搜索，默认是1秒。</p><p>POST /my_index/_refresh，可以手动refresh，一般不需要手动执行，没必要这样，让es自己搞就可以了。</p><p>比如说，我们现在的时效性要求比较低，只要求一条数据写入es，一分钟以后才让我们搜索到就可以了，那么就可以调整refresh interval。如果写的并发量和数据量比较大的话，refresh设置长一点可以优化写入速度，因为频繁的写入index segment file会比较占用资源。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"refresh_interval"</span>: <span class="string">"60s"</span> </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="可靠存储实现"><a href="#可靠存储实现" class="headerlink" title="可靠存储实现"></a>可靠存储实现</h1><p>再次优化的写入流程</p><ol><li>数据写入buffer缓冲和translog日志文件</li><li>每隔一秒钟，buffer中的数据被写入新的segment file，并进入os cache，此时segment被打开并供search使用</li><li>buffer被清空</li><li>重复1~3，新的segment不断添加，buffer不断被清空，而translog中的数据不断累加</li><li>当translog长度达到一定程度的时候，commit操作发生<ol><li>buffer中的所有数据写入一个新的segment，并写入os cache，打开供使用</li><li>buffer被清空</li><li>一个commit ponit被写入磁盘，标明了所有的index segment</li><li>filesystem cache中的所有index segment file缓存数据，被fsync强行刷到磁盘上</li><li>现有的translog被清空，创建一个新的translog</li></ol></li></ol><p><strong>新的文档被添加到内存缓冲区并且被追加到了事务日志</strong></p><p><img src="https://www.elastic.co/guide/cn/elasticsearch/guide/current/images/elas_1106.png" alt="新的文档被添加到内存缓冲区并且被追加到了事务日志"></p><p><strong>刷新（refresh）完成后, 缓存被清空但是事务日志不会</strong></p><p><img src="https://www.elastic.co/guide/cn/elasticsearch/guide/current/images/elas_1107.png" alt></p><p><strong>事务日志不断积累文档</strong></p><p><img src="https://www.elastic.co/guide/cn/elasticsearch/guide/current/images/elas_1108.png" alt></p><p><strong>在刷新（flush）之后，段被全量提交，并且事务日志被清空</strong></p><p><img src="https://www.elastic.co/guide/cn/elasticsearch/guide/current/images/elas_1109.png" alt></p><h2 id="数据恢复"><a href="#数据恢复" class="headerlink" title="数据恢复"></a>数据恢复</h2><p>OS cache中积累了不少数据，这个时候如果机器宕机了，虽然os cache的数据丢失了，但是translog的数据是存在的，可以基于translog和commit point进行数据恢复。</p><p>fsync+清空translog，就是flush，默认每隔30分钟flush一次，或者当translog过大的时候，也会flush。</p><p>POST /my_index/_flush，一般来说别手动flush，让它自动执行就可以了。</p><p><strong>translog</strong></p><p>translog本身，每隔5秒被fsync一次到磁盘上。在一次增删改操作之后，当fsync在primary shard和replica shard都成功之后，那次增删改操作才会成功。</p><p>但是这种在一次增删改时强行fsync translog可能会导致部分操作比较耗时，也可以允许部分数据丢失，设置异步fsync translog。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index/_settings</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"index.translog.durability"</span>: <span class="string">"async"</span>,</span><br><span class="line">    <span class="attr">"index.translog.sync_interval"</span>: <span class="string">"5s"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你不确定这个行为的后果，最好是使用默认的参数（ “index.translog.durability”: “request” ）来避免数据丢失。</p><h1 id="段合并"><a href="#段合并" class="headerlink" title="段合并"></a>段合并</h1><p>前面说了，refresh操作默认是每秒一次，每秒生成一个新的segment file，这样文件太多了，而且每次search都要搜索所有的segment，很耗时。</p><p>ES默认会在后台执行segment merge操作，在merge的时候，被标记为deleted的document也会被彻底物理删除。</p><p>每次merge操作的执行流程：</p><ol><li>选择一些有相似大小的segment，merge成一个大的segment</li><li>将新的segment flush到磁盘上去</li><li>写一个新的commit point，包括了新的segment，并且排除旧的那些segment</li><li>将新的segment打开供搜索</li><li>将旧的segment删除</li></ol><p><strong>两个提交了的段和一个未提交的段正在被合并到一个更大的段</strong></p><p><img src="https://www.elastic.co/guide/cn/elasticsearch/guide/current/images/elas_1110.png" alt></p><p><strong>一旦合并结束，老的段被删除</strong></p><p><img src="https://www.elastic.co/guide/cn/elasticsearch/guide/current/images/elas_1111.png" alt></p><h2 id="optimize-API"><a href="#optimize-API" class="headerlink" title="optimize API"></a>optimize API</h2><p>optimize API大可看做是 强制合并 API 。它会将一个分片强制合并到 max_num_segments 参数指定大小的段数目。 这样做的意图是减少段的数量（通常减少到一个），来提升搜索性能。</p><p>POST /my_index/_optimize?max_num_segments=1，尽量不要手动执行，让它自动默认执行就可以了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;倒排索引&quot;&gt;&lt;a href=&quot;#倒排索引&quot; class=&quot;headerlink&quot; title=&quot;倒排索引&quot;&gt;&lt;/a&gt;倒排索引&lt;/h1&gt;&lt;p&gt;如何使文本被搜索到是搜索引擎很重要的一部分，倒排索引是很适合搜索的。&lt;/p&gt;
&lt;p&gt;因为它的结构：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;包含这个关键词的document list&lt;/li&gt;
&lt;li&gt;包含这个关键词的所有document的数量：IDFinverse document frequency. &lt;/li&gt;
&lt;li&gt;这个关键词在每个document中出现的次数：TFterm frequency.
    
    </summary>
    
      <category term="ElasticSearch" scheme="http://www.saily.top/categories/ElasticSearch/"/>
    
    
      <category term="ElasticSearch" scheme="http://www.saily.top/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch07-索引管理</title>
    <link href="http://www.saily.top/2018/09/27/elasticsearch/elasticSearch07/"/>
    <id>http://www.saily.top/2018/09/27/elasticsearch/elasticSearch07/</id>
    <published>2018-09-27T03:48:13.000Z</published>
    <updated>2018-09-27T07:12:43.899Z</updated>
    
    <content type="html"><![CDATA[<p>此为龙果学院课程学习笔记，记录以后翻看</p><h1 id="索引管理"><a href="#索引管理" class="headerlink" title="索引管理"></a>索引管理</h1><h2 id="手动创建索引"><a href="#手动创建索引" class="headerlink" title="手动创建索引"></a>手动创建索引</h2><p>之前都是直接插入document，ES为我们自动创建索引。其实在大部分情况下，我们是需要自己先手动创建mapping的，就像数据库建表一样，你可能需要设置primary shard的数量，字段的分词器，具体的数据类型等等。</p><a id="more"></a><p><strong>创建索引的语法</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"number_of_shards"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"number_of_replicas"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"my_type"</span>: &#123;</span><br><span class="line">      <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"my_field"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"text"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改索引"><a href="#修改索引" class="headerlink" title="修改索引"></a>修改索引</h2><p><code>number_of_shards</code>是不能修改的，修改一下<code>number_of_replicas</code>试试。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index/_settings</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"number_of_replicas"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DELETE /my_index</span><br><span class="line">DELETE /index_one,index_two</span><br><span class="line">DELETE /index_*</span><br><span class="line">DELETE /_all</span><br></pre></td></tr></table></figure><p><code>DELETE /_all</code>是很危险的操作，可以在ES的配置文件里禁用掉。</p><p><strong>elasticsearch.yml</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">action.destructive_requires_name:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="配置分词器"><a href="#配置分词器" class="headerlink" title="配置分词器"></a>配置分词器</h2><p>分词器是用于将全文字符串转换为适合搜索的倒排索引。</p><p>standard 分析器是用于全文字段的默认分析器， 对于大部分西方语系来说是一个不错的选择。 它包括了以下几点：</p><ul><li>standard tokenizer：以单词边界进行切分</li><li>standard token filter：什么都不做</li><li>lowercase token filter：将所有字母转换为小写</li><li>stop token filter（默认被禁用）：移除停用词，比如a the it等等</li></ul><h2 id="修改分词器"><a href="#修改分词器" class="headerlink" title="修改分词器"></a>修改分词器</h2><p>启用english停用词token filter</p><p>在下面的例子中，我们创建了一个新的分析器，叫做 <code>es_std</code> ， 并使用预定义的英语停用词列表：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"analysis"</span>: &#123;</span><br><span class="line">      <span class="attr">"analyzer"</span>: &#123;</span><br><span class="line">        <span class="attr">"es_std"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"standard"</span>,</span><br><span class="line">          <span class="attr">"stopwords"</span>: <span class="string">"_english_"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET /my_index/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"standard"</span>, </span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"a dog is in the house"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokens"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"a"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"dog"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">5</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"is"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">6</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">8</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"in"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">9</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">11</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">3</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"the"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">12</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">15</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">4</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"house"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">16</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">21</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GET /my_index/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"es_std"</span>,</span><br><span class="line">  <span class="attr">"text"</span>:<span class="string">"a dog is in the house"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokens"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"dog"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">5</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"house"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">16</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">21</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义分词器"><a href="#自定义分词器" class="headerlink" title="自定义分词器"></a>自定义分词器</h2><p>虽然Elasticsearch带有一些现成的分析器，然而在分析器上Elasticsearch真正的强大之处在于，你可以通过在一个适合你的特定数据的设置之中组合字符过滤器、分词器、词汇单元过滤器来创建自定义的分析器。</p><p>一个分词器就是在一个包里面组合了三种函数的一个包装器， 三种函数按照顺序被执行:</p><ul><li><p>字符过滤器<br>  字符过滤器 用来 整理 一个尚未被分词的字符串。例如，如果我们的文本是HTML格式的，它会包含像 <code>&lt;p&gt;</code> 或者 <code>&lt;div&gt;</code> 这样的HTML标签，这些标签是我们不想索引的。我们可以使用 html清除 字符过滤器 来移除掉所有的HTML标签，并且像把 <code>&amp;Aacute;</code> 转换为相对应的Unicode字符 Á 这样，转换HTML实体。</p><p>  一个分析器可能有0个或者多个字符过滤器。</p></li><li><p>分词器<br>  一个分析器 必须 有一个唯一的分词器。 分词器把字符串分解成单个词条或者词汇单元。 standard 分析器里使用的 standard 分词器 把一个字符串根据单词边界分解成单个词条，并且移除掉大部分的标点符号，然而还有其他不同行为的分词器存在。</p></li><li><p>词单元过滤器<br>  经过分词，作为结果的 词单元流 会按照指定的顺序通过指定的词单元过滤器 。<br><strong>举例</strong>：</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"analysis"</span>: &#123;</span><br><span class="line">      <span class="attr">"char_filter"</span>: &#123;</span><br><span class="line">        <span class="attr">"&amp;_to_and"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"mapping"</span>,</span><br><span class="line">          <span class="attr">"mappings"</span>: [<span class="string">"&amp;=&gt; and"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"filter"</span>: &#123;</span><br><span class="line">        <span class="attr">"my_stopwords"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"stop"</span>,</span><br><span class="line">          <span class="attr">"stopwords"</span>: [<span class="string">"the"</span>, <span class="string">"a"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"analyzer"</span>: &#123;</span><br><span class="line">        <span class="attr">"my_analyzer"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"custom"</span>,</span><br><span class="line">          <span class="attr">"char_filter"</span>: [<span class="string">"html_strip"</span>, <span class="string">"&amp;_to_and"</span>],</span><br><span class="line">          <span class="attr">"tokenizer"</span>: <span class="string">"standard"</span>,</span><br><span class="line">          <span class="attr">"filter"</span>: [<span class="string">"lowercase"</span>, <span class="string">"my_stopwords"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里创建了一个<code>my_analyzer</code>分析器，分词用的standard，字符过滤器用了<code>html_strip</code>和<code>&amp;_to_and</code>，词过滤器用了<code>lowercase</code>和<code>my_stopwords</code>。</p><p>测试一下分词器的效果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">GET /my_index/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"tom&amp;jerry are a friend in the house, &lt;a&gt;, HAHA!!"</span>,</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"my_analyzer"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokens"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"tomandjerry"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">9</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"are"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">10</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">13</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"friend"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">16</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">22</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">3</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"in"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">23</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">25</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">4</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"house"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">30</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">35</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">6</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"haha"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">42</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">46</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">7</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如何在索引中使用我们自定义的分词器？</strong></p><p>创建一个mapping，为content设置我们自定义的分词器</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index/_mapping/my_type</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"properties"</span>: &#123;</span><br><span class="line">    <span class="attr">"content"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">      <span class="attr">"analyzer"</span>: <span class="string">"my_analyzer"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h1><p>type，是一个index中用来区分类似的文档。类似的文档可能有不同的fields，而且有不同的属性来控制索引建立、分词器。就像数据库中的 schema ，描述了文档可能具有的字段或 属性 、 每个字段的数据类型—比如 string, integer 或 date —以及Lucene是如何索引和存储这些字段的。</p><p>field的value，在底层的lucene中建立索引的时候，全部是opaque bytes类型，是不区分类型的。</p><p>Lucene 没有文档类型的概念，每个文档的类型名被存储在一个叫 <code>_type</code> 的元数据字段上。 当我们要检索某个类型的文档时, Elasticsearch 通过在 <code>_type</code> 字段上使用过滤器限制只返回这个类型的文档。</p><p>Lucene 也没有映射的概念。 映射是 Elasticsearch 将复杂 JSON 文档 映射 成 Lucene 需要的扁平化数据的方式。</p><p>一个index中的多个type，实际上是放在一起存储的，因此一个index下，不能有多个type重名，而类型或者其他设置不同的，因为那样是无法处理的。</p><p>比如有个映射和文档：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"ecommerce"</span>: &#123;</span><br><span class="line">      <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">         <span class="attr">"elactronic_goods"</span>: &#123;</span><br><span class="line">            <span class="attr">"properties"</span>: &#123;</span><br><span class="line">               <span class="attr">"name"</span>: &#123;</span><br><span class="line">                  <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">               &#125;,</span><br><span class="line">               <span class="attr">"price"</span>: &#123;</span><br><span class="line">                  <span class="attr">"type"</span>: <span class="string">"double"</span></span><br><span class="line">               &#125;,</span><br><span class="line">       <span class="attr">"service_period"</span>: &#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">       &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="attr">"fresh_goods"</span>: &#123;</span><br><span class="line">            <span class="attr">"properties"</span>: &#123;</span><br><span class="line">               <span class="attr">"name"</span>: &#123;</span><br><span class="line">                  <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">               &#125;,</span><br><span class="line">               <span class="attr">"price"</span>: &#123;</span><br><span class="line">                  <span class="attr">"type"</span>: <span class="string">"double"</span></span><br><span class="line">               &#125;,</span><br><span class="line">       <span class="attr">"eat_period"</span>: &#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">       &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"geli kongtiao"</span>,</span><br><span class="line">  <span class="attr">"price"</span>: <span class="number">1999.0</span>,</span><br><span class="line">  <span class="attr">"service_period"</span>: <span class="string">"one year"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"aozhou dalongxia"</span>,</span><br><span class="line">  <span class="attr">"price"</span>: <span class="number">199.0</span>,</span><br><span class="line">  <span class="attr">"eat_period"</span>: <span class="string">"one week"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际在Lucene里的数据可能是：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"ecommerce"</span>: &#123;</span><br><span class="line">      <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">        <span class="attr">"_type"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">          <span class="attr">"index"</span>: <span class="string">"not_analyzed"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"name"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="string">"price"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"double"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="string">"service_period"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="string">"eat_period"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"elactronic_goods"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"geli kongtiao"</span>,</span><br><span class="line">  <span class="attr">"price"</span>: <span class="number">1999.0</span>,</span><br><span class="line">  <span class="attr">"service_period"</span>: <span class="string">"one year"</span>,</span><br><span class="line">  <span class="attr">"eat_period"</span>: <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"fresh_goods"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"aozhou dalongxia"</span>,</span><br><span class="line">  <span class="attr">"price"</span>: <span class="number">199.0</span>,</span><br><span class="line">  <span class="attr">"service_period"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"eat_period"</span>: <span class="string">"one week"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以最佳实践是，将类似结构的type放在一个index下，这些type应该有多个field是相同的。<br><strong>假如你将两个type的field完全不同，放在一个index下，那么就每条数据都至少有一半的field在底层的lucene中是空值，会有严重的性能问题</strong>。</p><h1 id="根对象"><a href="#根对象" class="headerlink" title="根对象"></a>根对象</h1><p>映射的最高一层被称为 根对象 ，它可能包含下面几项：</p><ul><li>一个 properties 节点，列出了文档中可能包含的每个字段的映射</li><li>各种元数据字段，它们都以一个下划线开头，例如 <code>_type</code> 、 <code>_id</code> 和 <code>_source</code></li><li>设置项，控制如何动态处理新的字段，例如 <code>analyzer</code> 、 <code>dynamic_date_formats</code> 和 <code>dynamic_templates</code></li><li>其他设置，可以同时应用在根对象和其他 <code>object</code> 类型的字段上，例如 <code>enabled</code> 、 <code>dynamic</code> 和 <code>include_in_all</code></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"my_type"</span>: &#123;</span><br><span class="line">      <span class="attr">"properties"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h2><p>文档的字段描述，包含type，index，analyzer</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index/_mapping/my_type</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"properties"</span>: &#123;</span><br><span class="line">    <span class="attr">"title"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"text"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="source"><a href="#source" class="headerlink" title="_source"></a>_source</h2><p>Elasticsearch 在 <code>_source</code> 字段存储代表文档体的JSON字符串。和所有被存储的字段一样， <code>_source</code> 字段在被写入磁盘之前先会被压缩。</p><p>好处：</p><ol><li>查询的时候，直接可以拿到完整的document，不需要先拿document id，再发送一次请求拿document</li><li>partial update基于_source实现</li><li>reindex时，直接基于_source实现，不需要从数据库（或者其他外部存储）查询数据再修改</li><li>可以基于_source定制返回field</li><li>debug query更容易，因为可以直接看到_source</li></ol><p>不需要的话，也可以禁用_source，不保存原始对象</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index/_mapping/my_type2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_source"</span>: &#123;<span class="attr">"enabled"</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="all"><a href="#all" class="headerlink" title="_all"></a>_all</h2><p>前面说过，将所有field打包在一起，作为一个_all field，建立索引。没指定任何field进行搜索时，就是使用_all field在搜索。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index/_mapping/my_type3</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_all"</span>: &#123;<span class="attr">"enabled"</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以在field级别设置<code>include_in_all</code> field，设置是否要将field的值包含在<code>_all</code> field中&gt;</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index/_mapping/my_type4</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"properties"</span>: &#123;</span><br><span class="line">    <span class="attr">"my_field"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">      <span class="attr">"include_in_all"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="标识性metadata"><a href="#标识性metadata" class="headerlink" title="标识性metadata"></a>标识性metadata</h2><ul><li>_id<br>  文档的 ID 字符串</li><li>_type<br>  文档的类型名</li><li>_index<br>  文档所在的索引</li><li>_uid<br>  <code>_type</code> 和 <code>_id</code> 连接在一起构造成 type#id</li></ul><h1 id="定制dynamic策略"><a href="#定制dynamic策略" class="headerlink" title="定制dynamic策略"></a>定制dynamic策略</h1><p>ES在数据遇到新的字段时候，会为我们自动mapping，但是我们也可以定制化这个策略：</p><ul><li>true：遇到陌生字段，就进行dynamic mapping</li><li>false：遇到陌生字段，就忽略</li><li>strict：遇到陌生字段，就报错</li></ul><p>修改策略为<code>strict</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"my_type"</span>: &#123;</span><br><span class="line">      <span class="attr">"dynamic"</span>: <span class="string">"strict"</span>,</span><br><span class="line">      <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"title"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"text"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"address"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">          <span class="attr">"dynamic"</span>: <span class="string">"true"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试添加数据，这里多了一个mapping里没有的content字段，因为是<code>strict</code>策略，所以ES报错了：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index/my_type/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"my article"</span>,</span><br><span class="line">  <span class="attr">"content"</span>: <span class="string">"this is my article"</span>,</span><br><span class="line">  <span class="attr">"address"</span>: &#123;</span><br><span class="line">    <span class="attr">"province"</span>: <span class="string">"guangdong"</span>,</span><br><span class="line">    <span class="attr">"city"</span>: <span class="string">"guangzhou"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"error"</span>: &#123;</span><br><span class="line">    <span class="attr">"root_cause"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"strict_dynamic_mapping_exception"</span>,</span><br><span class="line">        <span class="attr">"reason"</span>: <span class="string">"mapping set to strict, dynamic introduction of [content] within [my_type] is not allowed"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"strict_dynamic_mapping_exception"</span>,</span><br><span class="line">    <span class="attr">"reason"</span>: <span class="string">"mapping set to strict, dynamic introduction of [content] within [my_type] is not allowed"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="number">400</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="date-detection"><a href="#date-detection" class="headerlink" title="date_detection"></a>date_detection</h2><p>默认会按照一定格式识别date，比如yyyy-MM-dd。但是如果某个field先过来一个2017-01-01的值，就会被自动dynamic mapping成date，后面如果再来一个”hello world”之类的值，就会报错。可以手动关闭某个type的date_detection，如果有需要，自己手动指定某个field为date类型。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index/_mapping/my_type</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"date_detection"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义dynamic-mapping-template（type-level）"><a href="#自定义dynamic-mapping-template（type-level）" class="headerlink" title="自定义dynamic mapping template（type level）"></a>自定义dynamic mapping template（type level）</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"my_type"</span>: &#123;</span><br><span class="line">      <span class="attr">"dynamic_templates"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"en"</span>: &#123;</span><br><span class="line">            <span class="attr">"match"</span>: <span class="string">"*_en"</span>,</span><br><span class="line">            <span class="attr">"match_mapping_type"</span>: <span class="string">"string"</span>,</span><br><span class="line">            <span class="attr">"mapping"</span>: &#123;</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">              <span class="attr">"analyzer"</span>: <span class="string">"english"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"long_to_date"</span>: &#123;</span><br><span class="line">            <span class="attr">"match"</span>: <span class="string">"*time"</span>,</span><br><span class="line">            <span class="attr">"match_mapping_type"</span>: <span class="string">"long"</span>,</span><br><span class="line">            <span class="attr">"mapping"</span>: &#123;</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"date"</span>,</span><br><span class="line">              <span class="attr">"index"</span>: <span class="string">"not_analyzed"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index/my_type/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"this is my first article"</span>,</span><br><span class="line">  <span class="attr">"title_en"</span>: <span class="string">"this is my first article"</span>,</span><br><span class="line">  <span class="attr">"create_time"</span>: <span class="number">1538031023000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看看ES为我们创建的mapping，<code>create_time</code>成功被映射成了date类型，<code>title_en</code>设置了english为分词器。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">GET /my_index/my_type/_mapping</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"my_index"</span>: &#123;</span><br><span class="line">    <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">      <span class="attr">"my_type"</span>: &#123;</span><br><span class="line">        <span class="attr">"dynamic_templates"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"en"</span>: &#123;</span><br><span class="line">              <span class="attr">"match"</span>: <span class="string">"*_en"</span>,</span><br><span class="line">              <span class="attr">"match_mapping_type"</span>: <span class="string">"string"</span>,</span><br><span class="line">              <span class="attr">"mapping"</span>: &#123;</span><br><span class="line">                <span class="attr">"analyzer"</span>: <span class="string">"english"</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"long_to_date"</span>: &#123;</span><br><span class="line">              <span class="attr">"match"</span>: <span class="string">"*time"</span>,</span><br><span class="line">              <span class="attr">"match_mapping_type"</span>: <span class="string">"long"</span>,</span><br><span class="line">              <span class="attr">"mapping"</span>: &#123;</span><br><span class="line">                <span class="attr">"index"</span>: <span class="string">"not_analyzed"</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"date"</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"properties"</span>: &#123;</span><br><span class="line">          <span class="attr">"create_time"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"date"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"title"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">            <span class="attr">"fields"</span>: &#123;</span><br><span class="line">              <span class="attr">"keyword"</span>: &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">                <span class="attr">"ignore_above"</span>: <span class="number">256</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"title_en"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">            <span class="attr">"analyzer"</span>: <span class="string">"english"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义dynamic-mapping-template（index-level）"><a href="#自定义dynamic-mapping-template（index-level）" class="headerlink" title="自定义dynamic mapping template（index level）"></a>自定义dynamic mapping template（index level）</h2><p><code>_default_</code>就是设置这个index下所有的模板，type自己的配置可以覆盖<code>_default_</code>的配置。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">        <span class="attr">"_default_"</span>: &#123;</span><br><span class="line">            <span class="attr">"_all"</span>: &#123; <span class="attr">"enabled"</span>:  <span class="literal">false</span> &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"blog"</span>: &#123;</span><br><span class="line">            <span class="attr">"_all"</span>: &#123; <span class="attr">"enabled"</span>:  <span class="literal">true</span>  &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="重建索引"><a href="#重建索引" class="headerlink" title="重建索引"></a>重建索引</h1><p>一个field的设置是不能被修改的，如果要修改一个Field，那么应该重新按照新的mapping，建立一个index，然后将数据批量查询出来，重新用bulk api写入index中。</p><p>批量查询的时候，建议采用scroll api，并且采用多线程并发的方式来reindex数据，每次scoll就查询指定日期的一段数据，交给一个线程即可。</p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>一开始，依靠dynamic mapping，插入数据，但是不小心有些数据是2017-01-01这种日期格式的，所以title这种field被自动映射为了date类型，实际上它应该是string类型的。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index/my_type/3</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"2017-01-03"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"my_index"</span>: &#123;</span><br><span class="line">    <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">      <span class="attr">"my_type"</span>: &#123;</span><br><span class="line">        <span class="attr">"properties"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"date"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当后期向索引中加入string类型的title值的时候，就会报错</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index/my_type/4</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"my first article"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"error"</span>: &#123;</span><br><span class="line">    <span class="attr">"root_cause"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"mapper_parsing_exception"</span>,</span><br><span class="line">        <span class="attr">"reason"</span>: <span class="string">"failed to parse [title]"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"mapper_parsing_exception"</span>,</span><br><span class="line">    <span class="attr">"reason"</span>: <span class="string">"failed to parse [title]"</span>,</span><br><span class="line">    <span class="attr">"caused_by"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"illegal_argument_exception"</span>,</span><br><span class="line">      <span class="attr">"reason"</span>: <span class="string">"Invalid format: \"my first article\""</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="number">400</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果此时想修改title的类型，是不可能的</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index/_mapping/my_type</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"properties"</span>: &#123;</span><br><span class="line">    <span class="attr">"title"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"text"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"error"</span>: &#123;</span><br><span class="line">    <span class="attr">"root_cause"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"illegal_argument_exception"</span>,</span><br><span class="line">        <span class="attr">"reason"</span>: <span class="string">"mapper [title] of different type, current_type [date], merged_type [text]"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"illegal_argument_exception"</span>,</span><br><span class="line">    <span class="attr">"reason"</span>: <span class="string">"mapper [title] of different type, current_type [date], merged_type [text]"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="number">400</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，唯一的办法就是进行reindex。重新建立一个索引，将旧索引的数据查询出来，再导入新索引。</p><p>比如旧索引的名字，是<code>old_index</code>，新索引的名字是<code>new_index</code>，终端是java应用，已经在使用<code>old_index</code>在操作了，难道还要去停止java应用，修改使用的index为new_index，才重新启动java应用吗？这个过程中，就会导致java应用停机，可用性降低，这样肯定不好。</p><p>那么在我们的例子中先给旧索引一个别名，客户端先用<code>goods_index</code>这个别名来操作，此时实际指向的是旧的<code>my_index</code>。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index/_alias/goods_index</span><br></pre></td></tr></table></figure><p>然后新建一个index，调整其title的类型为string</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index_new</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"my_type"</span>: &#123;</span><br><span class="line">      <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"title"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"text"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用scroll api将数据批量查询出来</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">GET /my_index/_search?scroll=1m</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"sort"</span>: [<span class="string">"_doc"</span>],</span><br><span class="line">    <span class="attr">"size"</span>:  <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_scroll_id"</span>: <span class="string">"DnF1ZXJ5VGhlbkZldGNoBQAAAAAAAwhlFkxyT3g1eWVVUVFhWWJGNEwxM3o1WncAAAAAAAMIZhZMck94NXllVVFRYVliRjRMMTN6NVp3AAAAAAADCGQWTHJPeDV5ZVVRUWFZYkY0TDEzejVadwAAAAAAAwhnFkxyT3g1eWVVUVFhWWJGNEwxM3o1WncAAAAAAAMIaBZMck94NXllVVFRYVliRjRMMTN6NVp3"</span>,</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">38</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"my_index"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"my_type"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"2"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"2017-01-02"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"sort"</span>: [</span><br><span class="line">          <span class="number">0</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>采用bulk api将scoll查出来的一批数据，批量写入新索引。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST /_bulk</span><br><span class="line">&#123; <span class="attr">"index"</span>:&#123; <span class="attr">"_index"</span>: <span class="string">"my_index_new"</span>, <span class="attr">"_type"</span>: <span class="string">"my_type"</span>, <span class="attr">"_id"</span>: <span class="string">"2"</span> &#125;&#125;</span><br><span class="line">&#123; <span class="attr">"title"</span>:<span class="string">"2017-01-02"</span> &#125;</span><br></pre></td></tr></table></figure><p>反复循环，查询一批又一批的数据出来，采取bulk api将每一批数据批量写入新索引。</p><p>将goods_index alias切换到my_index_new上去，java应用会直接通过index别名使用新的索引中的数据，java应用程序不需要停机，零停机，高可用。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST /_aliases</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"actions"</span>: [</span><br><span class="line">        &#123; <span class="attr">"remove"</span>: &#123; <span class="attr">"index"</span>: <span class="string">"my_index"</span>, <span class="attr">"alias"</span>: <span class="string">"goods_index"</span> &#125;&#125;,</span><br><span class="line">        &#123; <span class="attr">"add"</span>:    &#123; <span class="attr">"index"</span>: <span class="string">"my_index_new"</span>, <span class="attr">"alias"</span>: <span class="string">"goods_index"</span> &#125;&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接通过goods_index别名来查询，是否成功，这里只有一条，因为我只操作了一条。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">GET /goods_index/my_type/_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">24</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"my_index_new"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"my_type"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"2"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"2017-01-02"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此为龙果学院课程学习笔记，记录以后翻看&lt;/p&gt;
&lt;h1 id=&quot;索引管理&quot;&gt;&lt;a href=&quot;#索引管理&quot; class=&quot;headerlink&quot; title=&quot;索引管理&quot;&gt;&lt;/a&gt;索引管理&lt;/h1&gt;&lt;h2 id=&quot;手动创建索引&quot;&gt;&lt;a href=&quot;#手动创建索引&quot; class=&quot;headerlink&quot; title=&quot;手动创建索引&quot;&gt;&lt;/a&gt;手动创建索引&lt;/h2&gt;&lt;p&gt;之前都是直接插入document，ES为我们自动创建索引。其实在大部分情况下，我们是需要自己先手动创建mapping的，就像数据库建表一样，你可能需要设置primary shard的数量，字段的分词器，具体的数据类型等等。&lt;/p&gt;
    
    </summary>
    
      <category term="ElasticSearch" scheme="http://www.saily.top/categories/ElasticSearch/"/>
    
    
      <category term="ElasticSearch" scheme="http://www.saily.top/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch06-_Search API</title>
    <link href="http://www.saily.top/2018/09/21/elasticsearch/elasticSearch06/"/>
    <id>http://www.saily.top/2018/09/21/elasticsearch/elasticSearch06/</id>
    <published>2018-09-21T02:15:48.000Z</published>
    <updated>2018-09-22T03:48:04.287Z</updated>
    
    <content type="html"><![CDATA[<p>此为龙果学院课程学习笔记，记录以后翻看</p><p>前面讲了简单的搜索、分词和映射，这篇文章讲ES的搜索API</p><h1 id="search-API"><a href="#search-API" class="headerlink" title="search API"></a>search API</h1><p>Search API的基本语法：</p><p>这是一个空查询，空查询将返回所有索引库（indices)中的所有文档：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>只用一个查询字符串，你就可以在一个、多个或者 _all 索引库（indices）和一个、多个或者所有types中查询：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /index_2014*/type1,type2/_search</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><p>同时你可以使用 from 和 size 参数来分页：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"from"</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>##一个带请求体的 GET 请求？</p></blockquote><blockquote><p>某些特定语言（特别是 JavaScript）的 HTTP 库是不允许 GET 请求带有请求体的。 事实上，一些使用者对于 GET 请求可以带请求体感到非常的吃惊。</p></blockquote><blockquote><p>而事实是这个RFC文档 RFC 7231— 一个专门负责处理 HTTP 语义和内容的文档 — 并没有规定一个带有请求体的 GET 请求应该如何处理！结果是，一些 HTTP 服务器允许这样子，而有一些 — 特别是一些用于缓存和代理的服务器 — 则不允许。</p></blockquote><blockquote><p>对于一个查询请求，Elasticsearch 的工程师偏向于使用 GET 方式，因为他们觉得它比 POST 能更好的描述信息检索（retrieving information）的行为。然而，因为带请求体的 GET 请求并不被广泛支持，所以 search API 同时支持 POST 请求：</p></blockquote><blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"from"</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>类似的规则可以应用于任何需要带请求体的 GET API。</p></blockquote><h1 id="query-dsl"><a href="#query-dsl" class="headerlink" title="query dsl"></a>query dsl</h1><p>查询表达式(Query DSL)是一种非常灵活又富有表现力的 查询语言。 Elasticsearch 使用它可以以简单的 JSON 接口来展现 Lucene 功能的绝大部分。在你的应用中，你应该用它来编写你的查询语句。它可以使你的查询语句更灵活、更精确、易读和易调试。</p><p>要使用这种查询表达式，只需将查询语句传递给 <code>query</code> 参数：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Query-DSL-基本语法"><a href="#Query-DSL-基本语法" class="headerlink" title="Query DSL 基本语法"></a>Query DSL 基本语法</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    QUERY_NAME: &#123;</span><br><span class="line">        ARGUMENT: VALUE,</span><br><span class="line">        ARGUMENT: VALUE,...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    QUERY_NAME: &#123;</span><br><span class="line">        FIELD_NAME: &#123;</span><br><span class="line">            ARGUMENT: VALUE,</span><br><span class="line">            ARGUMENT: VALUE,...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /test_index/test_type/_search </span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"test_field"</span>: <span class="string">"test"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组合多个搜索条件"><a href="#组合多个搜索条件" class="headerlink" title="组合多个搜索条件"></a>组合多个搜索条件</h2><p>利用bool查询进行组合搜索，数据准备：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">PUT /website/article/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"my elasticsearch article"</span>,</span><br><span class="line">  <span class="attr">"content"</span>: <span class="string">"es is very good"</span>,</span><br><span class="line">  <span class="attr">"author_id"</span>: <span class="number">110</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /website/article/2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"my hadoop article"</span>,</span><br><span class="line">  <span class="attr">"content"</span>: <span class="string">"hadoop is very good"</span>,</span><br><span class="line">  <span class="attr">"author_id"</span>: <span class="number">111</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /website/article/3</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"my elasticsearch article"</span>,</span><br><span class="line">  <span class="attr">"content"</span>: <span class="string">"es is very bad"</span>,</span><br><span class="line">  <span class="attr">"author_id"</span>: <span class="number">111</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>搜索需求：title必须包含elasticsearch，content可以包含elasticsearch也可以不包含，author_id必须不为111</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">GET /website/article/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"bool"</span>: &#123;</span><br><span class="line">      <span class="attr">"must"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"match"</span>: &#123;</span><br><span class="line">            <span class="attr">"title"</span>: <span class="string">"elasticsearch"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"should"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"match"</span>: &#123;</span><br><span class="line">            <span class="attr">"content"</span>: <span class="string">"elasticsearch"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"must_not"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"match"</span>: &#123;</span><br><span class="line">            <span class="attr">"author_id"</span>: <span class="string">"111"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">23</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">0.25316024</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"website"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"article"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">0.25316024</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"my elasticsearch article"</span>,</span><br><span class="line">          <span class="attr">"content"</span>: <span class="string">"es is very good"</span>,</span><br><span class="line">          <span class="attr">"author_id"</span>: <span class="number">110</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="查询和过滤（query-amp-filter"><a href="#查询和过滤（query-amp-filter" class="headerlink" title="查询和过滤（query &amp; filter)"></a>查询和过滤（query &amp; filter)</h1><p>在ES中查找数据，除了查询还有过滤</p><h2 id="query与filter示例"><a href="#query与filter示例" class="headerlink" title="query与filter示例"></a>query与filter示例</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">PUT /company/employee/2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"address"</span>: &#123;</span><br><span class="line">    <span class="attr">"country"</span>: <span class="string">"china"</span>,</span><br><span class="line">    <span class="attr">"province"</span>: <span class="string">"jiangsu"</span>,</span><br><span class="line">    <span class="attr">"city"</span>: <span class="string">"nanjing"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"tom"</span>,</span><br><span class="line">  <span class="attr">"age"</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="attr">"join_date"</span>: <span class="string">"2016-01-01"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /company/employee/3</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"address"</span>: &#123;</span><br><span class="line">    <span class="attr">"country"</span>: <span class="string">"china"</span>,</span><br><span class="line">    <span class="attr">"province"</span>: <span class="string">"shanxi"</span>,</span><br><span class="line">    <span class="attr">"city"</span>: <span class="string">"xian"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"marry"</span>,</span><br><span class="line">  <span class="attr">"age"</span>: <span class="number">35</span>,</span><br><span class="line">  <span class="attr">"join_date"</span>: <span class="string">"2015-01-01"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>搜索请求：年龄必须大于等于30，同时join_date必须是2016-01-01</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">GET /company/employee/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"bool"</span>: &#123;</span><br><span class="line">      <span class="attr">"must"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"match"</span>: &#123;</span><br><span class="line">            <span class="attr">"join_date"</span>: <span class="string">"2016-01-01"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"filter"</span>: &#123;</span><br><span class="line">        <span class="attr">"range"</span>: &#123;</span><br><span class="line">          <span class="attr">"age"</span>: &#123;</span><br><span class="line">            <span class="attr">"gte"</span>: <span class="number">30</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="filter与query对比"><a href="#filter与query对比" class="headerlink" title="filter与query对比"></a>filter与query对比</h2><ul><li>filter：仅仅只是按照搜索条件过滤出需要的数据而已，不计算任何相关度分数，对相关度没有任何影响。</li><li>query：会去计算每个document相对于搜索条件的相关度，并按照相关度进行排序。</li></ul><p>一般来说，如果你是在进行搜索，需要将最匹配搜索条件的数据先返回，那么用query；如果你只是要根据一些条件筛选出一部分数据，不关注其排序，那么用filter。</p><h2 id="filter与query性能比较"><a href="#filter与query性能比较" class="headerlink" title="filter与query性能比较"></a>filter与query性能比较</h2><ul><li>filter：不需要计算相关度分数，不需要按照相关度分数进行排序，同时还有内置的自动cache最常使用filter的数据</li><li>query：相反，要计算相关度分数，按照分数进行排序，而且无法cache结果</li></ul><h1 id="query搜索实战"><a href="#query搜索实战" class="headerlink" title="query搜索实战"></a>query搜索实战</h1><h2 id="match-all查询"><a href="#match-all查询" class="headerlink" title="match all查询"></a>match all查询</h2><p>match_all 查询简单的 匹配所有文档。在没有指定查询方式时，它是默认的查询：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="match查询"><a href="#match查询" class="headerlink" title="match查询"></a>match查询</h2><p>无论你在任何字段上进行的是全文搜索还是精确查询，match 查询是你可用的标准查询。</p><p>如果你在一个全文字段上使用 match 查询，在执行查询前，它将用正确的分析器去分析查询字符串，如果在一个精确值的字段上使用它， 例如数字、日期、布尔或者一个 not_analyzed 字符串字段，那么它将会精确匹配给定的值。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>: &#123; <span class="attr">"match"</span>: &#123; <span class="attr">"title"</span>: <span class="string">"my elasticsearch article"</span> &#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对于精确值的查询，你可能需要使用 filter 语句来取代 query，因为 filter 将会被缓存。</p></blockquote><h2 id="multi-match查询"><a href="#multi-match查询" class="headerlink" title="multi match查询"></a>multi match查询</h2><p>multi_match 查询可以在多个字段上执行相同的 match 查询：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"multi_match"</span>: &#123;</span><br><span class="line">        <span class="attr">"query"</span>:    <span class="string">"full text search"</span>,</span><br><span class="line">        <span class="attr">"fields"</span>:   [ <span class="string">"title"</span>, <span class="string">"body"</span> ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="range-查询"><a href="#range-查询" class="headerlink" title="range 查询"></a>range 查询</h2><p><code>range</code> 查询找出那些落在指定区间内的数字或者时间：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"range"</span>: &#123;</span><br><span class="line">        <span class="attr">"age"</span>: &#123;</span><br><span class="line">            <span class="attr">"gte"</span>:  <span class="number">20</span>,</span><br><span class="line">            <span class="attr">"lt"</span>:   <span class="number">30</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被允许的操作符如下：</p><p>gt 大于<br>gte 大于等于<br>lt 小于<br>lte 小于等于        </p><h2 id="term-查询"><a href="#term-查询" class="headerlink" title="term 查询"></a>term 查询</h2><p><code>term</code> 查询被用于精确值 匹配，这些精确值可能是数字、时间、布尔或者那些 not_analyzed 的字符串：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"term"</span>: &#123; <span class="attr">"age"</span>:    <span class="number">26</span>           &#125;&#125;</span><br><span class="line">&#123; <span class="attr">"term"</span>: &#123; <span class="attr">"date"</span>:   <span class="string">"2014-09-01"</span> &#125;&#125;</span><br><span class="line">&#123; <span class="attr">"term"</span>: &#123; <span class="attr">"public"</span>: <span class="literal">true</span>         &#125;&#125;</span><br><span class="line">&#123; <span class="attr">"term"</span>: &#123; <span class="attr">"tag"</span>:    <span class="string">"full_text"</span>  &#125;&#125;</span><br></pre></td></tr></table></figure><p><code>term</code> 查询对于输入的文本不 分析 ，所以它将给定的值进行精确查询。</p><h2 id="terms查询"><a href="#terms查询" class="headerlink" title="terms查询"></a>terms查询</h2><p><code>terms</code> 查询和 <code>term</code> 查询一样，但它允许你指定多值进行匹配。如果这个字段包含了指定值中的任何一个值，那么这个文档满足条件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>: &#123; <span class="attr">"terms"</span>: &#123; <span class="attr">"tag"</span>: [ <span class="string">"search"</span>, <span class="string">"full_text"</span>, <span class="string">"nosql"</span> ] &#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和 term 查询一样，terms 查询对于输入的文本不分析。它查询那些精确匹配的值（包括在大小写、重音、空格等方面的差异）。</p><h2 id="exists-查询"><a href="#exists-查询" class="headerlink" title="exists 查询"></a>exists 查询</h2><p>这是2.x中的查询，现在已经不提供了，但是可以用filter来完成同样的效果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /company/employee/_search</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">      <span class="attr">"bool"</span>: &#123;</span><br><span class="line">        <span class="attr">"filter"</span>: &#123;</span><br><span class="line">          <span class="attr">"exists"</span>: &#123;</span><br><span class="line">            <span class="attr">"field"</span>: <span class="string">"age"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h1><p>现实的查询需求从来都没有那么简单；它们需要在多个字段上查询多种多样的文本，并且根据一系列的标准来过滤。为了构建类似的高级查询，你需要一种能够将多查询组合成单一查询的查询方法。</p><p>你可以用 <code>bool</code> 查询来实现你的需求。这种查询将多查询组合在一起，成为用户自己想要的布尔查询。它接收以下参数：</p><ul><li>must<br>  文档 <em>必须</em> 匹配这些条件才能被包含进来。</li><li>must_not<br>  文档 <em>必须不</em> 匹配这些条件才能被包含进来。</li><li>should<br>  如果满足这些语句中的任意语句，将增加 <code>_score</code> ，否则，无任何影响。它们主要用于修正每个文档的相关性得分。</li><li>filter<br>  <em>必须</em> 匹配，但它以不评分、过滤模式来进行。这些语句对评分没有贡献，只是根据过滤标准来排除或包含文档。</li></ul><p>由于这是我们看到的第一个包含多个查询的查询，所以有必要讨论一下相关性得分是如何组合的。每一个子查询都独自地计算文档的相关性得分。一旦他们的得分被计算出来， bool 查询就将这些得分进行合并并且返回一个代表整个布尔操作的得分。</p><p>下面的查询用于查找 title 字段匹配 how to make millions 并且不被标识为 spam 的文档。那些被标识为 starred 或在2014之后的文档，将比另外那些文档拥有更高的排名。如果 _两者_ 都满足，那么它排名将更高：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"bool"</span>: &#123;</span><br><span class="line">        <span class="attr">"must"</span>:     &#123; <span class="attr">"match"</span>: &#123; <span class="attr">"title"</span>: <span class="string">"how to make millions"</span> &#125;&#125;,</span><br><span class="line">        <span class="attr">"must_not"</span>: &#123; <span class="attr">"match"</span>: &#123; <span class="attr">"tag"</span>:   <span class="string">"spam"</span> &#125;&#125;,</span><br><span class="line">        <span class="attr">"should"</span>: [</span><br><span class="line">            &#123; <span class="attr">"match"</span>: &#123; <span class="attr">"tag"</span>: <span class="string">"starred"</span> &#125;&#125;,</span><br><span class="line">            &#123; <span class="attr">"range"</span>: &#123; <span class="attr">"date"</span>: &#123; <span class="attr">"gte"</span>: <span class="string">"2014-01-01"</span> &#125;&#125;&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="增加带过滤器（filter）的查询"><a href="#增加带过滤器（filter）的查询" class="headerlink" title="增加带过滤器（filter）的查询"></a>增加带过滤器（filter）的查询</h2><p>如果我们不想因为文档的时间而影响得分，可以用 filter 语句来重写前面的例子：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"bool"</span>: &#123;</span><br><span class="line">        <span class="attr">"must"</span>:     &#123; <span class="attr">"match"</span>: &#123; <span class="attr">"title"</span>: <span class="string">"how to make millions"</span> &#125;&#125;,</span><br><span class="line">        <span class="attr">"must_not"</span>: &#123; <span class="attr">"match"</span>: &#123; <span class="attr">"tag"</span>:   <span class="string">"spam"</span> &#125;&#125;,</span><br><span class="line">        <span class="attr">"should"</span>: [</span><br><span class="line">            &#123; <span class="attr">"match"</span>: &#123; <span class="attr">"tag"</span>: <span class="string">"starred"</span> &#125;&#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"filter"</span>: &#123;</span><br><span class="line">          <span class="attr">"range"</span>: &#123; <span class="attr">"date"</span>: &#123; <span class="attr">"gte"</span>: <span class="string">"2014-01-01"</span> &#125;&#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="constant-score查询"><a href="#constant-score查询" class="headerlink" title="constant_score查询"></a>constant_score查询</h2><p>尽管没有 bool 查询使用这么频繁，constant_score 查询也是你工具箱里有用的查询工具。它将一个不变的常量评分应用于所有匹配的文档。它被经常用于你只需要执行一个 filter 而没有其它查询（例如，评分查询）的情况下。</p><p>可以使用它来取代只有 filter 语句的 bool 查询。在性能上是完全相同的，但对于提高查询简洁性和清晰度有很大帮助。</p><p>{<br>    “constant_score”:   {<br>        “filter”: {<br>            “term”: { “category”: “ebooks” }<br>        }<br>    }<br>}</p><blockquote><p>term 查询被放置在 constant_score 中，转成不评分的 filter。这种方式可以用来取代只有 filter 语句的 bool 查询。</p></blockquote><h1 id="验证查询"><a href="#验证查询" class="headerlink" title="验证查询"></a>验证查询</h1><p>查询可以变得非常的复杂，尤其 和不同的分析器与不同的字段映射结合时，理解起来就有点困难了。不过 <code>validate-query</code> API 可以用来验证查询是否合法。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /test_index/test_type/_validate/query?explain</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"math"</span>: &#123;</span><br><span class="line">      <span class="attr">"test_field"</span>: <span class="string">"test"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"valid"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"error"</span>: <span class="string">"org.elasticsearch.common.ParsingException: no [query] registered for [math]"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说没有<code>math</code>这个查询，一看是单词写错了，应该是<code>match</code>。</p><p>这个一般用在那种特别复杂庞大的搜索下，比如写了上百行的搜索，这个时候可以先用validate api去验证一下，搜索是否合法。</p><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><p>为了按照相关性来排序，需要将相关性表示为一个数值。在 Elasticsearch 中， <em>相关性得分</em> 由一个浮点数进行表示，并在搜索结果中通过 <code>_score</code> 参数返回， 默认排序是 <code>_score</code> 降序。</p><p>有时，相关性评分对你来说并没有意义。例如，下面的查询返回所有 user_id 字段包含 1 的结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span> : &#123;</span><br><span class="line">        <span class="attr">"bool"</span> : &#123;</span><br><span class="line">            <span class="attr">"filter"</span> : &#123;</span><br><span class="line">                <span class="attr">"term"</span> : &#123;</span><br><span class="line">                    <span class="attr">"user_id"</span> : <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定制排序规则"><a href="#定制排序规则" class="headerlink" title="定制排序规则"></a>定制排序规则</h2><p>有时候我们查询的数据需要根据时间，数量之类的排序。我们可以使用 sort 参数进行实现：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">GET /company/employee/_search </span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"constant_score"</span>: &#123;</span><br><span class="line">      <span class="attr">"filter"</span>: &#123;</span><br><span class="line">        <span class="attr">"range"</span>: &#123;</span><br><span class="line">          <span class="attr">"age"</span>: &#123;</span><br><span class="line">            <span class="attr">"gte"</span>: <span class="number">30</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"sort"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"join_date"</span>: &#123;</span><br><span class="line">        <span class="attr">"order"</span>: <span class="string">"asc"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="String排序"><a href="#String排序" class="headerlink" title="String排序"></a>String排序</h2><p>如果对一个string field进行排序，结果往往不准确，因为分词后是多个单词，再排序就不是我们想要的结果了。</p><p>通常解决方案是，将一个string field建立两次索引，一个分词，用来进行搜索；一个不分词，用来进行排序。</p><p>实验一下，重新建索引，为<code>title</code>设置一个分词的，和一个不分词的。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">DELETE /website</span><br><span class="line">PUT /website </span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"article"</span>: &#123;</span><br><span class="line">      <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"title"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"fields"</span>: &#123;</span><br><span class="line">            <span class="attr">"raw"</span>: &#123;</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"fielddata"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"content"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"text"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"post_date"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"date"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"author_id"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"long"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在 ES2.x 版本字符串数据是没有 keyword 和 text 类型的，只有string类型，ES更新到5版本后，取消了 string 数据类型，代替它的是 keyword 和 text 数据类型，那么 keyword 和 text 有什么区别了？<br>Text 数据类型被用来索引长文本，比如说电子邮件的主体部分或者一款产品的介绍。这些文本会被分析，在建立索引前会将这些文本进行分词，转化为词的组合，建立索引。允许 ES来检索这些词语。text 数据类型不能用来排序和聚合。<br>Keyword 数据类型用来建立电子邮箱地址、姓名、邮政编码和标签等数据，不需要进行分词。可以被用来检索过滤、排序和聚合。keyword 类型字段只能用本身来进行检索。</p></blockquote><p>准备数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PUT /website/article/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"first article"</span>,</span><br><span class="line">  <span class="attr">"content"</span>: <span class="string">"this is my first article"</span>,</span><br><span class="line">  <span class="attr">"post_date"</span>: <span class="string">"2017-01-01"</span>,</span><br><span class="line">  <span class="attr">"author_id"</span>: <span class="number">110</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /website/article/2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"second article"</span>,</span><br><span class="line">  <span class="attr">"content"</span>: <span class="string">"this is my second article"</span>,</span><br><span class="line">  <span class="attr">"post_date"</span>: <span class="string">"2017-01-02"</span>,</span><br><span class="line">  <span class="attr">"author_id"</span>: <span class="number">110</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>搜索：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">GET /website/article/_search</span><br><span class="line">&#123; </span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"sort"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"title"</span>: &#123;</span><br><span class="line">        <span class="attr">"order"</span>: <span class="string">"desc"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET /website/article/_search</span><br><span class="line">&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"sort"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"title.raw"</span>: &#123;</span><br><span class="line">        <span class="attr">"order"</span>: <span class="string">"desc"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="相关性评分"><a href="#相关性评分" class="headerlink" title="相关性评分"></a>相关性评分</h1><p>每个文档都有相关性评分，用一个正浮点数字段 <code>_score</code> 来表示 。 <code>_score</code> 的评分越高，相关性越高。</p><p>查询语句会为每个文档生成一个 _score 字段。简单来说，就是计算出一个索引中的文本，与搜索文本他们之间的关联匹配程度。</p><p>在 Elasticsearch 中, 标准的算法是 Term Frequency/Inverse Document Frequency, 简写为 TF/IDF, (5.0 以上版本, 改为了据说更先进的 BM25 算法)</p><ul><li>Term frequency：搜索文本中的各个词条在field文本中出现了多少次，出现次数越多，就越相关</li><li>Inverse document frequency：搜索文本中的各个词条在整个索引的所有文档中出现了多少次，出现的次数越多，就越不相关</li><li>Field-length norm：field长度越长，相关度越弱</li></ul><h2 id="理解评分标准"><a href="#理解评分标准" class="headerlink" title="理解评分标准"></a>理解评分标准</h2><p>当调试一条复杂的查询语句时， 想要理解 <code>_score</code> 究竟是如何计算是比较困难的。Elasticsearch 在 每个查询语句中都有一个 explain 参数，将 explain 设为 true 就可以得到更详细的信息。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line">GET /test_index/test_type/_search?explain</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"test_field"</span>: <span class="string">"test"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">0.25316024</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_shard"</span>: <span class="string">"[test_index][1]"</span>,</span><br><span class="line">        <span class="attr">"_node"</span>: <span class="string">"LrOx5yeUQQaYbF4L13z5Zw"</span>,</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"8"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">0.25316024</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"test_field"</span>: <span class="string">"test client 2"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"_explanation"</span>: &#123;</span><br><span class="line">          <span class="attr">"value"</span>: <span class="number">0.25316024</span>,</span><br><span class="line">          <span class="attr">"description"</span>: <span class="string">"sum of:"</span>,</span><br><span class="line">          <span class="attr">"details"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">"value"</span>: <span class="number">0.25316024</span>,</span><br><span class="line">              <span class="attr">"description"</span>: <span class="string">"weight(test_field:test in 0) [PerFieldSimilarity], result of:"</span>,</span><br><span class="line">              <span class="attr">"details"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">"value"</span>: <span class="number">0.25316024</span>,</span><br><span class="line">                  <span class="attr">"description"</span>: <span class="string">"score(doc=0,freq=1.0 = termFreq=1.0\n), product of:"</span>,</span><br><span class="line">                  <span class="attr">"details"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                      <span class="attr">"value"</span>: <span class="number">0.2876821</span>,</span><br><span class="line">                      <span class="attr">"description"</span>: <span class="string">"idf, computed as log(1 + (docCount - docFreq + 0.5) / (docFreq + 0.5)) from:"</span>,</span><br><span class="line">                      <span class="attr">"details"</span>: [</span><br><span class="line">                        &#123;</span><br><span class="line">                          <span class="attr">"value"</span>: <span class="number">1</span>,</span><br><span class="line">                          <span class="attr">"description"</span>: <span class="string">"docFreq"</span>,</span><br><span class="line">                          <span class="attr">"details"</span>: []</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                          <span class="attr">"value"</span>: <span class="number">1</span>,</span><br><span class="line">                          <span class="attr">"description"</span>: <span class="string">"docCount"</span>,</span><br><span class="line">                          <span class="attr">"details"</span>: []</span><br><span class="line">                        &#125;</span><br><span class="line">                      ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      <span class="attr">"value"</span>: <span class="number">0.88</span>,</span><br><span class="line">                      <span class="attr">"description"</span>: <span class="string">"tfNorm, computed as (freq * (k1 + 1)) / (freq + k1 * (1 - b + b * fieldLength / avgFieldLength)) from:"</span>,</span><br><span class="line">                      <span class="attr">"details"</span>: [</span><br><span class="line">                        &#123;</span><br><span class="line">                          <span class="attr">"value"</span>: <span class="number">1</span>,</span><br><span class="line">                          <span class="attr">"description"</span>: <span class="string">"termFreq=1.0"</span>,</span><br><span class="line">                          <span class="attr">"details"</span>: []</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                          <span class="attr">"value"</span>: <span class="number">1.2</span>,</span><br><span class="line">                          <span class="attr">"description"</span>: <span class="string">"parameter k1"</span>,</span><br><span class="line">                          <span class="attr">"details"</span>: []</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                          <span class="attr">"value"</span>: <span class="number">0.75</span>,</span><br><span class="line">                          <span class="attr">"description"</span>: <span class="string">"parameter b"</span>,</span><br><span class="line">                          <span class="attr">"details"</span>: []</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                          <span class="attr">"value"</span>: <span class="number">3</span>,</span><br><span class="line">                          <span class="attr">"description"</span>: <span class="string">"avgFieldLength"</span>,</span><br><span class="line">                          <span class="attr">"details"</span>: []</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                          <span class="attr">"value"</span>: <span class="number">4</span>,</span><br><span class="line">                          <span class="attr">"description"</span>: <span class="string">"fieldLength"</span>,</span><br><span class="line">                          <span class="attr">"details"</span>: []</span><br><span class="line">                        &#125;</span><br><span class="line">                      ]</span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">"value"</span>: <span class="number">0</span>,</span><br><span class="line">              <span class="attr">"description"</span>: <span class="string">"match on required clause, product of:"</span>,</span><br><span class="line">              <span class="attr">"details"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">"value"</span>: <span class="number">0</span>,</span><br><span class="line">                  <span class="attr">"description"</span>: <span class="string">"# clause"</span>,</span><br><span class="line">                  <span class="attr">"details"</span>: []</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">"value"</span>: <span class="number">1</span>,</span><br><span class="line">                  <span class="attr">"description"</span>: <span class="string">"*:*, product of:"</span>,</span><br><span class="line">                  <span class="attr">"details"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                      <span class="attr">"value"</span>: <span class="number">1</span>,</span><br><span class="line">                      <span class="attr">"description"</span>: <span class="string">"boost"</span>,</span><br><span class="line">                      <span class="attr">"details"</span>: []</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      <span class="attr">"value"</span>: <span class="number">1</span>,</span><br><span class="line">                      <span class="attr">"description"</span>: <span class="string">"queryNorm"</span>,</span><br><span class="line">                      <span class="attr">"details"</span>: []</span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_shard"</span>: <span class="string">"[test_index][3]"</span>,</span><br><span class="line">        <span class="attr">"_node"</span>: <span class="string">"LrOx5yeUQQaYbF4L13z5Zw"</span>,</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"7"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">0.25316024</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"test_field"</span>: <span class="string">"test client 2"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"_explanation"</span>: &#123;</span><br><span class="line">          <span class="attr">"value"</span>: <span class="number">0.25316024</span>,</span><br><span class="line">          <span class="attr">"description"</span>: <span class="string">"sum of:"</span>,</span><br><span class="line">          <span class="attr">"details"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">"value"</span>: <span class="number">0.25316024</span>,</span><br><span class="line">              <span class="attr">"description"</span>: <span class="string">"weight(test_field:test in 0) [PerFieldSimilarity], result of:"</span>,</span><br><span class="line">              <span class="attr">"details"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">"value"</span>: <span class="number">0.25316024</span>,</span><br><span class="line">                  <span class="attr">"description"</span>: <span class="string">"score(doc=0,freq=1.0 = termFreq=1.0\n), product of:"</span>,</span><br><span class="line">                  <span class="attr">"details"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                      <span class="attr">"value"</span>: <span class="number">0.2876821</span>,</span><br><span class="line">                      <span class="attr">"description"</span>: <span class="string">"idf, computed as log(1 + (docCount - docFreq + 0.5) / (docFreq + 0.5)) from:"</span>,</span><br><span class="line">                      <span class="attr">"details"</span>: [</span><br><span class="line">                        &#123;</span><br><span class="line">                          <span class="attr">"value"</span>: <span class="number">1</span>,</span><br><span class="line">                          <span class="attr">"description"</span>: <span class="string">"docFreq"</span>,</span><br><span class="line">                          <span class="attr">"details"</span>: []</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                          <span class="attr">"value"</span>: <span class="number">1</span>,</span><br><span class="line">                          <span class="attr">"description"</span>: <span class="string">"docCount"</span>,</span><br><span class="line">                          <span class="attr">"details"</span>: []</span><br><span class="line">                        &#125;</span><br><span class="line">                      ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      <span class="attr">"value"</span>: <span class="number">0.88</span>,</span><br><span class="line">                      <span class="attr">"description"</span>: <span class="string">"tfNorm, computed as (freq * (k1 + 1)) / (freq + k1 * (1 - b + b * fieldLength / avgFieldLength)) from:"</span>,</span><br><span class="line">                      <span class="attr">"details"</span>: [</span><br><span class="line">                        &#123;</span><br><span class="line">                          <span class="attr">"value"</span>: <span class="number">1</span>,</span><br><span class="line">                          <span class="attr">"description"</span>: <span class="string">"termFreq=1.0"</span>,</span><br><span class="line">                          <span class="attr">"details"</span>: []</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                          <span class="attr">"value"</span>: <span class="number">1.2</span>,</span><br><span class="line">                          <span class="attr">"description"</span>: <span class="string">"parameter k1"</span>,</span><br><span class="line">                          <span class="attr">"details"</span>: []</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                          <span class="attr">"value"</span>: <span class="number">0.75</span>,</span><br><span class="line">                          <span class="attr">"description"</span>: <span class="string">"parameter b"</span>,</span><br><span class="line">                          <span class="attr">"details"</span>: []</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                          <span class="attr">"value"</span>: <span class="number">3</span>,</span><br><span class="line">                          <span class="attr">"description"</span>: <span class="string">"avgFieldLength"</span>,</span><br><span class="line">                          <span class="attr">"details"</span>: []</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                          <span class="attr">"value"</span>: <span class="number">4</span>,</span><br><span class="line">                          <span class="attr">"description"</span>: <span class="string">"fieldLength"</span>,</span><br><span class="line">                          <span class="attr">"details"</span>: []</span><br><span class="line">                        &#125;</span><br><span class="line">                      ]</span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">"value"</span>: <span class="number">0</span>,</span><br><span class="line">              <span class="attr">"description"</span>: <span class="string">"match on required clause, product of:"</span>,</span><br><span class="line">              <span class="attr">"details"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">"value"</span>: <span class="number">0</span>,</span><br><span class="line">                  <span class="attr">"description"</span>: <span class="string">"# clause"</span>,</span><br><span class="line">                  <span class="attr">"details"</span>: []</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">"value"</span>: <span class="number">1</span>,</span><br><span class="line">                  <span class="attr">"description"</span>: <span class="string">"*:*, product of:"</span>,</span><br><span class="line">                  <span class="attr">"details"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                      <span class="attr">"value"</span>: <span class="number">1</span>,</span><br><span class="line">                      <span class="attr">"description"</span>: <span class="string">"boost"</span>,</span><br><span class="line">                      <span class="attr">"details"</span>: []</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      <span class="attr">"value"</span>: <span class="number">1</span>,</span><br><span class="line">                      <span class="attr">"description"</span>: <span class="string">"queryNorm"</span>,</span><br><span class="line">                      <span class="attr">"details"</span>: []</span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它提供了 <code>_explanation</code> 。每个 入口都包含一个 description 、 value 、 details 字段，它分别告诉你计算的类型、计算结果和任何我们需要的计算细节。</p><p>因为我测试的版本是5.2，所以从结果看出并不是上面介绍的TF/IDF算法，大致可以看到IDF，依然存在，但是Term frequency和Field-length norm则改为了一个组合算法(tfNorm)。</p><p>具体可以参考文章 <a href="https://ruby-china.org/topics/31934" target="_blank" rel="noopener">ElasticSearch 的分数 (_score) 是怎么计算得出 (2.X &amp; 5.X)</a></p><ul><li>tfNorm反映的该term在所有满足条件的doc中field中的重要性，一般来说，相同的freq 下，field的长度越短，那么取值就越高。</li><li>IDF反映的是term的影响因子，如果docCount很大，docFreq很小，标示该term在doc之间具有很好的分辨力，当然IDF值也就越大。</li></ul><h2 id="文档是如何被匹配上的"><a href="#文档是如何被匹配上的" class="headerlink" title="文档是如何被匹配上的"></a>文档是如何被匹配上的</h2><p>当 explain 选项加到某一文档上时， explain api 会帮助你理解为何这个文档会被匹配，更重要的是，一个文档为何没有被匹配。</p><p>请求路径为 /index/type/id/_explain ，如下所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /test_index/test_type/7/_explain</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"test_field"</span>: <span class="string">"world"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不只是我们之前看到的充分解释 ，我们现在有了一个 description 元素，它将告诉我们：</p><p><code>&quot;description&quot;: &quot;no match on required clause (test_field:world)&quot;,</code></p><h1 id="Doc-Values"><a href="#Doc-Values" class="headerlink" title="Doc Values"></a>Doc Values</h1><p>搜索的时候，要依靠倒排索引；排序的时候，需要依靠正排索引，看到每个document的每个field，然后进行排序，所谓的正排索引，其实就是doc values。在建立索引的时候，一方面会建立倒排索引，以供搜索用；一方面会建立正排索引，也就是doc values，以供排序，聚合，过滤等操作使用。doc values是被保存在磁盘上的，此时如果内存足够，os会自动将其缓存在内存中，性能还是会很高；如果内存不足够，os会将其写入磁盘上。</p><h1 id="分布式检索过程"><a href="#分布式检索过程" class="headerlink" title="分布式检索过程"></a>分布式检索过程</h1><p>讨论一下在分布式环境中搜索是怎么执行的，搜索被执行成一个两阶段过程，我们称之为 query then fetch 。</p><h2 id="查询阶段"><a href="#查询阶段" class="headerlink" title="查询阶段"></a>查询阶段</h2><p>在初始 <em>查询阶段</em> 时， 查询会广播到索引中每一个分片拷贝（主分片或者副本分片）。 每个分片在本地执行搜索并构建一个匹配文档的 <em>优先队列</em>。</p><blockquote><h2 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h2><p>一个 优先队列 仅仅是一个存有 top-n 匹配文档的有序列表。优先队列的大小取决于分页参数 from 和 size 。例如，如下搜索请求将需要足够大的优先队列来放入100条文档。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"from"</span>: <span class="number">90</span>,</span><br><span class="line">    <span class="attr">"size"</span>: <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p><strong>查询过程分布式搜索</strong></p><p><img src="https://www.elastic.co/guide/cn/elasticsearch/guide/current/images/elas_0901.png" alt="查询过程分布式搜索"></p><p>查询阶段包含以下三个步骤:</p><ol><li>客户端发送一个 search 请求到 Node 3 ， Node 3 会创建一个大小为 from + size 的空优先队列。</li><li>Node 3 将查询请求转发到索引的每个主分片或副本分片中。每个分片在本地执行查询并添加结果到大小为 from + size 的本地有序优先队列中。</li><li>每个分片返回各自优先队列中所有文档的 ID 和排序值给协调节点，也就是 Node 3 ，它合并这些值到自己的优先队列中来产生一个全局排序后的结果列表。</li></ol><p>当一个搜索请求被发送到某个节点时，这个节点就变成了协调节点。 这个节点的任务是广播查询请求到所有相关分片并将它们的响应整合成全局排序后的结果集合，这个结果集合会返回给客户端。</p><p>这个也跟前面说的deep paging问题有关，from + size 分页太深，每个分片都要返回大量的数据给协调节点，会消耗大量的带宽，内存，cpu。</p><p><strong>replica shard如何增加查询吞吐量</strong></p><p>第一步是广播请求到索引中每一个节点的分片拷贝。查询请求可以被某个主分片或某个副本分片处理， 这就是为什么更多的副本（当结合更多的硬件）能够增加搜索吞吐率。 协调节点将在之后的请求中轮询所有的分片拷贝来分摊负载。</p><h2 id="取回阶段"><a href="#取回阶段" class="headerlink" title="取回阶段"></a>取回阶段</h2><p>查询阶段标识哪些文档满足 搜索请求，但是我们仍然需要取回这些文档。这是取回阶段的任务, 正如 图 “分布式搜索的取回阶段” 所展示的。</p><p><img src="https://www.elastic.co/guide/cn/elasticsearch/guide/current/images/elas_0902.png" alt="分布式搜索的取回阶段"></p><p>分布式阶段由以下步骤构成：</p><ol><li>协调节点辨别出哪些文档需要被取回并向相关的分片提交多个 GET 请求。</li><li>每个分片加载并 丰富 文档，如果有需要的话，接着返回文档给协调节点。</li><li>一旦所有的文档都被取回了，协调节点返回结果给客户端。</li></ol><p>协调节点首先决定哪些文档 确实 需要被取回。例如，如果我们的查询指定了 { “from”: 90, “size”: 10 } ，最初的90个结果会被丢弃，只有从第91个开始的10个结果需要被取回。这些文档可能来自和最初搜索请求有关的一个、多个甚至全部分片。</p><p>协调节点给持有相关文档的每个分片创建一个 multi-get request ，并发送请求给同样处理查询阶段的分片副本。</p><p>一般搜索，如果不加from和size，就默认搜索前10条，按照_score排序。</p><h1 id="搜索参数"><a href="#搜索参数" class="headerlink" title="搜索参数"></a>搜索参数</h1><p>有几个搜索参数可以影响搜索过程。</p><h2 id="preference"><a href="#preference" class="headerlink" title="preference"></a>preference</h2><p>preference 参数允许用来控制由哪些分片或节点来处理搜索请求。 它接受像 <code>_primary</code>, <code>_primary_first</code>, <code>_local</code>, <code>_only_node:xyz</code>, <code>_prefer_node:xyz</code>, 和 <code>_shards:2,3</code> 这样的值。</p><blockquote><h2 id="Bouncing-Results"><a href="#Bouncing-Results" class="headerlink" title="Bouncing Results"></a>Bouncing Results</h2><p>想象一下有两个文档有同样值的时间戳字段，搜索结果用 timestamp 字段来排序。 由于搜索请求是在所有有效的分片副本间轮询的，那就有可能发生主分片处理请求时，这两个文档是一种顺序， 而副本分片处理请求时又是另一种顺序。</p></blockquote><blockquote><p>这就是所谓的 bouncing results 问题: 每次用户刷新页面，搜索结果表现是不同的顺序。 让同一个用户始终使用同一个分片，这样可以避免这种问题， 可以设置 preference 参数为一个特定的任意值比如用户会话ID来解决。</p></blockquote><h2 id="timeout"><a href="#timeout" class="headerlink" title="timeout"></a>timeout</h2><p>通常分片处理完它所有的数据后再把结果返回给协同节点，协同节点把收到的所有结果合并为最终结果。</p><p>这意味着花费的时间是最慢分片的处理时间加结果合并的时间。如果有一个节点有问题，就会导致所有的响应缓慢。</p><p>参数 <code>timeout</code> 告诉 分片允许处理数据的最大时间。如果没有足够的时间处理所有数据，这个分片的结果可以是部分的，甚至是空数据。</p><h2 id="routing"><a href="#routing" class="headerlink" title="routing"></a>routing</h2><p>定制参数 routing ，它能够在索引时提供来确保相关的文档，比如属于某个用户的文档被存储在某个分片上。 在搜索的时候，不用搜索索引的所有分片，而是通过指定几个 routing 值来限定只搜索几个相关的分片，默认是<code>_id</code>路由，也可以指定字段<code>?routing=user_1,user2</code>。</p><h2 id="search-type"><a href="#search-type" class="headerlink" title="search_type"></a>search_type</h2><p>缺省的搜索类型是 query_then_fetch 。 在某些情况下，你可能想明确设置 search_type 为 dfs_query_then_fetch 来改善相关性精确度：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /_search?search_type=dfs_query_then_fetch</span><br></pre></td></tr></table></figure><p>搜索类型 dfs_query_then_fetch 有预查询阶段，这个阶段可以从所有相关分片获取词频来计算全局词频。 </p><h1 id="scroll-查询"><a href="#scroll-查询" class="headerlink" title="scroll 查询"></a>scroll 查询</h1><p>如果是用from + size的查询方式，会有我们之前说的Deep Paging问题，而且ES默认也限制了size的大小最多只能是1w条。如果一次性要查出来比如10万条数据，那么性能会很差，此时一般会采取用scoll滚动查询，一批一批的查，直到所有数据都查询完处理完。</p><p>使用scoll滚动搜索，可以先搜索一批数据，然后下次再搜索一批数据，以此类推，直到搜索出全部的数据来。<br>scoll搜索会在第一次搜索的时候，保存一个当时的视图快照，之后只会基于该旧的视图快照提供数据搜索，如果这个期间数据变更，是不会让用户看到的。<br>采用基于_doc进行排序的方式，性能较高。<br>每次发送scroll请求，我们还需要指定一个scoll参数，指定一个时间窗口，每次搜索请求只要在这个时间窗口内能完成就可以了。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">GET /test_index/test_type/_search?scroll=1m</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"sort"</span>: [ <span class="string">"_doc"</span> ],</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_scroll_id"</span>: <span class="string">"DnF1ZXJ5VGhlbkZldGNoBQAAAAAAAOOqFkxyT3g1eWVVUVFhWWJGNEwxM3o1WncAAAAAAADjqxZMck94NXllVVFRYVliRjRMMTN6NVp3AAAAAAAA46wWTHJPeDV5ZVVRUWFZYkY0TDEzejVadwAAAAAAAOOuFkxyT3g1eWVVUVFhWWJGNEwxM3o1WncAAAAAAADjrRZMck94NXllVVFRYVliRjRMMTN6NVp3"</span>,</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">3</span>,</span><br><span class="line">  .....</span><br></pre></td></tr></table></figure><p>这个查询的返回结果包括一个字段 <code>_scroll_id</code>， 它是一个base64编码的长字符串 (((“scroll_id”))) 。 现在我们能传递字段 <code>_scroll_id</code> 到 <code>_search/scroll</code>查询接口获取下一批结果：下一次再发送scoll请求的时候，必须带上这个<code>scoll_id</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET /_search/scroll</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"scroll"</span>: <span class="string">"1m"</span>, </span><br><span class="line">    <span class="attr">"scroll_id"</span> : <span class="string">"DnF1ZXJ5VGhlbkZldGNoBQAAAAAAAOOqFkxyT3g1eWVVUVFhWWJGNEwxM3o1WncAAAAAAADjqxZMck94NXllVVFRYVliRjRMMTN6NVp3AAAAAAAA46wWTHJPeDV5ZVVRUWFZYkY0TDEzejVadwAAAAAAAOOuFkxyT3g1eWVVUVFhWWJGNEwxM3o1WncAAAAAAADjrRZMck94NXllVVFRYVliRjRMMTN6NVp3"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个scroll查询返回的下一批结果。 尽管我们指定字段 size 的值为1000，我们有可能取到超过这个值数量的文档。 当查询的时候， 字段 size 作用于单个分片，所以每个批次实际返回的文档数量最大为 size * number_of_primary_shards 。</p><p>scoll看起来挺像分页的，但是其实使用场景不一样。分页主要是用来一页一页搜索，给用户看的；scoll主要是用来一批一批检索数据，让系统进行处理的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此为龙果学院课程学习笔记，记录以后翻看&lt;/p&gt;
&lt;p&gt;前面讲了简单的搜索、分词和映射，这篇文章讲ES的搜索API&lt;/p&gt;
&lt;h1 id=&quot;search-API&quot;&gt;&lt;a href=&quot;#search-API&quot; class=&quot;headerlink&quot; title=&quot;search API&quot;&gt;&lt;/a&gt;search API&lt;/h1&gt;&lt;p&gt;Search API的基本语法：&lt;/p&gt;
&lt;p&gt;这是一个空查询，空查询将返回所有索引库（indices)中的所有文档：&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GET /_search&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="ElasticSearch" scheme="http://www.saily.top/categories/ElasticSearch/"/>
    
    
      <category term="ElasticSearch" scheme="http://www.saily.top/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch05-搜索详解</title>
    <link href="http://www.saily.top/2018/09/19/elasticsearch/elasticSearch05/"/>
    <id>http://www.saily.top/2018/09/19/elasticsearch/elasticSearch05/</id>
    <published>2018-09-19T03:36:54.000Z</published>
    <updated>2018-09-21T02:31:22.027Z</updated>
    
    <content type="html"><![CDATA[<p>此为龙果学院课程学习笔记，记录以后翻看</p><p>前面讲了Document的增删改查和集群原理，接下来就是ES的重头戏了，搜索。</p><h1 id="search结果解析"><a href="#search结果解析" class="headerlink" title="_search结果解析"></a>_search结果解析</h1><p>当发出一个搜索请求的时候，会拿到很多结果，下面说一下搜索结果里的各种数据，都代表了什么含义。<br><a id="more"></a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">GET _search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">16</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">16</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">8</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">".kibana"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"config"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"5.2.0"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"buildNum"</span>: <span class="number">14695</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"8"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"test_field"</span>: <span class="string">"test client 2"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"10"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"test_field1"</span>: <span class="string">"test1"</span>,</span><br><span class="line">          <span class="attr">"test_field2"</span>: <span class="string">"updated test2"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"ecommerce"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"product"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"2"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"jiajieshi yagao"</span>,</span><br><span class="line">          <span class="attr">"desc"</span>: <span class="string">"youxiao fangzhu"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">25</span>,</span><br><span class="line">          <span class="attr">"producer"</span>: <span class="string">"jiajieshi producer"</span>,</span><br><span class="line">          <span class="attr">"tags"</span>: [</span><br><span class="line">            <span class="string">"fangzhu"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"ecommerce"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"product"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"gaolujie yagao"</span>,</span><br><span class="line">          <span class="attr">"desc"</span>: <span class="string">"gaoxiao meibai"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">30</span>,</span><br><span class="line">          <span class="attr">"producer"</span>: <span class="string">"gaolujie producer"</span>,</span><br><span class="line">          <span class="attr">"tags"</span>: [</span><br><span class="line">            <span class="string">"meibai"</span>,</span><br><span class="line">            <span class="string">"fangzhu"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"7"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"test_field"</span>: <span class="string">"test client 2"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"test_index1"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"test"</span>: <span class="string">"hello es"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"ecommerce"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"product"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"3"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"zhonghua yagao"</span>,</span><br><span class="line">          <span class="attr">"desc"</span>: <span class="string">"caoben zhiwu"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">40</span>,</span><br><span class="line">          <span class="attr">"producer"</span>: <span class="string">"zhonghua producer"</span>,</span><br><span class="line">          <span class="attr">"tags"</span>: [</span><br><span class="line">            <span class="string">"qingxin"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>took</code>：整个搜索请求花费了多少毫秒</li><li><code>hits.total</code>：本次搜索，返回了几条结果</li><li><code>hits.max_score</code>：本次搜索的所有结果中，最大的相关度分数是多少，每一条document对于search的相关度，越相关，<code>_score</code>分数越大，排位越靠前</li><li><code>hits.hits</code>：默认查询前10条数据，包含完整数据，<code>_score</code>降序排序</li><li><code>shards</code>：shards fail的条件（primary和replica全部挂掉），不影响其他shard。默认情况下来说，一个搜索请求，会打到一个index的所有primary shard上去，当然了，每个primary shard都可能会有一个或多个replic shard，所以请求也可以到primary shard的其中一个replica shard上去。</li><li><p><code>timeout</code>：默认没有所谓的timeout，如果搜索特别慢每个shard都要好几分钟，那么搜索请求会一直等待结果返回。ES提供了timeout机制，指定每个shard在设置的timeout时间内马上已经搜索到的数据（可能是部分，也可能是全部），直接返回给client程序，而不是等到所有的数据全部搜索出来以后再返回。确保一次请求可以在用户指定的timeout时常内完成，为一些时间敏感的搜索应用提供良好支持。</p><p>  <code>GET /_search?timeout=10m</code></p></li></ul><h1 id="multi-index和multi-type搜索模式"><a href="#multi-index和multi-type搜索模式" class="headerlink" title="multi-index和multi-type搜索模式"></a>multi-index和multi-type搜索模式</h1><p>如何一次性搜索多个index和多个type下的数据</p><ul><li><code>/_search</code>：所有索引，所有type下的所有数据都搜索出来</li><li><code>/index1/_search</code>：指定一个index，搜索其下所有type的数据</li><li><code>/index1,index2/_search</code>：同时搜索两个index下的数据</li><li><code>/*1,*2/_search</code>：按照通配符去匹配多个索引</li><li><code>/index1/type1/_search</code>：搜索一个index下指定的type的数据</li><li><code>/index1/type1,type2/_search</code>：可以搜索一个index下多个type的数据</li><li><code>/index1,index2/type1,type2/_search</code>：搜索多个index下的多个type的数据</li><li><code>/_all/type1,type2/_search</code>：_all，可以代表搜索所有index下的指定type的数据</li></ul><h2 id="搜索基本原理"><a href="#搜索基本原理" class="headerlink" title="搜索基本原理"></a>搜索基本原理</h2><p>客户端发送一个搜索请求，会把请求分配到所有的primary shard上去执行，因为每个shard都包含部分数据，所以每个shard上都可能会包含搜索请求的结果。但是如果primary shard有replica shard，那么请求也可以分配到replica shard上去执行。</p><h1 id="分页搜索"><a href="#分页搜索" class="headerlink" title="分页搜索"></a>分页搜索</h1><h2 id="分页搜索语法"><a href="#分页搜索语法" class="headerlink" title="分页搜索语法"></a>分页搜索语法</h2><p>参数：</p><ul><li>size: 一页多少条</li><li>from：从多少条开始</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /_search?size=10&amp;from=0</span><br></pre></td></tr></table></figure><p>返回结果里面写了总共有多少条：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"hits": &#123;</span><br><span class="line">    "total": 8,</span><br></pre></td></tr></table></figure><h2 id="deep-paging问题"><a href="#deep-paging问题" class="headerlink" title="deep paging问题"></a>deep paging问题</h2><p>deep paging就是搜索特别深，比如总共有3w条数据，每页10条数据，搜索最后一页</p><p>请求先发到coordinate node（通常是client节点），然后请求会分配到不同的节点上去找数据，每个个shard都会把所有的数据找出来，排序后取最后10条，返回给客户端。</p><p>这个过程会耗费很大的网络带宽、内存和CPU，所以deep paging有较大的性能问题，应该尽量避免做出这种deep paging操作。</p><h1 id="query-string语法介绍"><a href="#query-string语法介绍" class="headerlink" title="query string语法介绍"></a>query string语法介绍</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /test_index/test_type/_search?q=test_field:test</span><br><span class="line">GET /test_index/test_type/_search?q=+test_field:test</span><br><span class="line">GET /test_index/test_type/_search?q=-test_field:test</span><br></pre></td></tr></table></figure><ul><li><ul><li>test_field包含test</li></ul></li><li><ul><li>test_field不包含test</li></ul></li></ul><h1 id="all-metadata介绍"><a href="#all-metadata介绍" class="headerlink" title="_all metadata介绍"></a>_all metadata介绍</h1><pre><code>GET /test_index/test_type/_search?q=test</code></pre><p>直接可以搜索所有的field，任意一个field包含指定的关键字就可以搜索出来。我们在进行中搜索的时候，难道是对document中的每一个field都进行一次搜索吗？不是这样的。</p><p>es中的<code>_all</code>元数据，在建立索引的时候，我们插入一条document，它里面包含了多个field，此时es会自动将多个field的值，全部用字符串的方式串联起来，变成一个长的字符串，作为<code>_all</code> field的值，同时建立索引。</p><p>后面如果在搜索的时候，没有对某个field指定搜索，就默认搜索_all field，其中是包含了所有field的值的。</p><p>举个例子</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"jack"</span>,</span><br><span class="line">  <span class="attr">"age"</span>: <span class="number">26</span>,</span><br><span class="line">  <span class="attr">"email"</span>: <span class="string">"jack@sina.com"</span>,</span><br><span class="line">  <span class="attr">"address"</span>: <span class="string">"guamgzhou"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>jack 26 jack@sina.com guangzhou</code>，作为这一条document的<code>_all</code> field的值，同时进行分词后建立对应的倒排索引。</p><h1 id="mapping介绍"><a href="#mapping介绍" class="headerlink" title="mapping介绍"></a>mapping介绍</h1><p>先插入几条数据，让ES自动建立一个索引：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">PUT /website/article/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"post_date"</span>: <span class="string">"2017-01-01"</span>,</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"my first article"</span>,</span><br><span class="line">  <span class="attr">"content"</span>: <span class="string">"this is my first article in this website"</span>,</span><br><span class="line">  <span class="attr">"author_id"</span>: <span class="number">11400</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /website/article/2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"post_date"</span>: <span class="string">"2017-01-02"</span>,</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"my second article"</span>,</span><br><span class="line">  <span class="attr">"content"</span>: <span class="string">"this is my second article in this website"</span>,</span><br><span class="line">  <span class="attr">"author_id"</span>: <span class="number">11400</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /website/article/3</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"post_date"</span>: <span class="string">"2017-01-03"</span>,</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"my third article"</span>,</span><br><span class="line">  <span class="attr">"content"</span>: <span class="string">"this is my third article in this website"</span>,</span><br><span class="line">  <span class="attr">"author_id"</span>: <span class="number">11400</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面进行搜索测试：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /website/article/_search?q=20173条结果             </span><br><span class="line">GET /website/article/_search?q=2017-01-01        3条结果</span><br><span class="line">GET /website/article/_search?q=post_date:2017-01-01   1条结果</span><br><span class="line">GET /website/article/_search?q=post_date:2017         1条结果</span><br></pre></td></tr></table></figure><p>这个搜索结果，不太符合我们的期望，这里涉及到ES的mapping了，具体这个数字是怎么搜索出来的，后面<a href="#案例详解">案例详解</a>会讲到。</p><p>自动或手动为index中的type建立的一种数据结构和相关配置，简称为mapping，<br><code>dynamic mapping</code>，就是ES自动为我们建立index，创建type，以及type对应的mapping，mapping中包含了每个field对应的数据类型，以及如何分词等设置。</p><p>如何查看mapping？</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">GET /website/_mapping/article</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"website"</span>: &#123;</span><br><span class="line">    <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">      <span class="attr">"article"</span>: &#123;</span><br><span class="line">        <span class="attr">"properties"</span>: &#123;</span><br><span class="line">          <span class="attr">"author_id"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"long"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"content"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">            <span class="attr">"fields"</span>: &#123;</span><br><span class="line">              <span class="attr">"keyword"</span>: &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">                <span class="attr">"ignore_above"</span>: <span class="number">256</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"post_date"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"date"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"title"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">            <span class="attr">"fields"</span>: &#123;</span><br><span class="line">              <span class="attr">"keyword"</span>: &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">                <span class="attr">"ignore_above"</span>: <span class="number">256</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>搜索结果为什么不一致，因为es自动建立mapping的时候，为不同的field设置了不同的data type。不同的data type的分词、搜索等行为是不一样的。所以出现了_all field和post_date field的搜索表现完全不一样的结果。</p><h1 id="精确搜索和全文搜索对比"><a href="#精确搜索和全文搜索对比" class="headerlink" title="精确搜索和全文搜索对比"></a>精确搜索和全文搜索对比</h1><h2 id="精确搜索"><a href="#精确搜索" class="headerlink" title="精确搜索"></a>精确搜索</h2><p>2017-01-01，用精确值搜索的时候，必须输入2017-01-01，才能搜索出来<br>如果你输入一个01，是搜索不出来的</p><h2 id="全文搜索"><a href="#全文搜索" class="headerlink" title="全文搜索"></a>全文搜索</h2><ol><li>缩写 vs. 全称：cn vs. china</li><li>格式转化：like liked likes</li><li>大小写：Tom vs tom</li><li>同义词：like vs love</li></ol><p>2017-01-01，2017 01 01，搜索2017，或者01，都可以搜索出来</p><p>china，搜索cn，也可以将china搜索出来<br>likes，搜索like，也可以将likes搜索出来<br>Tom，搜索tom，也可以将Tom搜索出来<br>like，搜索love，同义词，也可以将like搜索出来        </p><p>就不是说单纯的只是匹配完整的一个值，而是可以对值进行拆分词语后（分词）进行匹配，也可以通过缩写、时态、大小写、同义词等进行匹配</p><h1 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h1><p>倒排索引是实现“单词-文档矩阵”的一种具体存储形式，通过倒排索引，可以根据单词快速获取包含这个单词的文档列表。倒排索引主要由两个部分组成：“单词词典”和“倒排文件”。</p><p>先来两个文档：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">doc1：I really liked my small dogs, and I think my mom also liked them.</span><br><span class="line">doc2：He never liked any dogs, so I hope that my mom will not expect me to liked him.</span><br></pre></td></tr></table></figure><p>接下来分词，初步的倒排索引的建立。</p><p>演示一下倒排索引最简单的建立的一个过程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">worddoc1doc2</span><br><span class="line"></span><br><span class="line">I**</span><br><span class="line">really*</span><br><span class="line">liked**</span><br><span class="line">my**</span><br><span class="line">small*</span><br><span class="line">dogs*</span><br><span class="line">and*</span><br><span class="line">think*</span><br><span class="line">mom**</span><br><span class="line">also*</span><br><span class="line">them*</span><br><span class="line">He*</span><br><span class="line">never*</span><br><span class="line">any*</span><br><span class="line">so*</span><br><span class="line">hope*</span><br><span class="line">that*</span><br><span class="line">will*</span><br><span class="line">not*</span><br><span class="line">expect*</span><br><span class="line">me*</span><br><span class="line">to*</span><br><span class="line">him*</span><br></pre></td></tr></table></figure><p>如果用<code>mother like little dog</code>去搜索，是搜不到结果的，搜索的时候会被拆成4个单词去搜索，即</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mother</span><br><span class="line">like</span><br><span class="line">little</span><br><span class="line">dog</span><br></pre></td></tr></table></figure><p>但是，在我们看来mother和mom是同义词，like和liked也是一样的意思，little和small也一样，dog和dogs也一样。</p><p>所以在简历倒排所以的时候，会执行一个操作，对拆分出的各个单词进行相应的处理，以提升后面搜索的时候能够搜索到相关联的文档的概率，这个过程叫normalization。</p><p>比如时态的转换，单复数的转换，同义词的转换，大小写的转换等等</p><p>mom —&gt; mother<br>liked —&gt; like<br>small —&gt; little<br>dogs —&gt; dog        </p><p>重新建立倒排索引，加入normalization，再次用<code>mother liked little dog</code>搜索，doc1和doc2都会搜索出来。</p><h1 id="分词器介绍"><a href="#分词器介绍" class="headerlink" title="分词器介绍"></a>分词器介绍</h1><p>分词器，是将用户输入的一段文本，分析成符合逻辑的一种工具，给你一段文本，然后将这段句子拆分成一个一个的单个的单词，同时对每个单词进行normalization（时态转换，单复数转换），分词器<br>提升recall召回率（召回率：搜索的时候，增加能够搜索到的结果的数量）</p><ol><li>character filter：在一段文本进行分词之前，先进行预处理，比如说最常见的就是，过滤html标签（<span>hello<span> –&gt; hello），&amp; –&gt; and（I&amp;you –&gt; I and you）</span></span></li><li>tokenizer：分词，hello you and me –&gt; hello, you, and, me</li><li>token filter：lowercase，stop word，synonymom，dogs –&gt; dog，liked –&gt; like，Tom –&gt; tom，a/the/an –&gt; 干掉，mother –&gt; mom，small –&gt; little</li></ol><p>分词器很重要，它将一段文本进行各种处理，最后处理好的结果才会拿去建立倒排索引。</p><h2 id="内置分词器介绍"><a href="#内置分词器介绍" class="headerlink" title="内置分词器介绍"></a>内置分词器介绍</h2><p><code>Set the shape to semi-transparent by calling set_trans(5)</code></p><ul><li>standard analyzer：set, the, shape, to, semi, transparent, by, calling, set_trans, 5（默认的是standard）</li><li>simple analyzer：set, the, shape, to, semi, transparent, by, calling, set, trans</li><li>whitespace analyzer：Set, the, shape, to, semi-transparent, by, calling, set_trans(5)</li><li>language analyzer（特定的语言的分词器，比如说，english，英语分词器）：set, shape, semi, transpar, call, set_tran, 5</li></ul><h2 id="query-string分词"><a href="#query-string分词" class="headerlink" title="query string分词"></a>query string分词</h2><p><strong>query string必须以和index建立时相同的analyzer进行分词</strong></p><p>比如我们有一个document，其中有一个field，包含的value是：hello you and me。</p><p>我们要搜索这个document对应的index，搜索文本是hell me，这个搜索文本就是query string。<br>query string，默认情况下，es会使用它对应的field建立倒排索引时相同的分词器去进行分词和normalization，只有这样才能实现正确的搜索。</p><p>建立倒排索引的时候，将dogs –&gt; dog。结果搜索的时候用dogs去搜索，那不就搜索不到了吗？所以搜索的时候，那个dogs也必须变成dog才行。才能搜索到。</p><p><strong>query string对exact value（精确搜索）和full text（全文搜索）的区别对待</strong></p><blockquote><p>所以不同类型的field，可能有的就是full text，有的就是exact value。</p></blockquote><h2 id="案例详解"><a href="#案例详解" class="headerlink" title="案例详解"></a>案例详解</h2><p><code>GET /_search?q=2017</code></p><p>这个查询前面说了，搜索的是<code>_all</code> field，document所有的field都会拼接成一个大字符串，进行分词搜索。</p><p>拼接以后的字符串：2017-01-02 my second article this is my second article in this website 11400</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">doc1doc2doc3</span><br><span class="line">2017***</span><br><span class="line">01* </span><br><span class="line">02*</span><br><span class="line">03*</span><br></pre></td></tr></table></figure><p>所以用2017去搜索，自然会搜索到3个。</p><p>那么用<code>GET /_search?q=2017-01-01</code>去搜索呢</p><p>2017-01-01这个query string会用跟建立倒排索引一样的分词器去进行分词，所以搜索的条件会被分词成这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2017</span><br><span class="line">01</span><br><span class="line">01</span><br></pre></td></tr></table></figure><p>所以还是会搜索到3条。</p><p>接下来是<code>GET /_search?q=post_date:2017-01-01</code>，这里加了查询的字段了，这个字段的类型是date，es会用特别的方式进行处理，转换成时间去对这个字段进行搜索。</p><h2 id="测试分词器"><a href="#测试分词器" class="headerlink" title="测试分词器"></a>测试分词器</h2><p>给一段文本和指定分词器进行分词：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">GET /_analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"standard"</span>,</span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"Text to analyze"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokens"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"text"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">4</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"to"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">5</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">7</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"analyze"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">8</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">15</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="mapping详解"><a href="#mapping详解" class="headerlink" title="mapping详解"></a>mapping详解</h1><p>为了能够将时间域视为时间，数字域视为数字，字符串域视为全文或精确值字符串， Elasticsearch 需要知道每个域中数据的类型。这个信息包含在mapping中。</p><p>mapping就是index的type的元数据，每个type都有一个自己的mapping，决定了数据类型，建立倒排索引的行为，还有进行搜索的行为。</p><ol><li>往es里面直接插入数据，es会自动建立索引，同时建立type以及对应的mapping。</li><li>mapping中定义了每个field的数据类型。</li><li>不同的数据类型（比如说text和date），可能有的是exact value，有的是full text。</li><li>exact value：在建立倒排索引、分词的时候，是将整个值一起作为一个关键词建立到倒排索引中的；full text：会经历各种各样的处理、分词、normaliztion（时态转换，同义词转换，大小写转换），才会建立到倒排索引中。</li><li>同时呢，exact value和full text类型的field就决定了，在一个搜索过来的时候，对exact value field或者是full text field进行搜索的行为也是不一样的，会跟建立倒排索引的行为保持一致；比如说exact value搜索的时候，就是直接按照整个值进行匹配，full text query string，也会进行分词和normalization再去倒排索引中去搜索。</li><li>可以用es的dynamic mapping，让其自动建立mapping，包括自动设置数据类型；也可以提前手动创建index和type的mapping，自己对各个field进行设置，包括数据类型，包括索引行为、分词器，等等。</li></ol><h2 id="mapping数据类型"><a href="#mapping数据类型" class="headerlink" title="mapping数据类型"></a>mapping数据类型</h2><p>Elasticsearch支持如下简单域类型：</p><ul><li>字符串: string</li><li>整数 : byte, short, integer, long</li><li>浮点数: float, double</li><li>布尔型: boolean</li><li>日期: date</li></ul><p>dynamic mapping：当你索引一个包含新域的文档–之前未曾出现– Elasticsearch 会使用 动态映射 ，通过JSON中基本数据类型，尝试猜测域类型，使用如下规则：</p><p>true or false    –&gt;    boolean<br>123        –&gt;    long<br>123.45        –&gt;    double<br>2017-01-01    –&gt;    date<br>“hello world”    –&gt;    string/text        </p><blockquote><p>这意味着如果你通过引号( “123” )索引一个数字，它会被映射为 string 类型，而不是 long 。但是，如果这个域已经映射为 long ，那么 Elasticsearch 会尝试将这个字符串转化为 long ，如果无法转化，则抛出一个异常。</p></blockquote><h2 id="查看mapping"><a href="#查看mapping" class="headerlink" title="查看mapping"></a>查看mapping</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">GET website/_mapping/article</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"website"</span>: &#123;</span><br><span class="line">    <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">      <span class="attr">"article"</span>: &#123;</span><br><span class="line">        <span class="attr">"properties"</span>: &#123;</span><br><span class="line">          <span class="attr">"author_id"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"long"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"content"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">            <span class="attr">"fields"</span>: &#123;</span><br><span class="line">              <span class="attr">"keyword"</span>: &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">                <span class="attr">"ignore_above"</span>: <span class="number">256</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"post_date"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"date"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"title"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">            <span class="attr">"fields"</span>: &#123;</span><br><span class="line">              <span class="attr">"keyword"</span>: &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">                <span class="attr">"ignore_above"</span>: <span class="number">256</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义mapping"><a href="#自定义mapping" class="headerlink" title="自定义mapping"></a>自定义mapping</h2><p>mapping在建立以后，只能新增字段，不能修改字段类型。</p><p>先创建一个mapping：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">PUT /website</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"article"</span>: &#123;</span><br><span class="line">      <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"author_id"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"long"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"title"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"analyzer"</span>: <span class="string">"english"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"content"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"text"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"post_date"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"date"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"publisher_id"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"index"</span>: <span class="string">"not_analyzed"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>试着修改mapping，比如<code>author_id</code>，会得到一个错误：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">PUT /website</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"article"</span>: &#123;</span><br><span class="line">      <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"author_id"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"text"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"error"</span>: &#123;</span><br><span class="line">    <span class="attr">"root_cause"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"index_already_exists_exception"</span>,</span><br><span class="line">        <span class="attr">"reason"</span>: <span class="string">"index [website/8KNSiw4wRq-67EVN20ll3A] already exists"</span>,</span><br><span class="line">        <span class="attr">"index_uuid"</span>: <span class="string">"8KNSiw4wRq-67EVN20ll3A"</span>,</span><br><span class="line">        <span class="attr">"index"</span>: <span class="string">"website"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"index_already_exists_exception"</span>,</span><br><span class="line">    <span class="attr">"reason"</span>: <span class="string">"index [website/8KNSiw4wRq-67EVN20ll3A] already exists"</span>,</span><br><span class="line">    <span class="attr">"index_uuid"</span>: <span class="string">"8KNSiw4wRq-67EVN20ll3A"</span>,</span><br><span class="line">    <span class="attr">"index"</span>: <span class="string">"website"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="number">400</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是如果是给已经存在的mapping新增一个field，就没问题了：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PUT /website/_mapping/article</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"properties"</span> : &#123;</span><br><span class="line">    <span class="attr">"new_field"</span> : &#123;</span><br><span class="line">      <span class="attr">"type"</span> :    <span class="string">"string"</span>,</span><br><span class="line">      <span class="attr">"index"</span>:    <span class="string">"not_analyzed"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"acknowledged"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试mapping"><a href="#测试mapping" class="headerlink" title="测试mapping"></a>测试mapping</h2><p>你可以使用 analyze API 测试字符串域的映射，下面测试某一个mapping的字段分词情况：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET /website/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"field"</span>: <span class="string">"content"</span>,</span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"my-dogs"</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mapping复杂数据类型"><a href="#mapping复杂数据类型" class="headerlink" title="mapping复杂数据类型"></a>mapping复杂数据类型</h2><p>除了我们提到的简单标量数据类型， JSON 还有 null 值，数组，和对象，这些 Elasticsearch 都是支持的</p><h3 id="multivalue-field（多值域）"><a href="#multivalue-field（多值域）" class="headerlink" title="multivalue field（多值域）"></a>multivalue field（多值域）</h3><p>很有可能，我们希望 tag 域 包含多个标签。我们可以以数组的形式索引标签：</p><p><code>{ &quot;tag&quot;: [ &quot;search&quot;, &quot;nosql&quot; ]}</code></p><p>对于数组，没有特殊的映射需求。任何域都可以包含0、1或者多个值，就像全文域分析得到多个词条。</p><p>这暗示 数组中所有的值必须是相同数据类型的 。你不能将日期和字符串混在一起。如果你通过索引数组来创建新的域，Elasticsearch 会用数组中第一个值的数据类型作为这个域的 类型。</p><h3 id="empty-field（空域）"><a href="#empty-field（空域）" class="headerlink" title="empty field（空域）"></a>empty field（空域）</h3><p>当然，数组可以为空。 这相当于存在零值。 事实上，在 Lucene 中是不能存储 null 值的，所以我们认为存在 null 值的域为空域。</p><p>下面三种域被认为是空的，它们将不会被索引：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"null_value":               null,</span><br><span class="line">"empty_array":              [],</span><br><span class="line">"array_with_null_value":    [ null ]</span><br></pre></td></tr></table></figure><h3 id="object-field（多层级对象）"><a href="#object-field（多层级对象）" class="headerlink" title="object field（多层级对象）"></a>object field（多层级对象）</h3><p>我们讨论的最后一个 JSON 原生数据类是 对象 – 在其他语言中称为哈希，哈希 map，字典或者关联数组。</p><p>内部对象 经常用于 嵌入一个实体或对象到其它对象中。例如，与其在 tweet 文档中包含 user_name 和 user_id 域，我们也可以这样写：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">PUT /tweet/tweet/1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"tweet"</span>:            <span class="string">"Elasticsearch is very flexible"</span>,</span><br><span class="line">    <span class="attr">"user"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>:           <span class="string">"@johnsmith"</span>,</span><br><span class="line">        <span class="attr">"gender"</span>:       <span class="string">"male"</span>,</span><br><span class="line">        <span class="attr">"age"</span>:          <span class="number">26</span>,</span><br><span class="line">        <span class="attr">"name"</span>: &#123;</span><br><span class="line">            <span class="attr">"full"</span>:     <span class="string">"John Smith"</span>,</span><br><span class="line">            <span class="attr">"first"</span>:    <span class="string">"John"</span>,</span><br><span class="line">            <span class="attr">"last"</span>:     <span class="string">"Smith"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET /tweet/tweet/_mapping</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tweet"</span>: &#123;</span><br><span class="line">    <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">      <span class="attr">"tweet"</span>: &#123;</span><br><span class="line">        <span class="attr">"properties"</span>: &#123;</span><br><span class="line">          <span class="attr">"tweet"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">            <span class="attr">"fields"</span>: &#123;</span><br><span class="line">              <span class="attr">"keyword"</span>: &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">                <span class="attr">"ignore_above"</span>: <span class="number">256</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"user"</span>: &#123;</span><br><span class="line">            <span class="attr">"properties"</span>: &#123;</span><br><span class="line">              <span class="attr">"age"</span>: &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"long"</span></span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">"gender"</span>: &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">                <span class="attr">"fields"</span>: &#123;</span><br><span class="line">                  <span class="attr">"keyword"</span>: &#123;</span><br><span class="line">                    <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">                    <span class="attr">"ignore_above"</span>: <span class="number">256</span></span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">"id"</span>: &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">                <span class="attr">"fields"</span>: &#123;</span><br><span class="line">                  <span class="attr">"keyword"</span>: &#123;</span><br><span class="line">                    <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">                    <span class="attr">"ignore_above"</span>: <span class="number">256</span></span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">"name"</span>: &#123;</span><br><span class="line">                <span class="attr">"properties"</span>: &#123;</span><br><span class="line">                  <span class="attr">"first"</span>: &#123;</span><br><span class="line">                    <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">                    <span class="attr">"fields"</span>: &#123;</span><br><span class="line">                      <span class="attr">"keyword"</span>: &#123;</span><br><span class="line">                        <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">                        <span class="attr">"ignore_above"</span>: <span class="number">256</span></span><br><span class="line">                      &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;,</span><br><span class="line">                  <span class="attr">"full"</span>: &#123;</span><br><span class="line">                    <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">                    <span class="attr">"fields"</span>: &#123;</span><br><span class="line">                      <span class="attr">"keyword"</span>: &#123;</span><br><span class="line">                        <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">                        <span class="attr">"ignore_above"</span>: <span class="number">256</span></span><br><span class="line">                      &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;,</span><br><span class="line">                  <span class="attr">"last"</span>: &#123;</span><br><span class="line">                    <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">                    <span class="attr">"fields"</span>: &#123;</span><br><span class="line">                      <span class="attr">"keyword"</span>: &#123;</span><br><span class="line">                        <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">                        <span class="attr">"ignore_above"</span>: <span class="number">256</span></span><br><span class="line">                      &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内部对象如何索引"><a href="#内部对象如何索引" class="headerlink" title="内部对象如何索引"></a>内部对象如何索引</h3><p>Lucene 不理解内部对象。 Lucene 文档是由一组键值对列表组成的。为了能让 Elasticsearch 有效地索引内部类，它把我们的文档转化成这样：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"tweet"</span>:            [elasticsearch, flexible, very],</span><br><span class="line">    <span class="attr">"user.id"</span>:          [@johnsmith],</span><br><span class="line">    <span class="attr">"user.gender"</span>:      [male],</span><br><span class="line">    <span class="attr">"user.age"</span>:         [<span class="number">26</span>],</span><br><span class="line">    <span class="attr">"user.name.full"</span>:   [john, smith],</span><br><span class="line">    <span class="attr">"user.name.first"</span>:  [john],</span><br><span class="line">    <span class="attr">"user.name.last"</span>:   [smith]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此为龙果学院课程学习笔记，记录以后翻看&lt;/p&gt;
&lt;p&gt;前面讲了Document的增删改查和集群原理，接下来就是ES的重头戏了，搜索。&lt;/p&gt;
&lt;h1 id=&quot;search结果解析&quot;&gt;&lt;a href=&quot;#search结果解析&quot; class=&quot;headerlink&quot; title=&quot;_search结果解析&quot;&gt;&lt;/a&gt;_search结果解析&lt;/h1&gt;&lt;p&gt;当发出一个搜索请求的时候，会拿到很多结果，下面说一下搜索结果里的各种数据，都代表了什么含义。&lt;br&gt;
    
    </summary>
    
      <category term="ElasticSearch" scheme="http://www.saily.top/categories/ElasticSearch/"/>
    
    
      <category term="ElasticSearch" scheme="http://www.saily.top/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch04-Document、Index详解和操作以及并发问题</title>
    <link href="http://www.saily.top/2018/08/19/elasticsearch/elasticSearch04/"/>
    <id>http://www.saily.top/2018/08/19/elasticsearch/elasticSearch04/</id>
    <published>2018-08-19T09:40:30.000Z</published>
    <updated>2018-09-19T03:36:04.356Z</updated>
    
    <content type="html"><![CDATA[<p>此为龙果学院课程学习笔记，记录以后翻看</p><h1 id="Document元数据"><a href="#Document元数据" class="headerlink" title="Document元数据"></a>Document元数据</h1><h2 id="index元数据"><a href="#index元数据" class="headerlink" title="_index元数据"></a>_index元数据</h2><ol><li>代表一个document存放在哪个index中。</li><li>类似的数据放在一个索引，非类似的数据放不同索引：product index（包含了所有的商品），sales index（包含了所有的商品销售数据），inventory index（包含了所有库存相关的数据）。如果你把比如product，sales，human resource（employee），全都放在一个大的index里面，比如company index，就不合适。<a id="more"></a></li><li>index中包含了很多类似的document：类似是什么意思，其实指的就是这些document的fields很大一部分是相同的，比如你放了3个document，每个document的fields都完全不一样，这就不是类似了，就不太适合放到一个index里面去了。</li><li>索引名称必须是小写的，不能用下划线开头，不能包含逗号，例如：product，website，blog</li></ol><h2 id="type元数据"><a href="#type元数据" class="headerlink" title="_type元数据"></a>_type元数据</h2><ol><li>代表document属于index中的哪个类别（type）</li><li>一个索引通常会划分为多个type，逻辑上对index中有些许不同的几类数据进行分类：因为一批相同的数据，可能有很多相同的fields，但是还是可能会有一些轻微的不同，可能会有少数fields是不一样的，举个例子，比如商品，可能划分为电子商品，生鲜商品，日化商品，等等。</li><li>type名称可以是大写或者小写，但是同时不能用下划线开头，不能包含逗号</li></ol><h2 id="id元数据"><a href="#id元数据" class="headerlink" title="_id元数据"></a>_id元数据</h2><ol><li>代表document的唯一标识，与index和type一起，可以唯一标识和定位一个document</li><li>我们可以手动指定document的id（put /index/type/id），也可以不指定，由es自动为我们创建一个id</li></ol><h3 id="手动指定document-id"><a href="#手动指定document-id" class="headerlink" title="手动指定document id"></a>手动指定document id</h3><h4 id="根据应用情况看是否满足手动指定document-id的前提"><a href="#根据应用情况看是否满足手动指定document-id的前提" class="headerlink" title="根据应用情况看是否满足手动指定document id的前提"></a>根据应用情况看是否满足手动指定document id的前提</h4><p>一般来说，是从某些其他的系统中导入一些数据到es时，会采取这种方式，就是使用系统中已有数据的唯一标识，作为es中document的id。</p><blockquote><p>举个例子，我们现在在开发一个电商网站，做搜索功能，或者是OA系统的做员工检索功能。这个时候，数据首先会在网站系统或者IT系统内部的数据库中，会先有一份，此时就肯定会有一个数据库的primary key（自增长，UUID，或者是业务编号）。如果将数据导入到es中，此时就比较适合采用数据在数据库中已有的primary key。</p></blockquote><p>但是如果是在做一个系统，这个系统主要的数据存储就是es，也就是数据产生出来以后，可能就没有id，直接就存es。那么这个时候，可能就不太适合手动指定document id的形式了，因为你也不知道id应该是什么，此时可以采取下面的让es自动生成id的方式。</p><h4 id="put-index-type-id"><a href="#put-index-type-id" class="headerlink" title="put /index/type/id"></a>put /index/type/id</h4><p>手动指定ID的方式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT /test_index/test_type/2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"test_content"</span>: <span class="string">"my test"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自动生成document-id"><a href="#自动生成document-id" class="headerlink" title="自动生成document id"></a>自动生成document id</h3><h4 id="post-index-type"><a href="#post-index-type" class="headerlink" title="post /index/type"></a>post /index/type</h4><p>后面不加ID，ES会为我们自动生成ID</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /test_index/test_type</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"test_content"</span>: <span class="string">"my test"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"AVp4RN0bhjxldOOnBxaE"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"result"</span>: <span class="string">"created"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"created"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="GUID"><a href="#GUID" class="headerlink" title="GUID"></a>GUID</h4><p>自动生成的id，它的长度为20个字符，是URL安全的，基于base64编码。基于GUID的算法，分布式系统并行生成时不可能会发生冲突。</p><h2 id="source元数据"><a href="#source元数据" class="headerlink" title="_source元数据"></a>_source元数据</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">PUT /test_index/test_type/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"test_field1"</span>: <span class="string">"test field1"</span>,</span><br><span class="line">  <span class="attr">"test_field2"</span>: <span class="string">"test field2"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET /test_index/test_type/1</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"found"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"_source"</span>: &#123;</span><br><span class="line">    <span class="attr">"test_field1"</span>: <span class="string">"test field1"</span>,</span><br><span class="line">    <span class="attr">"test_field2"</span>: <span class="string">"test field2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>_source元数据：在创建一个document的时候，传入的json传在默认情况下，在get的时候，会原封不动的给我们返回回来。</p><p>如果要定制返回的结果，可以加<code>_srouce</code>参数，指定返回哪些字段，多个字段用逗号分隔。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET /test_index/test_type/1?_source=test_field1,test_field2</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"found"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"_source"</span>: &#123;</span><br><span class="line">    <span class="attr">"test_field2"</span>: <span class="string">"test field2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Document的创建、替换和删除"><a href="#Document的创建、替换和删除" class="headerlink" title="Document的创建、替换和删除"></a>Document的创建、替换和删除</h1><h2 id="document的全量替换"><a href="#document的全量替换" class="headerlink" title="document的全量替换"></a>document的全量替换</h2><ol><li>语法与创建文档是一样的，如果document id不存在，那么就是创建；如果document id已经存在，那么就是全量替换操作，替换document的json串内容。</li><li>其实document是不可变的，如果要修改document的内容，第一种方式就是全量替换，直接对document重新建立索引，替换里面所有的内容。</li><li>es会将老的document标记为deleted，然后新增我们给定的一个document，当我们创建越来越多的document的时候，es会在适当的时机在后台自动删除标记为deleted的document。</li></ol><h2 id="document的强制创建"><a href="#document的强制创建" class="headerlink" title="document的强制创建"></a>document的强制创建</h2><p>创建文档与全量替换的语法是一样的，有时我们只是想新建文档，不想替换文档，如果强制进行创建呢？</p><p><code>PUT /index/type/id?op_type=create，PUT /index/type/id/_create</code></p><p>但是强制创建一个已经存在的Document会得到一个冲突的错误。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"error"</span>: &#123;</span><br><span class="line">    <span class="attr">"root_cause"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"version_conflict_engine_exception"</span>,</span><br><span class="line">        <span class="attr">"reason"</span>: <span class="string">"[test_type][1]: version conflict, document already exists (current version [1])"</span>,</span><br><span class="line">        <span class="attr">"index_uuid"</span>: <span class="string">"arBg_MfmRWCMSKQHqGIrDw"</span>,</span><br><span class="line">        <span class="attr">"shard"</span>: <span class="string">"3"</span>,</span><br><span class="line">        <span class="attr">"index"</span>: <span class="string">"test_index1"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"version_conflict_engine_exception"</span>,</span><br><span class="line">    <span class="attr">"reason"</span>: <span class="string">"[test_type][1]: version conflict, document already exists (current version [1])"</span>,</span><br><span class="line">    <span class="attr">"index_uuid"</span>: <span class="string">"arBg_MfmRWCMSKQHqGIrDw"</span>,</span><br><span class="line">    <span class="attr">"shard"</span>: <span class="string">"3"</span>,</span><br><span class="line">    <span class="attr">"index"</span>: <span class="string">"test_index1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="number">409</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="document的删除"><a href="#document的删除" class="headerlink" title="document的删除"></a>document的删除</h2><p><code>DELETE /index/type/id</code></p><p>ES不会立即物理删除，只会将其标记为deleted，当数据越来越多的时候，在后台自动删除。</p><h1 id="Elasticsearch并发冲突问题"><a href="#Elasticsearch并发冲突问题" class="headerlink" title="Elasticsearch并发冲突问题"></a>Elasticsearch并发冲突问题</h1><p>多个线程去同时访问es中的一份数据，然后各自去修改之后更新到es，由于线程的先后顺序不同，可能会导致后续的修改覆盖掉之前的修改，显然一些场景下我们是不允许发生这种并发冲突的问题，例如电商库存的修改等</p><h2 id="悲观锁和乐观锁并发控制方案"><a href="#悲观锁和乐观锁并发控制方案" class="headerlink" title="悲观锁和乐观锁并发控制方案"></a>悲观锁和乐观锁并发控制方案</h2><p>数据库管理系统（DBMS）中的并发控制的任务是确保在多个事务同时存取数据库中同一数据时不破坏事务的隔离性和统一性以及数据库的统一性。</p><p>乐观并发控制(乐观锁)和悲观并发控制（悲观锁）是并发控制主要采用的技术手段。<br>不要把他们和数据中提供的锁机制（行锁、表锁、排他锁、共享锁）混为一谈。其实，在DBMS中，悲观锁正是利用数据库本身提供的锁机制来实现的。</p><h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><ul><li><p>如何理解悲观锁 </p><p>  它指的是对数据被外界（包括本系统当前的其他事务，以及来自外部系统的事务处理）修改持保守态度(悲观)，因此，在整个数据处理过程中，将数据处于锁定状态。<br>  在对任意记录进行修改前，先尝试为该记录加上排他锁（exclusive locking）。<br>  如果加锁失败，说明该记录正在被修改，那么当前查询可能要等待或者抛出异常。 具体响应方式由开发者根据实际需要决定。<br>  如果成功加锁，那么就可以对记录做修改，事务完成后就会解锁了。<br>  其间如果有其他对该记录做修改或加排他锁的操作，都会等待我们解锁或直接抛出异常。</p></li><li><p>优点与不足<br>  悲观锁的优点：方便，直接加锁，对应用程序来说透明，不需要额外的操作；<br>  悲观锁的缺点：并发能力很低，同一时间只能有一条线程操作数据。</p><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3></li><li><p>如何理解乐观锁<br>  它假设多用户并发的事务在处理时不会彼此互相影响，各事务能够在不产生锁的情况下处理各自影响的那部分数据。在提交数据更新之前，每个事务会先检查在该事务读取数据后，有没有其他事务又修改了该数据。如果其他事务有更新的话，正在提交的事务会进行回滚。</p></li><li>与悲观锁区别<br>  相对于悲观锁，在对数据库进行处理的时候，乐观锁并不会使用数据库提供的锁机制。一般的实现乐观锁的方式就是记录数据版本。<br>  <strong>数据版本</strong>是为数据增加的一个版本标识。当读取数据时，将版本标识的值一同读出，数据每更新一次，同时对版本标识进行更新。当我们提交更新的时候，判断数据库表对应记录的当前版本信息与第一次取出来的版本标识进行比对，如果数据库表当前版本号与第一次取出来的版本标识值相等，则予以更新，否则认为是过期数据。<br>  实现数据版本有两种方式，第一种是使用版本号，第二种是使用时间戳。</li><li>优点与不足<br>  乐观锁的优点：并发能力很高，不给数据加锁，可以进行大量线程并发操作；<br>  乐观锁的缺点：麻烦，每次更新的时候都要先比对版本号，然后可能需要重新加载数据，再次修改，在写；这个过程可能要重复好几次。</li></ul><h2 id="基于-version字段进行乐观锁并发控制"><a href="#基于-version字段进行乐观锁并发控制" class="headerlink" title="基于_version字段进行乐观锁并发控制"></a>基于_version字段进行乐观锁并发控制</h2><h3 id="version元数据"><a href="#version元数据" class="headerlink" title="_version元数据"></a>_version元数据</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PUT /test_index/test_type/6</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"test_field"</span>: <span class="string">"test test"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"6"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"result"</span>: <span class="string">"created"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"created"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一次创建一个document的时候，它的_version内部版本号就是1；以后，每次对这个document执行修改或者删除操作，都会对这个_version版本号自动加1；哪怕是删除，也会对这条数据的版本号加1</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"found"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"6"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="attr">"result"</span>: <span class="string">"deleted"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们会发现，在删除一个document之后，可以从一个侧面证明，它不是立即物理删除掉的，因为它的一些版本号等信息还是保留着的。先删除一条document，再重新创建这条document，其实会在delete version基础之上，再把version号加1。</p><blockquote><p>ES内部很多类似于副本集的同步请求，都是多线程异步的，也就意味着多个修改请求之间是乱序的，所以ES内部也是采用了乐观锁的方案，基于version版本号去进行并发控制。</p></blockquote><h2 id="并发控制方案"><a href="#并发控制方案" class="headerlink" title="并发控制方案"></a>并发控制方案</h2><h3 id="上机动手实战演练基于-version进行乐观锁并发控制"><a href="#上机动手实战演练基于-version进行乐观锁并发控制" class="headerlink" title="上机动手实战演练基于_version进行乐观锁并发控制"></a>上机动手实战演练基于_version进行乐观锁并发控制</h3><p>1、先模拟一条数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT /test_index/test_type/7</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"test_field"</span>: <span class="string">"test test"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、模拟两个客户端，都获取到了同一条数据（开2个kibana的网页）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET test_index/test_type/7</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"7"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"found"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"_source"</span>: &#123;</span><br><span class="line">    <span class="attr">"test_field"</span>: <span class="string">"test test"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、其中一个客户端先更新了数据</p><p>更新时带上了数据的版本号，确保ES中数据的版本号跟客户端的版本号是相同的才能修改。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PUT /test_index/test_type/7?version=1 </span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"test_field"</span>: <span class="string">"test client 1"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"7"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"result"</span>: <span class="string">"updated"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"created"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、另外一个客户端尝试基于version=1的数据去进行修改，也带上version版本号，进行乐观锁的并发控制</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">PUT /test_index/test_type/7?version=1 </span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"test_field"</span>: <span class="string">"test client 2"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"error"</span>: &#123;</span><br><span class="line">    <span class="attr">"root_cause"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"version_conflict_engine_exception"</span>,</span><br><span class="line">        <span class="attr">"reason"</span>: <span class="string">"[test_type][7]: version conflict, current version [2] is different than the one provided [1]"</span>,</span><br><span class="line">        <span class="attr">"index_uuid"</span>: <span class="string">"I8nYYk8URXmXpcx0SS7wyw"</span>,</span><br><span class="line">        <span class="attr">"shard"</span>: <span class="string">"3"</span>,</span><br><span class="line">        <span class="attr">"index"</span>: <span class="string">"test_index"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"version_conflict_engine_exception"</span>,</span><br><span class="line">    <span class="attr">"reason"</span>: <span class="string">"[test_type][7]: version conflict, current version [2] is different than the one provided [1]"</span>,</span><br><span class="line">    <span class="attr">"index_uuid"</span>: <span class="string">"I8nYYk8URXmXpcx0SS7wyw"</span>,</span><br><span class="line">    <span class="attr">"shard"</span>: <span class="string">"3"</span>,</span><br><span class="line">    <span class="attr">"index"</span>: <span class="string">"test_index"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="number">409</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>版本冲突，更新失败。</p><p>5、在乐观锁成功阻止并发问题之后，尝试正确的完成更新</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET /test_index/test_type/7</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"7"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"found"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"_source"</span>: &#123;</span><br><span class="line">    <span class="attr">"test_field"</span>: <span class="string">"test client 1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先去查询ES里当前数据的版本号，然后带上最新的版本号去修改数据，可能这个步骤会需要反复执行好几次才能成功，特别是在多线程并发更新同一条数据很频繁的情况下。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PUT /test_index/test_type/7?version=2 </span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"test_field"</span>: <span class="string">"test client 2"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"7"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">"result"</span>: <span class="string">"updated"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"created"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="上机动手实战演练基于external-version进行乐观锁并发控制"><a href="#上机动手实战演练基于external-version进行乐观锁并发控制" class="headerlink" title="上机动手实战演练基于external version进行乐观锁并发控制"></a>上机动手实战演练基于external version进行乐观锁并发控制</h3><p>ES提供了一个功能可以让我们不用它提供的内部_version版本号来进行并发控制，我们可以基于自己维护的一个本版好类进行并发控制。举个例子，假如你的数据在MYSQL里也有一份，然后在MYSQL里维护了一个版本号，无论是怎么生成的，这个时候进行乐观锁并发控制，可能并不是想要用es内部的_version来进行控制，而是用自己维护的那个version来进行控制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?version=1</span><br><span class="line">?version=1&amp;version_type=external</span><br></pre></td></tr></table></figure><blockquote><p>区别：只有当你提供的version与es中的_version一样的时候才能修改，否则就报错；当version_type=external的时候，只要你提供的version比es中的_version大，就能完成修改。</p></blockquote><p>1、先构造一条数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PUT /test_index/test_type/8</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"test_field"</span>: <span class="string">"test"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"8"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"result"</span>: <span class="string">"created"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"created"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、模拟两个客户端同时查询到这条数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET /test_index/test_type/8</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"8"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"found"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"_source"</span>: &#123;</span><br><span class="line">    <span class="attr">"test_field"</span>: <span class="string">"test"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、第一个客户端先进行修改，此时客户端在自己的数据库中获取到了这条数据的最新版本号，比如说是3</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PUT /test_index/test_type/8?version=3&amp;version_type=external</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"test_field"</span>: <span class="string">"test client 1"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"8"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">"result"</span>: <span class="string">"updated"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"created"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、模拟第二个客户端，同时拿到了自己数据库中维护的那个版本号，也是3，同时基于version=3发起了修改</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">PUT /test_index/test_type/8?version=3&amp;version_type=external</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"test_field"</span>: <span class="string">"test client 2"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"error"</span>: &#123;</span><br><span class="line">    <span class="attr">"root_cause"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"version_conflict_engine_exception"</span>,</span><br><span class="line">        <span class="attr">"reason"</span>: <span class="string">"[test_type][8]: version conflict, current version [3] is higher or equal to the one provided [3]"</span>,</span><br><span class="line">        <span class="attr">"index_uuid"</span>: <span class="string">"I8nYYk8URXmXpcx0SS7wyw"</span>,</span><br><span class="line">        <span class="attr">"shard"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"index"</span>: <span class="string">"test_index"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"version_conflict_engine_exception"</span>,</span><br><span class="line">    <span class="attr">"reason"</span>: <span class="string">"[test_type][8]: version conflict, current version [3] is higher or equal to the one provided [3]"</span>,</span><br><span class="line">    <span class="attr">"index_uuid"</span>: <span class="string">"I8nYYk8URXmXpcx0SS7wyw"</span>,</span><br><span class="line">    <span class="attr">"shard"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="attr">"index"</span>: <span class="string">"test_index"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="number">409</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一样的，也是并发冲突，只不过这次是基于我们自己提供的version来控制的，而且报错的提示是必须大于等于3。</p><p>5、在并发冲突以后，重新基于新的版本号发起更新</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PUT /test_index/test_type/8?version=6&amp;version_type=external</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"test_field"</span>: <span class="string">"test client 2"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"8"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">6</span>,</span><br><span class="line">  <span class="attr">"result"</span>: <span class="string">"updated"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"created"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="partial-update"><a href="#partial-update" class="headerlink" title="partial update"></a>partial update</h1><p>partial update是修改文档的另一种方式</p><p>之前的PUT操作对应到应用程序中，每次的执行流程是这样的：</p><ol><li>应用程序先发起一个get请求，获取到document，展示到前台界面，供用户查看和修改</li><li>用户在前台界面修改数据，发送到后台</li><li>后台代码，会将用户修改的数据在内存中进行执行，然后封装好修改后的全量数据</li><li>然后发送PUT请求，到es中，进行全量替换</li><li>es将老的document标记为deleted，然后重新创建一个新的document</li></ol><p>partial update</p><p>post /index/type/id/_update<br>{<br>   “doc”: {<br>      “要修改的少数几个field即可，不需要全量的数据”<br>   }<br>}</p><p>看起来，好像就比较方便了，每次就传递少数几个发生修改的field即可，不需要将全量的document数据发送过去</p><h2 id="partial-update实现原理以及其优点"><a href="#partial-update实现原理以及其优点" class="headerlink" title="partial update实现原理以及其优点"></a>partial update实现原理以及其优点</h2><p>partial update直接将数据更新到document中就完成了修改，不用事先先发起一个GET请求数据进行修改然后在将修改后的数据发回去。</p><p>es内部：partial update的执行和全量替换一致。</p><ol><li>内部先get获取document</li><li>将更新的field更新到document的json中</li><li>将老的document标记为deleted</li><li>创建新的document</li></ol><p>优点：</p><ol><li>所有查询，修改和写回操作均发生在同一个shard内，避免了不必要的网络数据传输带来的开销，大大提升了性能（减少了两次请求，一次GET请求，一次回写请求）</li><li>减少修改和查询中的时间间隔，有效减少并发冲突的情况</li><li>内置乐观锁并发控制</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /test_index/test_type/id/_update?retry_on_conflict=2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"doc"</span>: &#123;</span><br><span class="line">    <span class="attr">"num"</span>:<span class="number">32</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果更新失败，则获取最新的版本号再次进行更新，最多重试retry_on_conflict指定的次数</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /test_index/test_type/11/_update?version=3</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"doc"</span>: &#123;</span><br><span class="line">    <span class="attr">"num"</span>:<span class="number">32</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PUT /test_index/test_type/10</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"test_field1"</span>: <span class="string">"test1"</span>,</span><br><span class="line">  <span class="attr">"test_field2"</span>: <span class="string">"test2"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST /test_index/test_type/10/_update</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"doc"</span>: &#123;</span><br><span class="line">    <span class="attr">"test_field2"</span>: <span class="string">"updated test2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h1><h2 id="批量查询"><a href="#批量查询" class="headerlink" title="批量查询"></a>批量查询</h2><p>如果一条一条的查询100条数据，那么就要发送100次网络请求，这个开销还是很大的<br>如果进行批量查询的话，查询100条数据，就只要发送1次网络请求，网络请求的性能开销缩减100倍。</p><p>ES提供了批量查询的API，它的mget的语法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">GET /_mget</span><br><span class="line">&#123;</span><br><span class="line">   <span class="attr">"docs"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">"_index"</span> : <span class="string">"test_index"</span>,</span><br><span class="line">         <span class="attr">"_type"</span> :  <span class="string">"test_type"</span>,</span><br><span class="line">         <span class="attr">"_id"</span> :    <span class="number">1</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">"_index"</span> : <span class="string">"test_index"</span>,</span><br><span class="line">         <span class="attr">"_type"</span> :  <span class="string">"test_type"</span>,</span><br><span class="line">         <span class="attr">"_id"</span> :    <span class="number">2</span></span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"docs"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">      <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">      <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">      <span class="attr">"found"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"_index"</span>: <span class="string">"test_index"</span>,</span><br><span class="line">      <span class="attr">"_type"</span>: <span class="string">"test_type"</span>,</span><br><span class="line">      <span class="attr">"_id"</span>: <span class="string">"2"</span>,</span><br><span class="line">      <span class="attr">"found"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、如果查询的document是一个index下的不同type种的话</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /test_index/_mget</span><br><span class="line">&#123;</span><br><span class="line">   <span class="attr">"docs"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">"_type"</span> :  <span class="string">"test_type"</span>,</span><br><span class="line">         <span class="attr">"_id"</span> :    <span class="number">1</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">"_type"</span> :  <span class="string">"test_type"</span>,</span><br><span class="line">         <span class="attr">"_id"</span> :    <span class="number">2</span></span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、如果查询的数据都在同一个index下的同一个type下，最简单了</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /test_index/test_type/_mget</span><br><span class="line">&#123;</span><br><span class="line">   <span class="attr">"ids"</span>: [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="批量增删改"><a href="#批量增删改" class="headerlink" title="批量增删改"></a>批量增删改</h2><p>ES对于批量增删改，是提供的bulk api。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST /_bulk</span><br><span class="line">&#123; <span class="attr">"delete"</span>: &#123; <span class="attr">"_index"</span>: <span class="string">"test_index"</span>, <span class="attr">"_type"</span>: <span class="string">"test_type"</span>, <span class="attr">"_id"</span>: <span class="string">"3"</span> &#125;&#125; </span><br><span class="line">&#123; <span class="attr">"create"</span>: &#123; <span class="attr">"_index"</span>: <span class="string">"test_index"</span>, <span class="attr">"_type"</span>: <span class="string">"test_type"</span>, <span class="attr">"_id"</span>: <span class="string">"12"</span> &#125;&#125;</span><br><span class="line">&#123; <span class="attr">"test_field"</span>: <span class="string">"test12"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>:  &#123; <span class="attr">"_index"</span>: <span class="string">"test_index"</span>, <span class="attr">"_type"</span>: <span class="string">"test_type"</span>, <span class="attr">"_id"</span>: <span class="string">"2"</span> &#125;&#125;</span><br><span class="line">&#123; <span class="attr">"test_field"</span>: <span class="string">"replaced test2"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"update"</span>: &#123; <span class="attr">"_index"</span>: <span class="string">"test_index"</span>, <span class="attr">"_type"</span>: <span class="string">"test_type"</span>, <span class="attr">"_id"</span>: <span class="string">"1"</span>, <span class="attr">"_retry_on_conflict"</span> : <span class="number">3</span>&#125; &#125;</span><br><span class="line">&#123; <span class="attr">"doc"</span> : &#123;<span class="attr">"test_field2"</span> : <span class="string">"bulk test1"</span>&#125; &#125;</span><br></pre></td></tr></table></figure><p>上面是一些例子，它的语法是每一个操作有两个json，语法如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"action"</span>: &#123;<span class="attr">"metadata"</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"data"</span>&#125;</span><br></pre></td></tr></table></figure><p>举例，比如你现在要创建一个文档，放bulk里面，看起来会是这样子的：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;"index": &#123;"_index": "test_index", "_type", "test_type", "_id": "1"&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"test_field1"</span>: <span class="string">"test1"</span>, <span class="attr">"test_field2"</span>: <span class="string">"test2"</span>&#125;</span><br></pre></td></tr></table></figure><p>bulk api提供了以下4种操作：</p><ol><li>delete：删除一个文档，只要1个json串就可以了</li><li>create：PUT /index/type/id/_create，强制创建</li><li>index：普通的put操作，可以是创建文档，也可以是全量替换文档</li><li>update：执行的partial update操作</li></ol><p>bulk api对json的语法，有严格的要求，每个json串不能换行，只能放一行，同时一个json串和一个json串之间，必须有一个换行。</p><p>bulk操作中，任意一个操作失败，是不会影响其他的操作的，但是在返回结果里，会告诉你异常日志</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST /test_index/_bulk</span><br><span class="line">&#123; <span class="attr">"delete"</span>: &#123; <span class="attr">"_type"</span>: <span class="string">"test_type"</span>, <span class="attr">"_id"</span>: <span class="string">"3"</span> &#125;&#125; </span><br><span class="line">&#123; <span class="attr">"create"</span>: &#123; <span class="attr">"_type"</span>: <span class="string">"test_type"</span>, <span class="attr">"_id"</span>: <span class="string">"12"</span> &#125;&#125;</span><br><span class="line">&#123; <span class="attr">"test_field"</span>:    <span class="string">"test12"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>:  &#123; <span class="attr">"_type"</span>: <span class="string">"test_type"</span> &#125;&#125;</span><br><span class="line">&#123; <span class="attr">"test_field"</span>:    <span class="string">"auto-generate id test"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>:  &#123; <span class="attr">"_type"</span>: <span class="string">"test_type"</span>, <span class="attr">"_id"</span>: <span class="string">"2"</span> &#125;&#125;</span><br><span class="line">&#123; <span class="attr">"test_field"</span>:    <span class="string">"replaced test2"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"update"</span>: &#123; <span class="attr">"_type"</span>: <span class="string">"test_type"</span>, <span class="attr">"_id"</span>: <span class="string">"1"</span>, <span class="attr">"_retry_on_conflict"</span> : <span class="number">3</span>&#125; &#125;</span><br><span class="line">&#123; <span class="attr">"doc"</span> : &#123;<span class="attr">"test_field2"</span> : <span class="string">"bulk test1"</span>&#125; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST /test_index/test_type/_bulk</span><br><span class="line">&#123; <span class="attr">"delete"</span>: &#123; <span class="attr">"_id"</span>: <span class="string">"3"</span> &#125;&#125; </span><br><span class="line">&#123; <span class="attr">"create"</span>: &#123; <span class="attr">"_id"</span>: <span class="string">"12"</span> &#125;&#125;</span><br><span class="line">&#123; <span class="attr">"test_field"</span>:    <span class="string">"test12"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>:  &#123; &#125;&#125;</span><br><span class="line">&#123; <span class="attr">"test_field"</span>: <span class="string">"auto-generate id test"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>:  &#123; <span class="attr">"_id"</span>: <span class="string">"2"</span> &#125;&#125;</span><br><span class="line">&#123; <span class="attr">"test_field"</span>: <span class="string">"replaced test2"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"update"</span>: &#123; <span class="attr">"_id"</span>: <span class="string">"1"</span>, <span class="attr">"_retry_on_conflict"</span> : <span class="number">3</span>&#125; &#125;</span><br><span class="line">&#123; <span class="attr">"doc"</span> : &#123;<span class="attr">"test_field2"</span> : <span class="string">"bulk test1"</span>&#125; &#125;</span><br></pre></td></tr></table></figure><h3 id="bulk-size最佳大小"><a href="#bulk-size最佳大小" class="headerlink" title="bulk size最佳大小"></a>bulk size最佳大小</h3><p>bulk request会加载到内存里，如果太大的话，性能反而会下降，因此需要反复尝试一个最佳的bulk size。一般从1000~5000条数据开始，尝试逐渐增加。另外，如果看大小的话，最好是在5~15MB之间。</p><h1 id="Document数据路由"><a href="#Document数据路由" class="headerlink" title="Document数据路由"></a>Document数据路由</h1><p>在ES中，一个index的数据会分散在多个分片(shard)中，所以当客户端创建Document的时候，需要决定这个Document放在ES的哪一个shard上，这个过程被称之为<strong>数据路由</strong>。</p><h2 id="路由算法"><a href="#路由算法" class="headerlink" title="路由算法"></a>路由算法</h2><p><code>shard = hash(routing) % number_of_primary_shards</code></p><p>举个例子，一个index有3个primary shard，P0，P1，P2。每次增删改查一个document的时候，都会带过来一个routing number，默认就是这个document的_id（可能是手动指定，也可能是自动生成）。所以routing = _id，假设_id=1，会将这个routing值，传入一个hash函数中，产出一个routing值的hash值，hash(routing) = 21。然后将hash函数产出的值对这个index的primary shard的数量求余数，21 % 3 = 0<br>就决定了，这个document就放在P0上。<strong>决定一个document在哪个shard上，最重要的一个值就是routing值，默认是_id，也可以手动指定，相同的routing值，每次过来，从hash函数中，产出的hash值一定是相同的</strong>。无论hash值是几，无论是什么数字，对<code>number_of_primary_shards</code>求余数，结果一定是在<code>0~number_of_primary_shards</code>-1之间这个范围内的，这里是0,1,2。</p><h2 id="id还是自定义routing值"><a href="#id还是自定义routing值" class="headerlink" title="_id还是自定义routing值"></a>_id还是自定义routing值</h2><p>默认的routing就是_id<br>也可以在发送请求的时候，手动指定一个routing值，比如<code>put /index/type/id?routing=user_id</code></p><p>手动指定routing value是很有用的，可以保证某一类document一定被路由到一个shard上去，那么在后续进行应用级别的负载均衡，以及提升批量读取的性能的时候，是很有帮助的。</p><blockquote><p>比如在实际的工作当中，如果大量的查询是基于某一个字段的查询，那么可以在添加数据的时候设置这个字段的ID为routing值，比如用户ID，这样在做查询和聚合的时候，ES只需要去一个shard里就能找到所有的数据，提升性能。</p></blockquote><h2 id="primary-shard数量不可变的谜底"><a href="#primary-shard数量不可变的谜底" class="headerlink" title="primary shard数量不可变的谜底"></a>primary shard数量不可变的谜底</h2><p>ES在创建index的时候设置了primary shard数量和replica shard数量，replica数量是可以修改的，但是primary shard的数量却不能修改。正是因为跟Document的路由公式有关，所以如果primary shard数量发生了变化，如果后面根据ID去查询一个数据，新的路由算法去计算分配，会发现根本找不到这个数据，间接导致数据丢失。</p><h1 id="Document增删改的内部原理"><a href="#Document增删改的内部原理" class="headerlink" title="Document增删改的内部原理"></a>Document增删改的内部原理</h1><p>客户端先选择一个节点发送请求，在一般的ES部署架构中，会有一个client节点，专门用来接收客户端的请求，它既不保存元数据，也不保存数据，只是协调请求转发和数据的聚合，分担master节点的压力。</p><p>节点对请求进行路由，将请求转发到路由以后的节点上，然后primary shard会在自己本地创建Document，建立索引，最后把响应结果返回给client。</p><p>所有的增删改操作，都只能由primary shard处理。</p><h1 id="写一致性原理"><a href="#写一致性原理" class="headerlink" title="写一致性原理"></a>写一致性原理</h1><p>我们在发送任何一个增删改操作的时候，比如说put /index/type/id，都可以带上一个consistency参数，指明我们想要的写一致性是什么？<br>put /index/type/id?consistency=quorum</p><ul><li>one：要求我们这个写操作，只要有一个primary shard是active活跃可用的，就可以执行</li><li>all：要求我们这个写操作，必须所有的primary shard和replica shard都是活跃的，才可以执行这个写操作</li><li>quorum：默认的值，要求所有的shard中，必须是大部分的shard都是活跃的，可用的，才可以执行这个写操作</li></ul><h2 id="quorum机制"><a href="#quorum机制" class="headerlink" title="quorum机制"></a>quorum机制</h2><p>写之前必须确保大多数shard都可用，那么大多数是多少？这里有一个算法：</p><blockquote><p>quroum=<code>int( (primary + number_of_replicas) / 2 ) + 1</code>，当<code>number_of_replicas&gt;1</code>时才生效</p></blockquote><p>举个例子，3个primary shard，<code>number_of_replicas</code>=1，总共有3 + 3 * 1 = 6个shard。</p><p><code>quorum = int( (3 + 1) / 2 ) + 1 = 3</code></p><p>所以，要求6个shard中至少有3个shard是active状态的，才可以执行这个写操作。</p><p>如果节点数量少于quorum数量，可能导致quorum不齐全，进而导致无法执行任何写操作。</p><p>比如3个primary shard，replica=1，要求至少3个shard是active，3个shard按照之前学习的shard&amp;replica机制，必须在不同的节点上(primary shard和replica shard不能放在一台机器上，同一个primary shard的replica shard也不能放在同一个机器上)，如果说只有1台机器的话，3个shard肯定都没法分配齐全，此时就可能会出现写操作无法执行的情况。</p><p>但是ES提供了一种特殊的处理场景，就是说当<code>number_of_replicas</code>&gt;1时才生效，因为假如说，你就一个primary shard，replica=1，此时就2个shard，套用公式算一下。</p><p>(1 + 1 / 2) + 1 = 2，要求必须有2个shard是活跃的，但是可能就1个node，此时就1个shard是活跃的，如果你不特殊处理的话，导致我们的单节点集群就无法工作。</p><p>quorum不齐全的时候，ES会等待，默认1分钟。等待期间，期望活跃的shard数量可以增加，最后实在不行，就会timeout。</p><p>我们其实可以在写操作的时候，加一个timeout参数，比如说put /index/type/id?timeout=30，这个就是自己去设定quorum不齐全的时候，es的timeout时长，可以缩短，也可以增长。</p><h1 id="ES查询原理"><a href="#ES查询原理" class="headerlink" title="ES查询原理"></a>ES查询原理</h1><p>对于读请求，coordinate node（协作节点）不一定会将请求转发到primary节点上去，因为replica也是可以服务读请求的，而且在转发的时候会采用轮询的负载均衡算法，让读请求均匀的转发到replica shard上。</p><p>如果Document正在建立索引的过程中，只在primary shard上存在，此时replica shard上没有，但是协调节点可能将请求转发到replica shard上，此时就会找不到这个Document。</p><h1 id="bulk-api原理"><a href="#bulk-api原理" class="headerlink" title="bulk api原理"></a>bulk api原理</h1><p>上面在学bulk api的时候，ES对json格式要求非常严格，格式紧凑，对换行也有要求。</p><p>1、bulk中的每个操作都可能要转发到不同的node的shard去执行</p><p>2、如果采用比较良好的json数组格式</p><p>允许任意的换行，整个可读性非常棒，读起来很爽，es拿到那种标准格式的json串以后，要按照下述流程去进行处理</p><ol><li>将json数组解析为JSONArray对象，这个时候，整个数据，就会在内存中出现一份一模一样的拷贝，一份数据是json文本，一份数据是JSONArray对象</li><li>解析json数组里的每个json，对每个请求中的document进行路由</li><li>为路由到同一个shard上的多个请求，创建一个请求数组</li><li>将这个请求数组序列化</li><li>将序列化后的请求数组发送到对应的节点上去</li></ol><p>3、耗费更多内存，更多的jvm gc开销</p><p>我们之前提到过bulk size最佳大小的那个问题，一般建议说在几千条，然后大小在10MB左右，所以可怕的事情来了。假设说现在100个bulk请求发送到了一个节点上去，然后每个请求是10MB，100个请求，就是1000MB = 1GB，然后每个请求的json都copy一份为jsonarray对象，此时内存中的占用就会翻倍，就会占用2GB的内存，甚至还不止。因为弄成jsonarray之后，还可能会多搞一些其他的数据结构，2GB+的内存占用。</p><p>占用更多的内存可能就会积压其他请求的内存使用量，比如说最重要的搜索请求，分析请求，等等，此时就可能会导致其他请求的性能急速下降。<br>另外的话，占用内存更多，就会导致java虚拟机的垃圾回收次数更多，跟频繁，每次要回收的垃圾对象更多，耗费的时间更多，导致es的java虚拟机停止工作线程的时间更多。</p><p>4、现在的奇特格式</p><p>{“action”: {“meta”}}\n<br>{“data”}\n<br>{“action”: {“meta”}}\n<br>{“data”}\n</p><ol><li>不用将其转换为json对象，不会出现内存中的相同数据的拷贝，直接按照换行符切割json</li><li>对每两个一组的json，读取meta，进行document路由</li><li>直接将对应的json发送到node上去</li></ol><p>5、最大的优势在于，不需要将json数组解析为一个JSONArray对象，形成一份大数据的拷贝，浪费内存空间，尽可能地保证性能</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此为龙果学院课程学习笔记，记录以后翻看&lt;/p&gt;
&lt;h1 id=&quot;Document元数据&quot;&gt;&lt;a href=&quot;#Document元数据&quot; class=&quot;headerlink&quot; title=&quot;Document元数据&quot;&gt;&lt;/a&gt;Document元数据&lt;/h1&gt;&lt;h2 id=&quot;index元数据&quot;&gt;&lt;a href=&quot;#index元数据&quot; class=&quot;headerlink&quot; title=&quot;_index元数据&quot;&gt;&lt;/a&gt;_index元数据&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;代表一个document存放在哪个index中。&lt;/li&gt;
&lt;li&gt;类似的数据放在一个索引，非类似的数据放不同索引：product index（包含了所有的商品），sales index（包含了所有的商品销售数据），inventory index（包含了所有库存相关的数据）。如果你把比如product，sales，human resource（employee），全都放在一个大的index里面，比如company index，就不合适。
    
    </summary>
    
      <category term="ElasticSearch" scheme="http://www.saily.top/categories/ElasticSearch/"/>
    
    
      <category term="ElasticSearch" scheme="http://www.saily.top/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>centos7安装redis4.0.10并进行生产环境部署</title>
    <link href="http://www.saily.top/2018/07/19/linux/redis-install/"/>
    <id>http://www.saily.top/2018/07/19/linux/redis-install/</id>
    <published>2018-07-19T15:24:16.000Z</published>
    <updated>2018-09-15T15:27:07.463Z</updated>
    
    <content type="html"><![CDATA[<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>直奔主题，官网下载redis最新版本（2018年07月19日）</p><p><a href="http://download.redis.io/releases/redis-4.0.10.tar.gz" target="_blank" rel="noopener">http://download.redis.io/releases/redis-4.0.10.tar.gz</a></p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>安装tcl</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install tcl</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="安装单机版Reids"><a href="#安装单机版Reids" class="headerlink" title="安装单机版Reids"></a>安装单机版Reids</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/<span class="built_in">local</span>/redis &amp;&amp; <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/redis</span><br><span class="line">wget http://download.redis.io/releases/redis-4.0.10.tar.gz</span><br><span class="line">tar -zxvf redis-4.0.10.tar.gz</span><br><span class="line"><span class="built_in">cd</span> redis-4.0.10</span><br><span class="line">make &amp;&amp; make <span class="built_in">test</span> &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>最后一步可能需要等的有点久，安装完成以后就开始进行生产环境配置。</p><h1 id="Redis生产环境启动方案"><a href="#Redis生产环境启动方案" class="headerlink" title="Redis生产环境启动方案"></a>Redis生产环境启动方案</h1><ol><li>redis的<code>utils</code>目录下，有个<code>redis_init_script</code>脚本</li><li><p>将<code>redis_init_script</code>脚本拷贝到linux的<code>/etc/init.d</code>目录中，将<code>redis_init_script</code>重命名为<code>redis_6370</code>，<code>6370</code>是我们希望这个redis实例监听的端口号</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/<span class="built_in">local</span>/redis/redis-4.0.10/utils/redis_init_scrip /etc/init.d/redis_6370</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li>修改<code>redis_6370</code>脚本的第6行的REDISPORT，设置为相同的端口号（默认是6379）</li><li>创建两个目录：/etc/redis（存放redis的配置文件），/var/redis/6370（存放redis的持久化文件）</li><li><p>修改redis配置文件（默认在根目录下，redis.conf），拷贝到/etc/redis目录中，修改名称为6370.conf</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/<span class="built_in">local</span>/redis/redis-4.0.10/redis.conf /etc/redis/6370.conf</span><br></pre></td></tr></table></figure></li></ol><ol start="6"><li><p>修改redis.conf中的部分配置为生产环境</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 让redis以daemon进程运行</span></span><br><span class="line">daemonizeyes</span><br><span class="line"><span class="comment"># 设置redis的pid文件位置</span></span><br><span class="line">pidfile/var/run/redis_6370.pid </span><br><span class="line"><span class="comment"># 设置redis的监听端口号</span></span><br><span class="line">port6370</span><br><span class="line"><span class="comment"># 设置持久化文件的存储位置</span></span><br><span class="line">dir /var/redis/6370</span><br><span class="line"><span class="comment"># 打开数据持久化</span></span><br><span class="line">appendonly  yes </span><br><span class="line"><span class="comment"># 设置密码</span></span><br><span class="line">requirepass yourpass   </span><br><span class="line"><span class="comment"># 设置连接Redis的地址</span></span><br><span class="line"><span class="comment"># 如果提供给其他机器访问，请在此处设置IP为机器IP</span></span><br><span class="line"><span class="built_in">bind</span>  127.0.0.1</span><br></pre></td></tr></table></figure></li><li><p>启动redis</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/init.d/</span><br><span class="line">chmod 777 redis_6370</span><br><span class="line">./redis_6370 start</span><br></pre></td></tr></table></figure></li><li><p>确认redis进程是否启动</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep redis</span><br></pre></td></tr></table></figure></li><li><p>让redis跟随系统启动自动启动，在<code>/etc/init.d/redis_6370</code>脚本中，最上面，加入两行注释</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"># chkconfig:   2345 90 10</span><br><span class="line"># description:  Redis is a persistent key-value database</span><br></pre></td></tr></table></figure><p> 然后执行命令:</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig redis_6370 on</span><br></pre></td></tr></table></figure></li></ol><h1 id="redis-cli测试"><a href="#redis-cli测试" class="headerlink" title="redis-cli测试"></a>redis-cli测试</h1><h2 id="PING"><a href="#PING" class="headerlink" title="PING"></a>PING</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -p 6370 -a yourpass PING</span><br><span class="line">PONG</span><br></pre></td></tr></table></figure><h2 id="停机"><a href="#停机" class="headerlink" title="停机"></a>停机</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 127.0.0.1 -p 6370 SHUTDOWN</span><br></pre></td></tr></table></figure><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -p 6370 </span><br><span class="line">127.0.0.1:6370&gt; auth yourpass</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6370&gt; PING</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6370&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6370&gt; get k1</span><br><span class="line"><span class="string">"v1"</span></span><br></pre></td></tr></table></figure><p>是不是很简单明了？文章到此结束。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h1&gt;&lt;p&gt;直奔主题，官网下载redis最新版本（2018年07月19日）&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://download.redis.io/releases/redis-4.0.10.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://download.redis.io/releases/redis-4.0.10.tar.gz&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h1&gt;&lt;p&gt;安装tcl&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum install tcl&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="redis" scheme="http://www.saily.top/categories/redis/"/>
    
    
      <category term="redis" scheme="http://www.saily.top/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch03-集群和架构讲解</title>
    <link href="http://www.saily.top/2018/06/20/elasticsearch/elasticSearch03/"/>
    <id>http://www.saily.top/2018/06/20/elasticsearch/elasticSearch03/</id>
    <published>2018-06-20T00:57:00.000Z</published>
    <updated>2018-08-25T08:13:19.672Z</updated>
    
    <content type="html"><![CDATA[<p>此为龙果学院课程学习笔记，记录以后翻看</p><h2 id="ES基础分布式架构"><a href="#ES基础分布式架构" class="headerlink" title="ES基础分布式架构"></a>ES基础分布式架构</h2><h3 id="Elasticsearch对复杂分布式机制的透明隐藏特性"><a href="#Elasticsearch对复杂分布式机制的透明隐藏特性" class="headerlink" title="Elasticsearch对复杂分布式机制的透明隐藏特性"></a>Elasticsearch对复杂分布式机制的透明隐藏特性</h3><p>Elasticsearch是一套分布式的系统，分布式就是为了应对大数据量。它隐藏了复杂的分布式机制，其中有几个很重要的机制和概念。</p><ul><li>分片机制（之前将一些document插入到es集群中去，不用关心数据怎么进行分片的，数据到哪个shard中去，这是ES自动完成的）<a id="more"></a></li><li><p>cluster discovery（集群发现机制：在第一篇文章中做那个集群status从yellow转green的实验里，直接启动了第二个es进程，那个进程就作为一个node自动就发现了集群，并且加入了进去，还接受了部分数据）</p></li><li><p>shard负载均衡（举例，假设现在有3个节点，总共有25个shard要分配到3个节点上去，es会自动进行均匀分配，以保持每个节点的均衡的读写负载请求）</p></li></ul><p>总结下来就是：分片副本，请求路由，集群扩容，分片重分配</p><h3 id="Elasticsearch的垂直扩容与水平扩容"><a href="#Elasticsearch的垂直扩容与水平扩容" class="headerlink" title="Elasticsearch的垂直扩容与水平扩容"></a>Elasticsearch的垂直扩容与水平扩容</h3><ul><li><p>垂直扩容：采购更强大的服务器，成本非常高昂，而且会有瓶颈，假设世界上最强大的服务器容量就是10T，但是当你的总数据量达到5000T的时候，你要采购多少台最强大的服务器？</p></li><li><p>水平扩容：这是业界经常采用的方案，采购越来越多的普通服务器，虽然性能比较一般，但是很多普通服务器组织在一起，就能构成强大的计算和存储能力。</p></li></ul><p>例如：</p><p>普通服务器：1T，1万一台，需要100万<br>强大服务器：10T，50万一台，需要500万</p><p>一般是采用水平扩容的方式</p><h3 id="增减或减少节点时的数据rebalance"><a href="#增减或减少节点时的数据rebalance" class="headerlink" title="增减或减少节点时的数据rebalance"></a>增减或减少节点时的数据rebalance</h3><p>每当增加或者减少节点的时候，ES会自动的负载均衡保持每个节点的shard负载均衡，保证每台服务器的分片数量均衡。</p><h3 id="master节点作用"><a href="#master节点作用" class="headerlink" title="master节点作用"></a>master节点作用</h3><p>ES集群都有一个master节点，用来管理ES集群的元数据：比如索引的创建和删除，维护索引的元数据；节点的增加和移除等等。</p><p>默认情况下会自动的选出一台节点作为master节点，master不承载请求，所以没有单点瓶颈。</p><h3 id="节点对等的分布式架构"><a href="#节点对等的分布式架构" class="headerlink" title="节点对等的分布式架构"></a>节点对等的分布式架构</h3><p>所有的节点都可以接受请求，也可以存储数据，如果数据不在自己的节点上，就去别的节点将数据找到然后返回给客户端。</p><ol><li>节点对等，每个节点都能接收所有的请求</li><li>自动请求路由</li><li>响应收集</li></ol><p><img src="/img/es/03/ES的基础分布式架构.png" alt="ES的基础分布式架构"></p><h2 id="shard-amp-replica机制再次梳理"><a href="#shard-amp-replica机制再次梳理" class="headerlink" title="shard&amp;replica机制再次梳理"></a>shard&amp;replica机制再次梳理</h2><ol><li>一个index包含一个或者多个shard</li><li>每个shard都是一个最小工作单元，它承载部分数据，每一个都是lucene实例，具有完整的建立索引和处理请求的能力。</li><li>增减节点时，shard会自动在nodes中负载均衡</li><li>primary shard和replica shard，每个document肯定只存在于某一个primary shard以及其对应的replica shard中，不可能存在于多个primary shard。</li><li>replica shard是primary shard的副本，负责容错，以及承担读请求负载。</li><li>primary shard的数量在创建索引的时候就固定了，replica shard的数量可以随时修改。</li><li>primary shard的默认数量是5，replica默认是1，默认有10个shard，5个primary shard，5个replica shard</li><li>primary shard不能和自己的replica shard放在同一个节点上（否则节点宕机，primary shard和副本都丢失，起不到容错的作用），但是可以和其他primary shard的replica shard放在同一个节点上。</li></ol><h2 id="单node环境下创建index是什么样子的"><a href="#单node环境下创建index是什么样子的" class="headerlink" title="单node环境下创建index是什么样子的"></a>单node环境下创建index是什么样子的</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT /test_index</span><br><span class="line">&#123;</span><br><span class="line">   &quot;settings&quot; : &#123;</span><br><span class="line">      &quot;number_of_shards&quot; : 3,</span><br><span class="line">      &quot;number_of_replicas&quot; : 1</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>单node环境下，创建一个index，它有3个primary shard，3个replica shard</li><li><p>集群status是yellow</p><p> <img src="/img/es/03/单机集群状态.png" alt="单机集群状态"></p></li><li><p>这个时候，只会将3个primary shard分配到仅有的一个node上去，另外3个replica shard是无法分配的（primary shard不能和自己的replica shard放在同一个节点上，集群状态是yellow的原因）</p></li><li>集群可以正常工作，但是一旦出现节点宕机，数据全部丢失，而且集群不可用，无法承接任何请求</li></ol><h2 id="2个node环境下replica-shard是如何分配的"><a href="#2个node环境下replica-shard是如何分配的" class="headerlink" title="2个node环境下replica shard是如何分配的"></a>2个node环境下replica shard是如何分配的</h2><ol><li>replica shard分配：5个primary shard，5个replica shard，2个node</li><li>primary和replica的数据是同步的</li><li>primary/replica都可能会收到读请求</li></ol><p><img src="/img/es/03/2个节点的分片和副本分配.png" alt="2个节点的分片和副本分配"></p><p>上面有灰色边框的是primary shard</p><h2 id="横向扩容的过程，如何超出扩容极限，以及如何提升容错性"><a href="#横向扩容的过程，如何超出扩容极限，以及如何提升容错性" class="headerlink" title="横向扩容的过程，如何超出扩容极限，以及如何提升容错性"></a>横向扩容的过程，如何超出扩容极限，以及如何提升容错性</h2><ol><li>如果本身是2个节点，扩容1个节点后primary&amp;replica会自动负载均衡。6个shard，3 primary，3 replica会平均的被分配3个节点中。</li><li>扩容后每个node有更少的shard，意味着IO/CPU/Memory资源给每个shard分配更多，每个shard性能更好。</li><li>扩容的极限是什么？如果是6个shard（3 primary，3 replica），那么最多扩容到6台机器，每个shard可以占用单台服务器的所有资源，这个时候性能最好。</li><li>如果要超出扩容极限，那就动态修改replica数量，9个shard（3primary，6 replica），扩容到9台机器，比3台机器时，拥有3倍的读吞吐量。</li><li>在3台机器的情况下，9个shard（3 primary，6 replica），虽然资源更少，但是容错性更好，最多容纳2台机器宕机，如果是配置的6个shard那么只能容纳1台机器宕机。</li><li>这里的这些知识点综合起来看，一方面是说扩容的原理，怎么扩容，怎么提升系统整体吞吐量；另一方面要考虑到系统的容错性，怎么保证提高容错性，让尽可能多的服务器宕机，保证数据不丢失。</li></ol><h2 id="Elasticsearch容错机制：master选举，replica容错，数据恢复"><a href="#Elasticsearch容错机制：master选举，replica容错，数据恢复" class="headerlink" title="Elasticsearch容错机制：master选举，replica容错，数据恢复"></a>Elasticsearch容错机制：master选举，replica容错，数据恢复</h2><p>假设我们一共有9 shard，3个node。</p><ol><li>如果master node宕机了，那么ES集群会自动进行master选举，自动选举另外一个node成为新的master，这个时候集群状态会变成red。</li><li>replica容错：新的master将replica shard提升为primary shard，集群状态变成yellow。</li><li>然后我们再重启宕机的node，master会将确实的副本复制到该node，会使用原有的shard并同步宕机后的修改，然后集群变成green。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此为龙果学院课程学习笔记，记录以后翻看&lt;/p&gt;
&lt;h2 id=&quot;ES基础分布式架构&quot;&gt;&lt;a href=&quot;#ES基础分布式架构&quot; class=&quot;headerlink&quot; title=&quot;ES基础分布式架构&quot;&gt;&lt;/a&gt;ES基础分布式架构&lt;/h2&gt;&lt;h3 id=&quot;Elasticsearch对复杂分布式机制的透明隐藏特性&quot;&gt;&lt;a href=&quot;#Elasticsearch对复杂分布式机制的透明隐藏特性&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch对复杂分布式机制的透明隐藏特性&quot;&gt;&lt;/a&gt;Elasticsearch对复杂分布式机制的透明隐藏特性&lt;/h3&gt;&lt;p&gt;Elasticsearch是一套分布式的系统，分布式就是为了应对大数据量。它隐藏了复杂的分布式机制，其中有几个很重要的机制和概念。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分片机制（之前将一些document插入到es集群中去，不用关心数据怎么进行分片的，数据到哪个shard中去，这是ES自动完成的）
    
    </summary>
    
      <category term="ElasticSearch" scheme="http://www.saily.top/categories/ElasticSearch/"/>
    
    
      <category term="ElasticSearch" scheme="http://www.saily.top/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>高可用缓存架构实战6-缓存雪崩及解决方案</title>
    <link href="http://www.saily.top/2018/06/12/cache/cache06/"/>
    <id>http://www.saily.top/2018/06/12/cache/cache06/</id>
    <published>2018-06-12T13:19:12.000Z</published>
    <updated>2018-09-20T02:14:37.395Z</updated>
    
    <content type="html"><![CDATA[<p>此为龙果学院课程笔记，记录以供以后翻看</p><h1 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h1><p>缓存雪崩这种场景，缓存架构中非常重要的一个环节，应对缓存雪崩的解决方案，避免缓存雪崩的时候，造成整个系统崩溃，带来巨大的经济损失</p><a id="more"></a><h2 id="缓存雪崩的过程和后果"><a href="#缓存雪崩的过程和后果" class="headerlink" title="缓存雪崩的过程和后果"></a>缓存雪崩的过程和后果</h2><p>缓存雪崩，一般首先是redis集群彻底崩溃，它导致崩溃的流程如下：</p><ol><li>redis集群彻底崩溃</li><li>缓存服务大量对redis的请求hang住，占用资源</li><li>缓存服务大量的请求打到源头服务去查询mysql，直接打死mysql</li><li>源头服务因为mysql被打死也崩溃，对源服务的请求也hang住，占用资源</li><li>缓存服务大量的资源全部耗费在访问redis和源服务无果，最后自己被拖死，无法提供服务</li><li>nginx无法访问缓存服务，redis和源服务，只能基于本地缓存提供服务，但是缓存过期后，没有数据提供</li><li>网站崩溃</li></ol><p><img src="/img/cache/缓存雪崩的过程和后果.png" alt="缓存雪崩的过程和后果"></p><h1 id="缓存雪崩的解决方案"><a href="#缓存雪崩的解决方案" class="headerlink" title="缓存雪崩的解决方案"></a>缓存雪崩的解决方案</h1><p>相对来说，考虑的比较完善的一套方案，分为事前，事中，事后三个层次去思考怎么来应对缓存雪崩的场景</p><h2 id="事前解决方案"><a href="#事前解决方案" class="headerlink" title="事前解决方案"></a>事前解决方案</h2><p>所谓事前解决方案，就是发生缓存雪崩之前，事情之前，怎么去避免redis彻底挂掉。</p><p>那就是保证redis的高可用性，我们利用redis本身的高可用性，复制，主从架构等功能，操作主节点去读写，数据同步到从节点，一旦主节点挂掉，从节点就跟上。</p><p>一般是建议双机房部署，一套redis cluster，部分机器在一个机房，另一部分机器在另外一个机房。</p><p>还有一种部署方式，两套redis cluster，两套redis cluster之间做一个数据的同步，redis集群是可以搭建成树状的结构的。一旦单个机房出了故障，至少另外一个机房还能有些redis实例提供服务。</p><h2 id="事中解决方案"><a href="#事中解决方案" class="headerlink" title="事中解决方案"></a>事中解决方案</h2><p>如果redis cluster已经彻底崩溃了，已经开始大量的访问无法访问到redis了，那之前文章讲到过的多级缓存就起作用了。</p><p>ehcache缓存，第一应对零散的redis中数据被清除掉的现象，另外一个主要是预防redis彻底崩溃。这样多台机器上部署的缓存服务实例的内存中，还有一套ehcache的缓存，可以基于本地的ehcache的缓存提供一部分的数据。</p><p>一旦redis集群彻底崩溃了需要做以下几个步骤：</p><ol><li>对redis的访问做资源隔离，避免所有资源hang在访问redis上</li><li>对redis访问失败的情况做相应的熔断和降级策略</li><li>使用ehcache本地缓存</li><li>对源服务访问的限流以及资源隔离（mysql层）</li></ol><h2 id="事后解决方案"><a href="#事后解决方案" class="headerlink" title="事后解决方案"></a>事后解决方案</h2><p>如何恢复Redis Cluster，有两种情况</p><ol><li>redis数据可以恢复，做了备份，redis数据备份和恢复，redis重新启动起来</li><li>redis数据彻底丢失了，或者数据过旧，快速缓存预热，redis重新启动起来</li></ol><p>其实这套方案没什么东西，事前的Redis文章前面也说了，事中ehcache也做过了。但是，如何将缓存服务如何设计成高可用的架构，需要配合Hystrix来开发。我们的熔断，降级，限流等等操作都需要Hystrix的配合。</p><p><a href="http://www.saily.top/categories/hystrix/">Hystrix系列文章</a></p><p><img src="/img/cache/缓存雪崩的事前事中事后的解决方案.png" alt="缓存雪崩的事前事中事后的解决方案"></p><h1 id="使用Hystrix对Redis进行资源隔离"><a href="#使用Hystrix对Redis进行资源隔离" class="headerlink" title="使用Hystrix对Redis进行资源隔离"></a>使用Hystrix对Redis进行资源隔离</h1><p>接下来就要对redis的访问这一块加上保护措施，给商品服务的访问加上限流的保护措施。redis这一块，全都用hystrix的command进行封装，做资源隔离，确保redis的访问只能在固定的线程池内的资源来进行访问，哪怕是redis访问的很慢，有等待和超时，也不要紧，只有少量额线程资源用来访问，缓存服务不会被拖垮。</p><p>找到之前的缓存项目<a href="https://github.com/sail-y/eshop-cache" target="_blank" rel="noopener">https://github.com/sail-y/eshop-cache</a> ，引入Hystrix的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.netflix.hystrix<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hystrix-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.netflix.hystrix<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hystrix-metrics-event-stream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在CacheServiceImpl里有几处用到redis的地方，我们就需要开发几个相应的command。</p><h2 id="SaveProductInfo2RedisCacheCommand"><a href="#SaveProductInfo2RedisCacheCommand" class="headerlink" title="SaveProductInfo2RedisCacheCommand"></a>SaveProductInfo2RedisCacheCommand</h2><p><strong>SaveProductInfo2RedisCacheCommand.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yangfan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/06/12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SaveProductInfo2RedisCacheCommand</span> <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">Boolean</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ProductInfo productInfo;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SaveProductInfo2RedisCacheCommand</span><span class="params">(ProductInfo productInfo)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>(HystrixCommandGroupKey.Factory.asKey(<span class="string">"RedisGroup"</span>));</span><br><span class="line">        <span class="keyword">this</span>.productInfo = productInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Boolean <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringRedisTemplate redisTemplate = SpringContext.getApplicationContext().getBean(StringRedisTemplate.class);</span><br><span class="line"></span><br><span class="line">        String key = <span class="string">"product_info_"</span> + productInfo.getId();</span><br><span class="line">        redisTemplate.opsForValue().set(key, JSON.toJSONString(productInfo));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后用command替换之前的实现</p><p><strong>CacheServiceImpl.saveProductInfo2RedisCache</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将商品信息保存到redis中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> productInfo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveProductInfo2RedisCache</span><span class="params">(ProductInfo productInfo)</span> </span>&#123;</span><br><span class="line">    SaveProductInfo2RedisCacheCommand command = <span class="keyword">new</span> SaveProductInfo2RedisCacheCommand(productInfo);</span><br><span class="line">    command.execute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SaveShopInfo2RedisCacheCommand"><a href="#SaveShopInfo2RedisCacheCommand" class="headerlink" title="SaveShopInfo2RedisCacheCommand"></a>SaveShopInfo2RedisCacheCommand</h2><p><strong>SaveShopInfo2RedisCacheCommand.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存商品信息到Redis</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yangfan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/06/12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SaveShopInfo2RedisCacheCommand</span> <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">Boolean</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ShopInfo shopInfo;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SaveShopInfo2RedisCacheCommand</span><span class="params">(ShopInfo shopInfo)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>(HystrixCommandGroupKey.Factory.asKey(<span class="string">"RedisGroup"</span>));</span><br><span class="line">        <span class="keyword">this</span>.shopInfo = shopInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Boolean <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringRedisTemplate redisTemplate = SpringContext.getApplicationContext().getBean(StringRedisTemplate.class);</span><br><span class="line"></span><br><span class="line">        String key = <span class="string">"shop_info_"</span> + shopInfo.getId();</span><br><span class="line">        redisTemplate.opsForValue().set(key, JSONObject.toJSONString(shopInfo));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后用command替换之前的实现</p><p><strong>CacheServiceImpl.saveShopInfo2RedisCache</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将店铺信息保存到redis中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> shopInfo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveShopInfo2RedisCache</span><span class="params">(ShopInfo shopInfo)</span> </span>&#123;</span><br><span class="line">    SaveShopInfo2RedisCacheCommand command = <span class="keyword">new</span> SaveShopInfo2RedisCacheCommand(shopInfo);</span><br><span class="line">    command.execute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="GetProductInfoFromRedisCacheCommand"><a href="#GetProductInfoFromRedisCacheCommand" class="headerlink" title="GetProductInfoFromRedisCacheCommand"></a>GetProductInfoFromRedisCacheCommand</h2><p><strong>GetProductInfoFromRedisCacheCommand.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从Redis获取商品Command</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yangfan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/06/12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetProductInfoFromRedisCacheCommand</span> <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">ProductInfo</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long productId;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GetProductInfoFromRedisCacheCommand</span><span class="params">(Long productId)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>(HystrixCommandGroupKey.Factory.asKey(<span class="string">"RedisGroup"</span>));</span><br><span class="line">        <span class="keyword">this</span>.productId = productId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ProductInfo <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringRedisTemplate redisTemplate = SpringContext.getApplicationContext().getBean(StringRedisTemplate.class);</span><br><span class="line"></span><br><span class="line">        String key = <span class="string">"product_info_"</span> + productId;</span><br><span class="line">        String json = redisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="keyword">if</span> (json != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> JSONObject.parseObject(json, ProductInfo.class);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后用command替换之前的实现</p><p><strong>CacheServiceImpl.getProductInfoFromRedisCache</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从Redis从获取商品信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ProductInfo <span class="title">getProductInfoFromRedisCache</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    GetProductInfoFromRedisCacheCommand command = <span class="keyword">new</span> GetProductInfoFromRedisCacheCommand(id);</span><br><span class="line">    <span class="keyword">return</span> command.execute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="GetShopInfoFromRedisCacheCommand"><a href="#GetShopInfoFromRedisCacheCommand" class="headerlink" title="GetShopInfoFromRedisCacheCommand"></a>GetShopInfoFromRedisCacheCommand</h2><p><strong>GetShopInfoFromRedisCacheCommand.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从Redis获取店铺信息Command</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yangfan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/06/12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetShopInfoFromRedisCacheCommand</span> <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">ShopInfo</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long shopId;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GetShopInfoFromRedisCacheCommand</span><span class="params">(Long shopId)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>(HystrixCommandGroupKey.Factory.asKey(<span class="string">"RedisGroup"</span>));</span><br><span class="line">        <span class="keyword">this</span>.shopId = shopId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ShopInfo <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringRedisTemplate redisTemplate = SpringContext.getApplicationContext().getBean(StringRedisTemplate.class);</span><br><span class="line"></span><br><span class="line">        String key = <span class="string">"shop_info_"</span> + shopId;</span><br><span class="line">        String json = redisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="keyword">if</span> (json != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> JSONObject.parseObject(json, ShopInfo.class);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后用command替换之前的实现</p><p><strong>CacheServiceImpl.getShopInfoFromRedisCache</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从Redis中获取商品店铺信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ShopInfo <span class="title">getShopInfoFromRedisCache</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    GetShopInfoFromRedisCacheCommand command = <span class="keyword">new</span> GetShopInfoFromRedisCacheCommand(id);</span><br><span class="line">    <span class="keyword">return</span> command.execute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用Hystrix对Redis访问进行降级"><a href="#使用Hystrix对Redis访问进行降级" class="headerlink" title="使用Hystrix对Redis访问进行降级"></a>使用Hystrix对Redis访问进行降级</h1><p>上面已经通过hystrix command对redis的访问进行了资源隔离，避免redis访问频繁失败，或者频繁超时的时候，耗尽大量的tomcat容器的资源去hang在redis的访问上。</p><p>这样就限定只有一部分线程资源可以用来访问redis，如果redis集群彻底崩溃了，这个时候，可能command对redis的访问大量的报错和timeout超时，熔断（短路），我们就需要对redis进行降级，用Hystrix的fallback机制。建议是使用fail silent模式，fallback里面直接返回一个空值，比如一个null，最简单。</p><p>在外面调用redis的代码（CacheService类），只要你把timeout、熔断、熔断恢复、降级，都做好了，是感知不到redis的访问异常的。可能会出现的情况是，当redis集群崩溃的时候，CacheService会获取到的是大量的null空值。</p><p>根据这个null空值，我们还可以去做多级缓存的降级访问，nginx本地缓存，redis分布式集群缓存，ehcache本地缓存等等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ProductInfo <span class="title">getFallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>顺便回顾一下之前CacheController的代码，在从redis里获取null值以后，会自动去别的地方一步步获取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/getProductInfo"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ProductInfo <span class="title">getProductInfo</span><span class="params">(Long productId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 先从Redis从获取数据</span></span><br><span class="line">    ProductInfo productInfo = cacheService.getProductInfoFromRedisCache(productId);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (productInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">"=================从redis中获取缓存，商品信息="</span> + productInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (productInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">        productInfo = cacheService.getProductInfoFromLocalCache(productId);</span><br><span class="line">        System.out.println(<span class="string">"================从ehcache从获取缓存，商品信息="</span> + productInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (productInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 就需要从数据源重新拉取数据，重建缓存，模拟获取</span></span><br><span class="line">        String productInfoJSON = <span class="string">"&#123;\"id\": "</span> + productId + <span class="string">", \"name\": \"iphone7手机\", \"price\": 5599, \"pictureList\":\"a.jpg,b.jpg\", \"specification\": \"iphone7的规格\", \"service\": \"iphone7的售后服务\", \"color\": \"红色,白色,黑色\", \"size\": \"5.5\", \"shopId\": 2, \"modifiedTime\": \"2018-02-21 22:11:34\"&#125;"</span>;</span><br><span class="line">        productInfo = JSONObject.parseObject(productInfoJSON, ProductInfo.class);</span><br><span class="line">        <span class="comment">// 将数据推送到一个内存队列中</span></span><br><span class="line">        RebuildCacheQueue rebuildCacheQueue = RebuildCacheQueue.getInstance();</span><br><span class="line">        rebuildCacheQueue.putProductInfo(productInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> productInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过这样一个简单的改造，我们使用Hystrix对redis的线程资源隔离和降级都很容易的完成了。</p><h1 id="Redis集群崩溃定制化熔断策略"><a href="#Redis集群崩溃定制化熔断策略" class="headerlink" title="Redis集群崩溃定制化熔断策略"></a>Redis集群崩溃定制化熔断策略</h1><p>缓存雪崩的事中解决方案</p><p>redis集群崩溃的时候，Hystrix会怎么样？</p><ol><li>大量的等待，超时，报错</li><li>如果是短时间内报错，会直接走fallback降级，直接返回null</li><li>超时控制，应该是判断redis访问超过了多长时间，就直接给报错timeout了</li></ol><p>不推荐用默认的值，一般不太精准，redis的访问先统计一下访问时长的百分比，hystrix dashboard里可以看到TP90，TP95，TP99的时间分别是多少。一般redis访问TP99在100ms以内，那么此时timeout时长稍微设置多一些，比如100ms。</p><h2 id="timeout设置"><a href="#timeout设置" class="headerlink" title="timeout设置"></a>timeout设置</h2><p>HystrixCommandProperties.Setter()<br>   .withExecutionTimeoutInMilliseconds(int value)</p><p>意义在于哪里？一旦redis出现了大面积的故障，此时肯定是访问的时候大量的超过100ms，大量的在等待和超时，这样就可以确保大量的请求不会hang住过长的时间，比如hang住个1s，500ms。如果100ms直接就报timeout，就会走fallback降级了。</p><h2 id="熔断策略"><a href="#熔断策略" class="headerlink" title="熔断策略"></a>熔断策略</h2><p>开启熔断有2个参数</p><h3 id="circuitBreaker-requestVolumeThreshold"><a href="#circuitBreaker-requestVolumeThreshold" class="headerlink" title="circuitBreaker.requestVolumeThreshold"></a>circuitBreaker.requestVolumeThreshold</h3><p>设置一个rolling window，滑动窗口中，最少要有多少个请求时，才触发开启短路。举例，如果设置为20（默认值），那么在一个10秒的滑动窗口内，如果只有19个请求，即使这19个请求都是异常的，也是不会触发开启短路器的。</p><p>HystrixCommandProperties.Setter()<br>   .withCircuitBreakerRequestVolumeThreshold(int value)</p><p>我们应该根据我们自己的平时的访问流量去设置，而不是用默认值，比如，我们认为平时一般的时候，流量也可以在每秒在QPS 100，10秒的滑动窗口就是1000，一般可以设置600或者800一个值，需要根据自己的系统的流量去设置。假如你设置的太少了，或者太多了，都不太合适。举个例子，你设置一个20，结果在晚上最低峰的时候，刚好是30，可能晚上的时候因为访问不频繁，大量的找不到缓存，可能超时频繁了一些，结果直接就给短路了。</p><h3 id="circuitBreaker-errorThresholdPercentage"><a href="#circuitBreaker-errorThresholdPercentage" class="headerlink" title="circuitBreaker.errorThresholdPercentage"></a>circuitBreaker.errorThresholdPercentage</h3><p>设置异常请求量的百分比，当异常请求达到这个百分比时，就触发打开短路器，默认是50，也就是50%</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HystrixCommandProperties.Setter()</span><br><span class="line">   .withCircuitBreakerErrorThresholdPercentage(<span class="keyword">int</span> value)</span><br></pre></td></tr></table></figure><p>我们最好还是自己定制，自己设置，如果是要50%的时候才短路的话，会有什么情况呢?10%短路，也不太靠谱，90%异常，才短路也不行。这个值可以稍微高一些，如果redis集群彻底崩溃，那么基本上就是所有的请求，100%都会异常，所以一般设置60%，70%。也有可能偶然出现网络的抖动，导致比如就这10秒钟，访问延时高了一些，其实可能并不需要立即就短路，可能下个10秒马上就恢复了。</p><p>金融支付类的接口，可能这个比例就会设置的很低，因为对异常系统必须要很敏感，可能就是10%异常了，就直接短路了，不让继续访问了。金融支付类的接口是很重要的，而且必须是很稳定，我们不能容忍任何的延迟或者是报错。一旦支付类的接口，有10%的异常的话，我们基本就可以认为这个接口已经出问题了，再继续访问的话，也许访问的就是有问题的接口，可能造成资金的错乱，给公司造成损失。所以直接熔断吧，不让访问了，走降级策略，这就是对整个系统的一个安全性保障。</p><h3 id="circuitBreaker-sleepWindowInMilliseconds"><a href="#circuitBreaker-sleepWindowInMilliseconds" class="headerlink" title="circuitBreaker.sleepWindowInMilliseconds"></a>circuitBreaker.sleepWindowInMilliseconds</h3><p>设置在短路之后，需要在多长时间内直接reject请求，然后在这段时间之后，再重新导half-open状态，尝试允许请求通过以及自动恢复，默认值是5000毫秒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HystrixCommandProperties.Setter()</span><br><span class="line">   .withCircuitBreakerSleepWindowInMilliseconds(<span class="keyword">int</span> value)</span><br></pre></td></tr></table></figure><p>如果redis集群崩溃了，会在5s内就直接恢复。</p><h1 id="Hystrix保护源服务，防止Mysql崩溃"><a href="#Hystrix保护源服务，防止Mysql崩溃" class="headerlink" title="Hystrix保护源服务，防止Mysql崩溃"></a>Hystrix保护源服务，防止Mysql崩溃</h1><p>做缓存服务，redis集群彻底崩溃的时候，除了对redis本身做资源隔离、超时控制、熔断策略。还要保护源服务，因为Redis集群崩溃后，大量的请求会高并发会去访问源服务-商品服务（提供商品数据）。如果QPS10000去访问商品服务，基于mysql去查询，那mysql肯定会挂掉，商品服务也就死掉了。</p><p>所以要对商品服务这种源服务的访问施加限流的措施，限流怎么限，hystrix本身就是提供了两种机制，线程池（内部做了异步化处理，可以处理超时），semaphore（信号量，让tomcat线程执行运行逻辑，没有内部的异步化处理，一旦超时，会导致tomcat线程就hang住了）。</p><p>一般推荐线程池用来做有网络访问的这种资源隔离，因为涉及到网络，就很容易超时；sempahore是用来做对服务纯内存的一些复杂业务逻辑的操作进行限流，因为不涉及网络访问，就是纯粹为了避免对内存内的复杂业务逻辑进行太高并发的访问，造成系统本身的故障。semaphore在以下情况是很合适的：比如一些推荐、搜索，有部分算法，复杂的算法，是放在服务内部纯内存去运行的，一个服务暴露出来的就是某个算法的执行。</p><p>我们这里是访问外部的商品服务，所以还是用线程池做限流，需要算一下，要限多少，怎么限？</p><p>假设每次商品服务的访问性能在200ms，1个线程一秒可以执行5次访问，假设我们一个缓存服务实例对这个商品服务的访问每秒在150次。所以这个时候，我们就需要30个线程，每个线程每秒可以访问5次，总共每秒30个线程可以访问150次。</p><p>我们算的这个每秒150次访问时正常情况下，如果是非正常情况下，每秒1000次，甚至1w次，此时就可以自然限流，因为我们的线程池就30个。在非正常情况下，直接线程池+等待队列全满，此时就会出现大量的reject操作，然后就会去调用降级逻辑。接着我们要做限流，设置的就是线程池的大小，还有等待队列的大小，30个线程可以每秒处理150个请求，但是偶尔会多一些出来，同时30个线程处理150个请求会快一些，不用花费1秒钟，等待队列给一些buffer，不要偶尔1秒钟来了200条请求，50条直接给reject掉了。等待队列设置150个，30个线程直接500ms处理完了，等待队列中的50个请求就可以继续处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetProductInfoCommand</span> <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">ProductInfo</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long productId;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GetProductInfoCommand</span><span class="params">(Long productId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class="string">"ProductInfoService"</span>))</span><br><span class="line">                .andThreadPoolKey(HystrixThreadPoolKey.Factory.asKey(<span class="string">"GetProductInfoPool"</span>))</span><br><span class="line">                .andThreadPoolPropertiesDefaults(HystrixThreadPoolProperties.Setter()</span><br><span class="line">                        .withCoreSize(<span class="number">10</span>)</span><br><span class="line">                        .withMaxQueueSize(<span class="number">12</span>)</span><br><span class="line">                        .withQueueSizeRejectionThreshold(<span class="number">8</span>)</span><br><span class="line">                        .withMaximumSize(<span class="number">30</span>)</span><br><span class="line">                        .withAllowMaximumSizeToDivergeFromCoreSize(<span class="keyword">true</span>)</span><br><span class="line">                        .withKeepAliveTimeMinutes(<span class="number">1</span>)</span><br><span class="line">                        .withMaxQueueSize(<span class="number">50</span>)</span><br><span class="line">                        .withQueueSizeRejectionThreshold(<span class="number">100</span>))</span><br><span class="line">                .andCommandPropertiesDefaults(HystrixCommandProperties.Setter()</span><br><span class="line">                        <span class="comment">// 多少个请求以上才会判断断路器是否需要开启。</span></span><br><span class="line">                        .withCircuitBreakerRequestVolumeThreshold(<span class="number">30</span>)</span><br><span class="line">                        <span class="comment">// 错误的请求达到40%的时候就开始断路。</span></span><br><span class="line">                        .withCircuitBreakerErrorThresholdPercentage(<span class="number">40</span>)</span><br><span class="line">                        <span class="comment">// 3秒以后尝试恢复</span></span><br><span class="line">                        .withCircuitBreakerSleepWindowInMilliseconds(<span class="number">4000</span>))</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">this</span>.productId = productId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ProductInfo <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String productInfoJSON = <span class="string">"&#123;\"id\": "</span> + productId + <span class="string">", \"name\": \"iphone7手机\", \"price\": 5599, \"pictureList\":\"a.jpg,b.jpg\", \"specification\": \"iphone7的规格\", \"service\": \"iphone7的售后服务\", \"color\": \"红色,白色,黑色\", \"size\": \"5.5\", \"shopId\": 1, \"modifiedTime\": \"2017-01-01 12:01:00\"&#125;"</span>;</span><br><span class="line">        <span class="keyword">return</span> JSONObject.parseObject(productInfoJSON, ProductInfo.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="源服务fallback降级机制"><a href="#源服务fallback降级机制" class="headerlink" title="源服务fallback降级机制"></a>源服务fallback降级机制</h2><p>现在nginx本地缓存没有，redis集群崩溃，ehcache也找不到这条数据对应的缓存，只能去源头服务里面查询，但是查询的请求又被限流了，现在请求到了这里，被限流了以后只能走降级逻辑。</p><p>这里的一种降级机制叫做<a href="http://www.saily.top/2018/04/15/hystrix03/">stubbed fallback降级机制</a>（残缺的降级），就是用请求参数中少量的数据，加上纯内存中缓存的少量的数据来提供残缺的数据服务。</p><h1 id="缓存雪崩预防和解决方案回顾"><a href="#缓存雪崩预防和解决方案回顾" class="headerlink" title="缓存雪崩预防和解决方案回顾"></a>缓存雪崩预防和解决方案回顾</h1><ol><li><p>事前，redis高可用性，redis cluster，sentinal，复制，主从，从-&gt;主，双机房部署</p></li><li><p>事中，ehcache可以扛一扛，redis挂掉之后的资源隔离、超时控制、熔断，商品服务的访问限流、多级降级，缓存服务在雪崩场景下存活下来，基于ehcache和存活的商品服务提供数据</p></li><li><p>事后，快速恢复Redis，备份+恢复，快速的缓存预热的方案</p></li></ol><h1 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h1><p>如果一直访问的根本不存在的时候，那么就会导致缓存穿透，所有的这种请求都会直接到mysql这边来。</p><p><img src="/img/cache/缓存穿透的现象.png" alt="缓存穿透的现象"></p><p>缓存穿透的解决方案其实非常简单，就是如果从源服务（商品服务）查询到的数据是空，就说明这个数据根本就不存在。那么如果这个数据不存在的话，我们也往redis和ehcache等缓存中写入一个数据，可以写入一个空的数据，比如空的productInfo的json串，给nginx也是，返回一个空的productInfo的json串。</p><p>我们有异步监听数据变更的机制在里面，如果数据变更的话，某个数据本来是没有的，可能会导致缓存穿透，所以我们给了个空数据，但是现在这个数据有了，我们接收到这个变更的消息过后，就可以将数据再次从源服务中查询出来，然后设置到各级缓存中去了。</p><h1 id="缓存失效"><a href="#缓存失效" class="headerlink" title="缓存失效"></a>缓存失效</h1><p>之前在nginx中设置本地的缓存的时候，给了一个过期的时间（10分钟）。10分钟以后自动过期，过期了以后，就会重新从redis中去获取数据。10分钟到期自动过期，就叫做缓存的失效。如果缓存失效以后，那么实际上此时，就会有大量的请求回到redis中去查询。</p><p>如果同一时间来了1000个请求，都将缓存cache在了nginx自己的本地，缓存失效的时间都设置了10分钟，那么是不是可能导致10分钟过后，这些数据，就自动全部在同一时间失效了。如果同一时间全部失效，会不会导致同一时间大量的请求过来，在nginx里找不到缓存数据，全部高并发走到redis上去了。加重大量的网络请求，网络负载也会加重。</p><p>解决方案很简单，就是把10分钟的时间改成一个随机数,随机一个失效的时间。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">math.randomseed(tostring(os.time()):reverse():sub(1, 7))</span><br><span class="line"><span class="built_in">local</span> expireTime = math.random(600, 1200)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此为龙果学院课程笔记，记录以供以后翻看&lt;/p&gt;
&lt;h1 id=&quot;缓存雪崩&quot;&gt;&lt;a href=&quot;#缓存雪崩&quot; class=&quot;headerlink&quot; title=&quot;缓存雪崩&quot;&gt;&lt;/a&gt;缓存雪崩&lt;/h1&gt;&lt;p&gt;缓存雪崩这种场景，缓存架构中非常重要的一个环节，应对缓存雪崩的解决方案，避免缓存雪崩的时候，造成整个系统崩溃，带来巨大的经济损失&lt;/p&gt;
    
    </summary>
    
      <category term="高可用缓存架构实战" scheme="http://www.saily.top/categories/%E9%AB%98%E5%8F%AF%E7%94%A8%E7%BC%93%E5%AD%98%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="多级缓存架构" scheme="http://www.saily.top/tags/%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
</feed>
